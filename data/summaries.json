{
    "__assert": "The function `__assert` asserts that a given assertion is true, and if it is not, it will print an error message and terminate the program.\n",
    "__assert_perror_fail": "The function `assert_perror_fail` prints an error message to stderr indicating an inconsistency detected by ld.so, including the file, line number, and function name (if available) and the error message from `strerror_r`.\n",
    "__assert_fail": "The `assert_fail` function prints an error message to stderr indicating that an assertion has failed, including the file name, line number, function name (if available), and the failed assertion.\n",
    "catopen": "The `catopen` function opens a catalog file using the current locale setting for LC_MESSAGES or the LANG environment variable, and returns a pointer to a `nl_catd` structure representing the opened catalog. If there is not enough memory to open the catalog, or if the catalog file cannot be found, the function returns a negative value.\n",
    "catgets": "The `catgets` function retrieves a message from a message catalog based on a set and message number. It returns the message as a null-terminated string, or `ENOMSG` if the message is not found.\n",
    "catclose": "The `catclose` function closes a catalog opened with `catopen` and frees the memory allocated for it.\n",
    "__open_catalog": "If the file is valid, it returns 0.\n",
    "__errno_location": "The function `errno_location()` returns a pointer to the `errno` variable, which stores the last error number that occurred in the system.\n",
    "__gmon_start__": "The function `__gmon_start__` protects against being called more than once, starts keeping profiling records, and sets up an atexit function to write out the collected data to `gmon.out`.\n",
    "__libc_init_first": "The function `__libc_init_first` initializes the first time the shared library is loaded, performing any necessary setup and initialization.\n",
    "isblank": "The `isblank` function returns a boolean indicating whether the given character `c` is a blank character (space or tab).\n",
    "__isblank_l": "The `isblank_l` function checks if a character `c` is a blank character (space or tab) in the given locale `l`.\n",
    "_tolower": "The function `_tolower(int c)` takes an integer character `c` as input and returns its lowercase equivalent using the `_ctype_tolower` array.\n",
    "_toupper": "The `toupper` function takes an integer `c` as input and returns the corresponding uppercase character from the current locale's character set, as determined by the `__ctype_toupper` array.\n",
    "toascii": "The `toascii` function converts an integer `c` to its ASCII representation as a character.\n",
    "isascii": "The `isascii` function takes an integer `c` as input and returns a boolean indicating whether the corresponding ASCII character is a valid ASCII character.\n",
    "tolower": "The `tolower` function takes an integer `c` as input and returns its lowercase equivalent, using the `__ctype_tolower` array to perform the conversion.\n",
    "toupper": "The `toupper` function takes an integer `c` as input and returns the uppercase equivalent of `c` if it is a valid character (i.e., between -128 and 256), otherwise it returns the original character.\n",
    "__isctype": "The `isctype` function takes an integer `ch` and an integer `mask`, and returns a boolean value indicating whether the character `ch` is a valid member of the specified category (based on the current locale) and has the specified mask.\n",
    "__backtrace": "The `backtrace` function retrieves a stack trace of `size` frames, starting from the current frame, and stores the addresses in the `array` of `void*` pointers. It uses the `__libc_unwind_link_get` function to get the unwind link and retrieve the stack trace.\n",
    "__backtrace_symbols": "The `backtrace_symbols` function takes an array of void pointers and a count of the number of pointers, and returns a dynamically allocated array of strings representing the symbols associated with each pointer, along with their addresses and offsets relative to the containing file.\n",
    "__backtrace_symbols_fd": "The function __backtrace_symbols_fd takes an array of void pointers, a size, and a file descriptor as input, and prints the symbols associated with each void pointer to the file descriptor, using the dl_addr function to retrieve the symbol information.\n",
    "__chk_fail": "The function `__chk_fail` prints a message indicating a buffer overflow has been detected.\n",
    "__confstr_chk": "The `confstr_chk` function checks that the buffer provided is large enough to hold the result of the `confstr` function, and if not, it fails with an error.\n",
    "__dprintf_chk": "The function `__dprintf_chk` takes an integer `d`, an integer `flag`, a format string `fmt`, and a variable number of arguments, and it checks if the format string is valid and prints the formatted output to the specified destination.\n",
    "__explicit_bzero_chk": "The `explicit_bzero_chk` function sets all bytes in the given memory region to zero, while also performing a null pointer check and failing if the region is too small.\n",
    "__fdelt_chk": "The function `__fdelt_chk` takes a long integer `d` and checks if it is within the valid range of 0 to `FD_SETSIZE` (inclusive) and if not, it returns a failure status.\n",
    "__fgets_chk": "The `fgets_chk` function reads a line from a file, checking for errors and returning the line as a null-terminated string if successful, or `NULL` if there is an error.\n",
    "__fgets_unlocked_chk": "The `fgets_unlocked_chk` function reads a line from a file, handling non-blocking mode and reporting only new errors, and returns a null-terminated string or NULL if there is an error.\n",
    "__fgetws_chk": "The `fgetws_chk` function reads a line from a file into a buffer, handling errors and returning the buffer contents or `NULL` if an error occurs.\n",
    "__fgetws_unlocked_chk": "The function `fgetws_unlocked_chk` reads a line from a file specified by a file pointer `fp` into a buffer `buf` of size `size`. It returns the buffer containing the line, or `NULL` if there is an error. The function checks for errors and handles the case where the file descriptor is in non-blocking mode.\n",
    "__fortify_fail": "The function `__fortify_fail` prints a message to the standard error stream indicating that the program has terminated with an error, using the specified message as the text to print.\n",
    "__fread_chk": "The function `fread_chk` reads `size * n` bytes from the file pointed to by `stream` into the memory pointed to by `ptr`, checking for errors and returning the number of bytes read, while also checking for invalid input parameters.\n",
    "__fread_unlocked_chk": "The `fread_unlocked_chk` function reads up to `n` bytes from the specified `stream` into a memory block pointed to by `ptr`, where `size` is the size of each byte to be read. The function checks for errors and returns the number of bytes read, which may be less than `n` if an error occurs or if the end of the file is reached.\n",
    "__fwprintf_chk": "The `__fwprintf_chk` function prints a formatted string to a file stream using a variable argument list, checking for errors and returning a flag indicating whether the operation was successful.\n",
    "__getcwd_chk": "The `getcwd_chk` function gets the current working directory, checking the size of the buffer provided and returning the result if it fits, or failing with an error if the size is too large.\n",
    "__getdomainname_chk": "The `__getdomainname_chk` function retrieves the current domain name from the system and stores it in the provided buffer, with a maximum length of `nreal`, and returns the domain name if the buffer is not too small, otherwise it fails with an error.\n",
    "__getgroups_chk": "The `__getgroups_chk` function retrieves a list of group IDs of the specified size, checking the size and list length for validity and returning -1 with an error set if invalid, otherwise returning the number of groups retrieved.\n",
    "__gethostname_chk": "The function `__gethostname_chk` retrieves the hostname and checks the length of the input buffer to ensure it is large enough, and returns the hostname if it fits, or fails with an error if the buffer is too small.\n",
    "__gets_chk": "The `gets_chk` function reads a line from the standard input and stores it in the provided buffer, returning the buffer if successful or `NULL` if an error occurs. The function handles the case where the input is in non-blocking mode and the error flag is set, and it also checks if the input line is too long to fit in the provided buffer.\n",
    "__getwd_chk": "The `__getwd_chk` function gets the current working directory as a null-terminated string in the provided buffer, returning the result or invoking a failure check function if the `ERANGE` error occurs.\n",
    "__mbsnrtowcs_chk": "The `__mbsnrtowcs_chk` function converts a null-terminated string from the current locale to a wide character array, checking for errors and returning the number of wide characters converted.\n",
    "__mbsrtowcs_chk": "The `mbsrtowcs_chk` function converts a null-terminated string of characters to a wide string, checking for errors and returning the converted wide string.\n",
    "__mbstowcs_chk": "The function `__mbstowcs_chk` converts a null-terminated character string to a wide character string, handling multibyte character sequences and returning the number of characters written, or an error code if the destination buffer is too small.\n",
    "__memcpy_chk": "The `memcpy_chk` function copies the contents of the `srcpp` pointer to the `dstpp` pointer, checking that the destination length is sufficient, and returning the result of the memcpy operation.\n",
    "__mempcpy_chk": "The `mempcpy_chk` function copies a portion of memory from a source location to a destination location, checking for errors and returning the result of the copy operation.\n",
    "__memset_chk": "The `memset_chk` function sets a block of memory with a specified value, and checks that the length of the memory block is not less than the size of the value, returning the memory block with the specified value.\n",
    "__cyg_profile_func_enter": "The function `__cyg_profile_func_enter` writes the current position and that of the caller to a file descriptor `fd` for real-time output, when the profiling is active.\n",
    "__obstack_printf_chk": "The function `__obstack_printf_chk` prints a formatted string to an obstack, checking for buffer overflow and returning the result of the format operation.\n",
    "__poll_chk": "The `poll_chk` function checks that the number of `struct pollfd` elements in the `fds` array is sufficient for the number of file descriptors in the `nfds` parameter, and then calls the `poll` function with the `fds` array and `nfds` parameter. If there are not enough elements in the `fds` array, the function will fail with an error.\n",
    "__ppoll_chk": "The `ppoll_chk` function checks that the number of `struct pollfd` elements passed in `fds` is sufficient for the number of file descriptors specified in `nfds`, and then calls the `ppoll` function with the provided arguments. If the number of elements is not sufficient, the function will fail with an error.\n",
    "__pread64_chk": "The `pread64_chk` function reads up to `nbytes` bytes from the file descriptor `fd` at the position `offset`, checking that the size is not greater than `buflen`, and returns the number of bytes read or fails with an error if an issue occurs.\n",
    "__pread_chk": "The `pread_chk` function reads `nbytes` bytes from the file descriptor `fd` at the specified `offset`, checking that the size is not greater than the size of the `buf` buffer, and returns the number of bytes read.\n",
    "__read_chk": "The `read_chk` function reads up to `nbytes` bytes from the file descriptor `fd` into the buffer `buf`, checking that `nbytes` does not exceed the size of `buf`, and returning the number of bytes read.\n",
    "__readlink_chk": "The `readlink_chk` function reads a link target from a file and stores it in a buffer, checking that the buffer is large enough to hold the result and returning an error if it is not.\n",
    "__readlinkat_chk": "The `readlinkat_chk` function reads a link at a file descriptor `fd` and stores the link's contents in the buffer `buf` of size `len`. It checks that the length of the link is not greater than the size of the buffer and returns the contents of the link if successful.\n",
    "__realpath_chk": "The `realpath_chk` function resolves a possibly-relative pathname to an absolute pathname, checking that the resulting pathname does not exceed a certain maximum length. It returns the resolved pathname, or `NULL` if the input pathname is invalid or the resulting pathname exceeds the maximum length.\n",
    "__recv_chk": "The `__recv_chk` function receives data from a file descriptor `fd` into a user-provided buffer `buf` of size `n`, with a maximum buffer size of `buflen`, and returns the number of bytes received, checking for buffer overflows and failing if the requested amount of data exceeds the buffer size.\n",
    "__recvfrom_chk": "The function `__recvfrom_chk` receives data from a socket and checks that the requested amount of data is not greater than the buffer size, and if it is, it fails the operation, otherwise it returns the received data.\n",
    "__stack_chk_fail": "The function `__stack_chk_fail()` detects and reports stack smashing attacks by printing a message indicating that stack smashing has been detected.\n",
    "__stpcpy_chk": "The `stpcpy_chk` function copies at most `destlen` characters from the `src` string to the `dest` string, checking for overflow and returning the number of characters copied.\n",
    "__stpncpy_chk": "The `stpncpy_chk` function copies at most `n` characters from the `src` string to the `dest` string, checking for null termination and failing if the destination string is too small. It returns the result of the `stpncpy` function, which copies the characters.\n",
    "__strcat_chk": "The `strcat_chk` function appends the contents of the `src` string to the end of the `dest` string, checking for buffer overflow and handling it gracefully if it occurs. The function returns the modified `dest` string.\n",
    "__strcpy_chk": "The `strcpy_chk` function copies at most `destlen` characters from the `src` string to the `dest` string, and returns the result of the copy, or fails with an error if the copy would exceed `destlen`.\n",
    "__strlcat_chk": "The `__strlcat_chk` function appends the contents of the `s2` string to the end of the `s1` string, with a maximum length of `n`, and returns the result, failing if the `s1` string is too small.\n",
    "__strlcpy_chk": "The `strlcpy` function copies at most `n` characters from the string `s2` to the string `s1`, checking for buffer overflow and returning the number of characters copied.\n",
    "__strncat_chk": "The `strncat_chk` function appends a string to the end of another string, handling null termination and boundary checks.\n",
    "__strncpy_chk": "The `strncpy_chk` function copies at most `n` characters from the string `s2` to the string `s1`, checking that there is enough space in `s1` and failing if there is not.\n",
    "__swprintf_chk": "The `attribute_hidden __swprintf_chk` function formats a wide string using a specified format and arguments, and returns a flag indicating whether the formatting was successful.\n",
    "__ttyname_r_chk": "The function `__ttyname_r_chk` checks if the input buffer length is valid and then calls `__ttyname_r` to retrieve the name of the file descriptor `fd` into the provided buffer `buf` of length `buflen`.\n",
    "__vasprintf_chk": "The `attribute_hidden` function is a wrapper for the `vasprintf` function that checks if the output buffer is too small and reallocates it if necessary, returning the result of the `vasprintf` call.\n",
    "__vdprintf_chk": "The function `__vdprintf_chk` is a wrapper for the function `__nldbl___vdprintf_chk` that checks for errors and prints a message if there is a formatting error.\n",
    "__vfwprintf_chk": "The `attribute_hidden __vfwprintf_chk` function is a wrapper for the `__nldbl___vfwprintf_chk` function that prints a formatted string to a file using variable arguments.\n",
    "__obstack_vprintf_chk": "The function `__obstack_vprintf_chk` prints a formatted string to an obstack using either the `vprintf` or `nldbl` function depending on a flag value, and returns the result.\n",
    "__vswprintf_chk": "The `attribute_hidden __vswprintf_chk` function is a wrapper for the `_vswprintf_chk` function that performs a safe version of wide string formatting using a variable list of arguments.\n",
    "__vwprintf_chk": "The `attribute_hidden __vwprintf_chk` function prints a formatted string to the console using the `vwprintf` function, with the option to check for errors and handle them if necessary.\n",
    "__wcpcpy_chk": "The `wcpcpy_chk` function copies a null-terminated string from a source pointer to a destination pointer, checking for errors and ensuring that the destination buffer is large enough to hold the copy.\n",
    "__wcpncpy_chk": "The `wcpncpy_chk` function copies at most `n` characters from the `src` array to the `dest` array, checking for buffer overflow and returning the number of characters copied.\n",
    "__wcrtomb_chk": "The `wcrtomb_chk` function converts a wide character (wchar_t) to a multibyte character string (char *) using the specified mbstate_t structure and buffer length, and returns the number of bytes written.\n",
    "__wcscat_chk": "The `wcscat_chk` function appends the contents of a wide character string to a destination string, while ensuring that the destination string does not overflow and returning the updated destination string. It does this by iterating over the source string, copying each wide character to the destination string, and adjusting the pointers to the beginning of the next character in both strings.\n",
    "__wcscpy_chk": "The `wcscpy_chk` function copies a null-terminated string of wide characters to a destination string, checking for errors and returning the destination string.\n",
    "__wcslcat_chk": "The `wcslcat_chk` function appends the contents of the `s2` string to the end of the `s1` string, with a maximum length of `n`, and returns the result, checking for errors.\n",
    "__wcslcpy_chk": "The `wcslcpy_chk` function copies at most `n` characters from the string `s2` to the string `s1`, checking for overflow and failing if the destination buffer is too small.\n",
    "__wcsncat_chk": "The `wcsncat_chk` function appends a null-terminated string to a destination string, checking for buffer overflow and handling errors. It returns a pointer to the destination string.\n",
    "__wcsncpy_chk": "The `wcsncpy_chk` function copies at most `n` characters from the `src` string to the `dest` string, checking for overflow and failing if the destination buffer is too small.\n",
    "__wcsnrtombs_chk": "The function `__wcsnrtombs_chk` converts a wide character string to a multibyte string, checking for errors and returning the number of bytes written.\n",
    "__wcsrtombs_chk": "The `wcsrtombs_chk` function converts a wide character string to a multibyte string, checking for errors and ensuring that the destination buffer is large enough to hold the converted string.\n",
    "__wcstombs_chk": "The function `wcstombs_chk` converts a wide character string to a multibyte character string, checking for errors and returning the number of bytes written.\n",
    "__wctomb_chk": "The function `__wctomb_chk` converts a wide character (`wchar_t`) to a multibyte character string (`char`) using the `wcrtomb` function, checking for errors and returning the result.\n",
    "__wmemcpy_chk": "The `wmemcpy_chk` function copies a section of memory from one location to another, checking for errors and failing if the destination location is not large enough.\n",
    "__wmemmove_chk": "The `wmemmove_chk` function moves a sequence of `wchar_t` characters from one location to another, checking for invalid input and returning an error if the destination buffer is too small.\n",
    "__wmempcpy_chk": "The `wmempcpy_chk` function copies `n` bytes from the memory location pointed to by `s2` into the memory location pointed to by `s1`, checking for errors and returning the result.\n",
    "__wmemset_chk": "The `wmemset_chk` function sets a sequence of `wchar_t` characters to a specified value, checking for invalid input and returning the number of characters set.\n",
    "__wprintf_chk": "The `attribute_hidden __wprintf_chk` function prints a formatted string to the console, using the `va_list` argument to handle variable arguments and returning a flag indicating whether the output was successful.\n",
    "alphasort": "The `alphasort` function compares two directories based on the name of their contents, returning -1 if the first directory's name is less than the second directory's name, 1 if the first directory's name is greater than the second directory's name, and 0 if the names are equal.\n",
    "alphasort64": "The function `alphasort64` compares two directories using the `strcoll` function to determine which directory has a name that comes before the other in alphabetical order.\n",
    "getdirentries64": "The `getdirentries64` function retrieves directory entries from a file descriptor `fd` and stores them in a buffer `buf` of size `nbytes`, returning the number of entries returned or -1 on error, and also updating the base pointer `basep` to point to the starting position of the directory entries.\n",
    "readdir64_r": "The function readdir64_r() returns -1 with an error set to ENOSYS (not supported) and sets the result pointer to NULL.\n",
    "scandir": "The function `scandir` scans a directory and fills a list of directory entries, allowing the user to select and compare entries based on custom criteria.\n",
    "scandir64": "The function `scandir64` scans a directory and returns a list of directory entries, allowing the user to select and compare entries based on custom criteria.\n",
    "scandirat64": "The `scandirat64` function scans a directory specified by `dfd` and `dir`, and returns a list of `struct dirent64` structures in `namelist` based on the selection criteria specified by `select` and `cmp`.\n",
    "seekdir": "The `seekdir` function seeks to a specific position in a directory stream and resets the directory's size, offset, and file position. It locks the directory's lock before seeking and unlocks it afterward.\n",
    "telldir": "The `telldir` function returns the current file position of a directory stream, locking and unlocking the stream's lock mutex to ensure thread-safety.\n",
    "versionsort": "The `versionsort` function compares the names of two directory entries using the `strverscmp` function and returns an integer indicating the result of the comparison.\n",
    "versionsort64": "The `versionsort64` function compares the names of two directory entries using the `strverscmp` function and returns a negative integer if the first entry's name is less than the second entry's name, a positive integer if the first entry's name is greater than the second entry's name, and 0 if the names are equal.\n",
    "malloc": "The function `malloc` allocates memory for a specified size using the `xdlsym` function to call the original `malloc` function if it is not already initialized. If the `fail_malloc` flag is set, the function returns `NULL`.\n",
    "unsetenv": "The `unsetenv` function removes an environment variable by searching for its name in the list of environment variables and removing the corresponding pointer if found.\n",
    "_dl_find_object": "The function `_dl_find_object` searches for an object in the shared library using the given address and returns the result in the `struct dl_find_object` pointer.\n",
    "__strerror_r": "The function `strerror_r` takes an error number, a buffer to store the error message, and a buffer length, and returns a human-readable error message for the given error number, using a mapping of error codes to messages specific to the underlying system.\n",
    "__libc_fatal": "The function `__libc_fatal` prints the given message to the standard error stream in an infinite loop, effectively causing the program to abort.\n",
    "_dl_mcount_wrapper": "The function `_dl_mcount_wrapper` updates the memory counter for the current process by calling the `dl_mcount` function with the return address and the address of the current PC as arguments.\n",
    "_dl_mcount_wrapper_check": "The function `_dl_mcount_wrapper_check` checks if a dynamic linker profile map is present and, if so, calls the `dl_mcount` function with the current return address and the address of the function that called it.\n",
    "__libc_early_init": "The function __libc_early_init initializes the ctype data and sets up the single-threaded environment, marking the outer namespace as single-threaded and initializing the pthread subsystem.\n",
    "getpid": "The function getpid() retrieves the current process ID and returns its value plus 26.\n",
    "calloc": "The function `calloc` allocates memory for an array of size `a` with elements of size `b`, zeroing the memory using `mmap`, and returns a pointer to the allocated memory if successful, or `NULL` with error `ENOMEM` if the allocation fails due to insufficient memory.\n",
    "access": "The function accesses a symbol in a shared library using dlsym, tests its value, and increments it.\n",
    "__monstartup": "The `void __monstartup(u_long lowpc, u_long highpc)` function initializes the profiling data structures for the GNU prof tracking system. It sets up the histogram parameters, allocates memory for the histogram data, and prepares the profiling data structures for use.\n",
    "_mcleanup": "The function `_mcleanup` frees memory and resets the global profiling parameters to their initial state for safety.\n",
    "__profile_frequency": "The `__profile_frequency` function returns the current clock tick rate of the system.\n",
    "__libc_alloca_cutoff": "The `libc_alloca_cutoff` function returns a value indicating the maximum size of an object that can be allocated on the stack, taking into account the current stack block size and the maximum available stack space.\n",
    "__h_errno_location": "The function `__h_errno_location()` returns a pointer to the `__h_errno` variable, which stores the last error number that occurred in the system.\n",
    "pthread_cancel": "The `pthread_cancel` function cancels a thread, marking it as pending cancellation and potentially invoking a cancellation hook if it is blocking on a cancellation point.\n",
    "pthread_sigmask": "The `pthread_sigmask` function sets or clears the signal mask for the current thread, allowing it to block or unblock certain signals.\n",
    "pthread_yield": "The `pthread_yield()` function yields the current thread to allow other threads to run, allowing for more efficient multithreading and improved system responsiveness.\n",
    "free": "The function `free` frees the memory pointed to by the pointer `ptr`, if it is not null. It first locks the memory allocation system, then checks if the pointer is null and if it is not, it frees the memory using the internal function `free_internal`.\n",
    "realloc": "The function realloc(void *ptr, size_t len) dynamically loads the realloc function from the current shared object using dlsym, and then calls the loaded function with the given parameters.\n",
    "__gconv_get_cache": "The `gconv_get_cache()` function returns the current conversion cache.\n",
    "__gconv_create_spec": "The `gconv_create_spec` function creates a new conversion spec struct using the input fromcode and tocode strings. It parses the input code strings, ignores suffixes in the fromcode, and sets the transit and ignore fields of the conversion spec struct based on the tocode.\n",
    "__gconv_destroy_spec": "The `gconv_destroy_spec` function frees the memory allocated for the conversion specifier structure `conv_spec`, including the source and target code tables.\n",
    "__gconv_get_modules_db": "The `gconv_get_modules_db()` function returns a pointer to the internal database of GConverter modules.\n",
    "__gconv_get_alias_db": "The `gconv_get_alias_db()` function returns a pointer to the alias database used by the GNU C library's character conversion functions.\n",
    "__gconv_open": "The function `__gconv_open` initializes a new conversion handle and finds the appropriate transformation steps for a given input and output encoding, optionally ignoring errors and transliterating the input if necessary.\n",
    "__gconv_transliterate": "The function `gconv_transliterate` performs transliteration of input text using information from the locale's translation table. It searches for the best match of a sequence of input characters with the entries in the table and performs the corresponding replacement if a match is found.\n",
    "iconv": "The `iconv` function performs character conversion between two encoding schemes using the specified conversion descriptor. It returns the number of bytes that cannot be converted, or -1 if an error occurs.\n",
    "iconv_close": "The `iconv_close` function closes an iconv descriptor and returns 0 if successful or -1 if an error occurs, setting `EBADF` to the errno variable.\n",
    "iconv_open": "The `iconv_open` function creates an iconv conversion descriptor for converting between two encoding schemes, and returns the descriptor as an iconv_t pointer. If the conversion cannot be performed, the function sets the error number according to the specs and returns a negative value.\n",
    "bindresvport": "The `bindresvport` function binds a socket to a random available port between a specified range, and returns the bound port. It uses a loop to try different ports until one is available, and adjusts the range of ports to try based on whether the starting port is low or high.\n",
    "ether_aton": "The `ether_aton` function converts a string representing an Ethernet address into a `struct ether_addr` structure. It takes a `const char *asc` parameter representing the string to be converted, and returns the resulting `struct ether_addr` structure.\n",
    "ether_aton_r": "The function `ether_aton_r` takes a string representation of an Ethernet address in ASCII format and converts it to a binary Ethernet address structure.\n",
    "ether_line": "The `ether_line` function parses a string representing an Ethernet address, hostname, or both, and stores the results in the `struct ether_addr` and `char*` arguments. It returns 0 if the input is valid, and -1 if there is an error.\n",
    "ether_ntoa": "The `ether_ntoa` function converts a network address to a human-readable string representation.\n",
    "ether_ntoa_r": "The `ether_ntoa_r` function converts a `struct ether_addr` to a string representation in the format \"xx:xx:xx:xx:xx:xx\" and returns the resulting string.\n",
    "getipv4sourcefilter": "The `getipv4sourcefilter` function sets up an IPv4 source filter for a socket, specifying the source IP address and interface, and returns the filter mode and a list of source IP addresses. The function creates a scratch buffer to hold the filter structure and copies the results to the caller's buffers if successful.\n",
    "getsourcefilter": "The `getsourcefilter` function creates a kernel-level multicast filter for a given socket, interface, and group address, and returns the filter mode and a list of source addresses that match the filter. The function sets up a scratch buffer to hold the filter structure and copies the input parameters into the buffer, then calls the `__getsockopt` function to set up the filter in the kernel.\n",
    "htonl": "The `htonl` function takes an unsigned 32-bit integer `x` and returns its bytes in the host machine's endianness, either the native endianness or swapped if the system is little-endian.\n",
    "htons": "The `htons` function takes an unsigned 16-bit integer `x` and returns its value with the bytes swapped if the system is little-endian, and returns `x` unchanged if the system is big-endian.\n",
    "__idna_to_dns_encoding": "This function takes a string name and returns a new string encoding the name according to the IDNA2 standard. It determines the encoding required based on the name's class and performs the encoding using the libidn2 library.\n",
    "__idna_from_dns_encoding": "The `idna_from_dns_encoding` function decodes a DNS encoding of an internationalized domain name (IDN) and returns the resulting Unicode string. It uses the `get_functions` function to obtain the necessary encoding and decoding functions, and then calls those functions to perform the decoding.\n",
    "inet6_opt_init": "inet6_opt_init initializes an IPv6 header extension buffer by filling in the length of the extension in 8-byte units and subtracting one, as required by RFC 2460.\n",
    "inet6_opt_append": "This function adds an IPv6 option to a buffer, checking for minimum offset, option type validity, and alignment constraints. It returns the updated offset in the buffer where the option has been added, or -1 on failure.\n",
    "inet6_opt_finish": "The `inet6_opt_finish` function adds padding to the end of an IPv6 extension buffer to ensure that the buffer is properly aligned for transmission, and returns the updated offset.\n",
    "inet6_opt_set_val": "The `inet6_opt_set_val` function sets the value of a option in an IPv6 packet at a specific offset, copying the value from a user-provided buffer and returning the updated offset and length. It memcopies the value from the user-provided buffer to the packet at the specified offset, and returns the updated offset and length.\n",
    "inet6_opt_next": "The `inet6_opt_next` function parses the extension headers of an IPv6 packet and returns the type and length of the next extension header, or -1 if there are no more extension headers. It iterates over the extension headers, checking their types and lengths, and returns the type and length of the first valid extension header it finds.\n",
    "inet6_opt_find": "The `inet6_opt_find` function searches for a specific IPv6 option in a buffer of extension headers, starting from a given offset and returning the position of the option or -1 if it is not found. It checks the type of each option and skips over invalid options, returning the position of the first matching option and the length of the option.\n",
    "inet6_opt_get_val": "The `inet6_opt_get_val` function copies the value of a IPv6 option from a buffer at a specified offset and returns the updated offset and the length of the value. It takes a pointer to the buffer, the offset of the option, a pointer to the location where the value should be stored, and the length of the value as input.\n",
    "inet6_option_space": "The `inet6_option_space` function adds room for an extension header to a message and returns the updated message size, rounded up to the next 8-byte boundary. The function adds the size of the `struct ip6_ext` header to the message size and rounds up the total to the next 8-byte boundary.\n",
    "inet6_option_init": "The `inet6_option_init` function initializes a message header for IPv6 options, allowing only hop-by-hop or destination options and returning a pointer to the initialized header. It sets the message length, originating protocol, and message type, and passes the result to the caller.\n",
    "inet6_option_append": "The `inet6_option_append` function appends an IPv6 option to a message, copying the option data from a specified pointer and handling option types IP6OPT_PAD1 and IP6OPT_PADN. The function returns 0 if successful, or -1 if there is a problem with the parameters.\n",
    "inet6_option_alloc": "The `inet6_option_alloc` function allocates space for IPv6 options in a message header, based on the length of the data being sent and the number of options being included. It calls the `option_alloc` function to perform the allocation and returns the result.\n",
    "inet6_option_next": "The `inet6_option_next` function advances a pointer to the next option in an IPv6 extension header, checking that the option is fully represented in the message and returning the address of the next option. It returns -1 if the pointer is not advanced or if the option is not fully represented in the message.\n",
    "inet6_option_find": "The `inet6_option_find` function searches for a specific IPv6 extension header option in a message, starting from a given pointer to the message and advancing to the next option. It returns the address of the first byte of the found option, or -1 if the option is not found or the message is not valid.\n",
    "inet6_rth_space": "The function `inet6_rth_space` calculates the size of space needed for an IPv6 routing header based on the type of header and the number of segments. It returns the size of the header and the number of bytes needed for the segments.\n",
    "inet6_rth_init": "The `inet6_rth_init` function initializes an IPv6 record route header (RRH) with the specified type and number of segments, and returns the initialized header or `NULL` if the parameters are invalid or the buffer is too small. The function memsets the entire buffer with zeros, sets the header length and type, and returns the buffer.\n",
    "inet6_rth_add": "This function adds an IPv6 address to a routing header. It takes a pointer to the routing header and the IPv6 address to add, and it checks if there is enough space in the header for the address. If there is, it copies the address into the header.\n",
    "inet6_rth_reverse": "The `inet6_rth_reverse` function reverses the order of the addresses in an IPv6 routing header, preserving the length and segment left information. It copies the header information, but not the addresses, and swaps the addresses in pairs, with the odd and even addresses being swapped.\n",
    "inet6_rth_segments": "The function inet6_rth_segments calculates the number of segments in an IPv6 routing header based on the type of routing header and the length of the header.\n",
    "inet6_rth_getaddr": "The `inet6_rth_getaddr` function retrieves the IPv6 address at a specific index from a linked list of IPv6 records (RTHDRs) stored in a buffer. The function returns the address if it is within the range of the RTHDR, and returns NULL otherwise.\n",
    "__inet6_scopeid_pton": "The `inet6_scopeid_pton` function converts a scope identifier in the format of a colon-separated list of integers to a scope index. It supports both numeric and string-based scope identifiers, and returns the scope index if successful, or -1 with an error set.\n",
    "inet_lnaof": "The `inet_lnaof` function takes a `struct in_addr` parameter and returns the host part of the IP address, based on the address's class. It determines the class of the address using the `IN_CLASSA`, `IN_CLASSB`, or `IN_CLASSC` macros, and then returns the host part of the address using the appropriate bit mask.\n",
    "inet_netof": "The `inet_netof` function takes a `struct in_addr` parameter and returns the network portion of the IP address, which is the portion of the address that is common to all hosts on a particular network. The function uses the `IN_CLASSA`, `IN_CLASSB`, and `IN_CLASSC` macros to determine the network class of the address and returns the appropriate network portion based on that class.\n",
    "inet_ntoa": "The function inet_ntoa converts an IP address represented as a binary struct in_addr into a human-readable dotted decimal string.\n",
    "rcmd_af": "The function rcmd_af establishes a connection to a remote host using a specified address family, sets up a socket for communication, and executes a command on the remote host.\n",
    "rcmd": "The function `rcmd` takes a list of host and port information, along with user information and a command to execute, and returns the result of executing the command on the specified host using the `rcmd_af` function with the address family set to AF_INET.\n",
    "rresvport_af": "The function `rresvport_af` binds a socket to a specific port number, but only if the port is currently unused. It starts by checking if the port number is valid, and if not, it returns an error. If the port is valid, it binds the socket to the port and returns the socket descriptor.\n",
    "rresvport": "The function `rresvport` takes a pointer to an `alport` structure and returns a reserved port number for the specified address family (AF_INET).\n",
    "ruserok_af": "The function `ruserok_af` checks if a remote host is accessible from the local host, based on the specified superuser and remote user credentials. It returns 0 if the remote host is accessible, and -1 otherwise.\n",
    "ruserok": "The function `ruserok` checks if a remote user is allowed to access a service based on their username and hostname, and returns a boolean value indicating whether access is granted or not.\n",
    "iruserok_af": "The function `iruserok_af` takes a pointer to a socket address, an integer representing the superuser privilege, and two strings representing the remote and local users, and returns a value indicating whether the remote user is allowed to access the local user's socket. It does this by creating a `sockaddr` union and switching on the address family of the input address, then calling the `ruserok_sa` function with the resulting `sockaddr` structure and the other input parameters.\n",
    "iruserok": "The function `iruserok` checks if a remote user is allowed to access a resource based on their username and address, and returns a value indicating whether the access is granted or not.\n",
    "__ivaliduser": "The `attribute_compat_text_section` function validates the user address and returns the result of the validation.\n",
    "rexec_af": "The `rexec_af` function performs a remote execution of a command on a host specified by `ahost`, using the `rexec` protocol over a socket. It takes `ahost`, `rport`, `name`, `pass`, `cmd`, and `fd2p` as input, and returns the socket used for the execution on success, or -1 on error.\n",
    "rexec": "The `rexec` function executes a command on a remote host, specified by the `ahost` and `rport` parameters, using the `rexec_af` function. The `rexec` function takes additional parameters `name`, `pass`, and `cmd` to specify the command to be executed, as well as an output file descriptor (`fd2p`).\n",
    "ruserpass": "The function `ruserpass` reads the `.netrc` file in the home directory of the current user and parses it to extract the username and password for a given host, returning 0 if successful or -1 if there is an error.\n",
    "setipv4sourcefilter": "The function sets an IPv4 source filter on a socket s, allowing only packets from the specified interface and group addresses, and optionally specifying a filter mode and number of sources.\n",
    "setsourcefilter": "The `setsourcefilter` function sets up a multicast filter on a socket `s` to receive packets from a specified group of sources, specified by the `group` and `numsrc` parameters. The function creates a kernel-compatible `struct ip_msfilter` object and sets its members using the `scratch_buffer` and `memcpy` functions, and then sets the filter using the `__setsockopt` function.\n",
    "stpcpy": "The `stpcpy` function copies the contents of the `src` string to the `dest` string, overwriting any existing contents of `dest`.\n",
    "mempcpy": "The `mempcpy` function copies the contents of the `src` pointer to the `dest` pointer, and returns a pointer to the end of the copied memory block.\n",
    "__close": "The function `__close(int fd)` simulates the behavior of the `close` system call, but instead of actually closing the file descriptor, it returns a cancelation status using the `SYSCALL_CANCEL` macro.\n",
    "copy_file_range": "The `copy_file_range` function copies a range of bytes from one file to another, specified by the input and output file descriptors, offset pairs, and length, with optional flags to control the copy operation.\n",
    "creat": "The `creat` function creates a new file with the specified name and mode, truncating any existing file with the same name.\n",
    "creat64": "The function `creat64` creates a new file with the specified name and mode. It returns a file descriptor for the new file.\n",
    "__dup2": "The `dup2` function duplicates the file descriptor `fd` to `fd2`, or returns `fd` if it is already equal to `fd2`.\n",
    "faccessat": "The function `faccessat` checks if the file specified by `file` has the specified `type` of access (read, write, execute, or all) and raises an error if the file does not exist, is not a symbolic link, or if the `flag` parameter contains invalid values.\n",
    "fchmodat": "The function fchmodat() changes the file mode of a file descriptor fd to the specified mode, using the specified file name and flag (which can be 0 or non-zero).\n",
    "fchownat": "The function fchownat changes the ownership of a file or directory specified by file to the specified owner and group, but only if the file is a regular file and not a symbolic link, and it returns -1 if any error occurs.\n",
    "__fcntl": "The function `fcntl` takes three arguments and performs various file descriptor operations, but it always returns -1 and sets the `errno` variable to either `EBADF` or `ENOSYS`, indicating an error. The function does not perform any actual operations and always returns an error.\n",
    "__file_is_unchanged": "The function `file_is_unchanged` compares two `struct file_change_detection` objects and returns `true` if the files have the same size, inode number, modification and creation times, and false otherwise.\n",
    "__file_change_detection_for_stat": "This function detects changes to files and updates the size, inode number, mtime, and ctime of the file structure based on the contents of the stat64 buffer. If the file is a directory, the function treats it as an empty file and sets the size to 0.\n",
    "__file_change_detection_for_path": "The `file_change_detection_for_path` function checks if a file has changed by calling `stat64` to retrieve the file's stats, and if the call is successful, it checks if the file has changed by comparing the current stats with the previous ones, returning `true` if the file has changed and `false` otherwise.\n",
    "__file_change_detection_for_fp": "The function `file_change_detection_for_fp` checks if a file exists and, if it does, updates the file's size information using `fstat64`, returning `true` if the file exists and `false` if it does not.\n",
    "__fstat64": "The function `fstat64` retrieves information about a file or directory specified by a file descriptor `fd`, and stores the information in the `struct stat64` buffer `buf`, returning the result or setting the error to `EBADF` if `fd` is invalid.\n",
    "futimens": "The function `futimens` sets the file timestamps of a file descriptor `fd` to the values specified in the `struct timespec` array `tsp`, but it always returns -1 with an error set to `ENOSYS`.\n",
    "get_current_dir_name": "The `get_current_dir_name()` function returns the current working directory name as a string, using the `getenv()` function to retrieve the PWD environment variable and the `stat64()` function to verify its correctness, and returns a duplicated copy of the correct PWD value if found, or the current working directory name using `getcwd()` if the PWD value is invalid.\n",
    "getwd": "The `getwd` function retrieves the current working directory and stores it in a user-provided buffer. It returns the contents of the buffer if the operation is successful, or `NULL` with an error code set if the operation fails.\n",
    "lchmod": "The function `lchmod` changes the file mode (permissions) of a file specified by a string `file` to the value specified by `mode`, and returns 0 if successful or -1 if an error occurs.\n",
    "linkat": "The `linkat` function links a file or directory from one file descriptor to another, but it returns -1 with an error code if either of the file descriptors or the paths are invalid.\n",
    "lockf": "The `lockf` function locks or unlocks a file descriptor using a file lock. It takes an integer `fd` representing the file descriptor, an integer `cmd` representing the command to perform (one of `F_TEST`, `F_ULOCK`, `F_LOCK`, or `F_TLOCK`), and an `off_t` `len` representing the length of the lock.\n",
    "mkdirat": "The `mkdirat` function creates a directory at a specified file descriptor and path, but it only works if the file descriptor is associated with a directory and the path is not null.\n",
    "mkfifo": "The `mkfifo` function creates a named pipe (FIFO) at the specified path with the given mode and returns the file descriptor.\n",
    "mkfifoat": "The `mkfifoat` function creates a named pipe (FIFO) with the specified name and mode, and returns the file descriptor for the pipe.\n",
    "__open64_2": "The `open64_2` function opens a file in the specified mode (using the `O_CREAT` or `O_TMPFILE` flags), checking that the mode is valid and returning the file descriptor if the open is successful.\n",
    "__open_2": "The `open_2` function opens a file with the specified name and flags, and checks that the flags do not include `O_CREAT` or `O_TMPFILE` without a valid mode.\n",
    "__openat64_2": "The `openat64_2` function opens a file specified by `file` with file descriptor `fd` and flags `oflag`, checking that the flags are valid and returning the result of the `openat64` function. The function checks that the flags include either `O_CREAT` or `O_TMPFILE` and that a mode is provided, and it fortifies the call if these conditions are not met.\n",
    "__openat_2": "The `openat_2` function opens a file descriptor at a file specified by `file` with the options specified in `oflag`, checking that the `O_CREAT` or `O_TMPFILE` flags are not used without a valid mode.\n",
    "__pipe": "The function `__pipe` creates a pipe between two processes by calling the `pipe2` system call with the given array of integers as arguments.\n",
    "__poll": "The `poll` function waits for any of the specified file descriptors to become ready for reading or writing, with an optional timeout specified in milliseconds.\n",
    "posix_fadvise": "The `posix_fadvise` function advises the kernel about the optimal alignment and size of a memory mapping, given a file descriptor, an offset, a length, and an advice value.\n",
    "posix_fadvise64": "The `posix_fadvise64` function advises the kernel on the optimal placement of data in a file, but it always returns `ENOSYS` indicating that the function is not supported.\n",
    "posix_fallocate": "The posix_fallocate function allocates a range of bytes on a file descriptor fd, starting from the specified offset and with the specified length.\n",
    "posix_fallocate64": "The function `posix_fallocate64` attempts to allocate space for a file specified by `fd` starting at `offset` and continuing for `len` bytes, but it always returns `ENOSYS` indicating that the function is not supported.\n",
    "ppoll": "The `ppoll` function polls the specified file descriptors for readiness, with an optionally specified timeout and signal mask, and returns the number of file descriptors that are ready.\n",
    "readlinkat": "The `readlinkat` function reads the contents of a symbolic link at a file descriptor and a path, returning the contents of the link in a buffer.\n",
    "sendfile": "The `sendfile` function sends a file descriptor's contents to a socket, allowing efficient transfer of large amounts of data. It takes four arguments: the file descriptor to read from, the file descriptor to write to, an optional pointer to a variable to store the file offset, and the number of bytes to transfer.\n",
    "sendfile64": "The `sendfile64` function sends the contents of a file descriptor `in_fd` to a file descriptor `out_fd` starting from a specified offset `offset` for a maximum of `count` bytes.\n",
    "__statfs": "The `__statfs` function returns the file system status of the specified file using the `statfs` system call.\n",
    "statx": "The function statx() calls the kernel's statx system call to retrieve information about a file or directory specified by the path parameter, with the flags parameter specifying the information to be retrieved and the mask parameter specifying the bits of the stat structure to be filled in.\n",
    "symlinkat": "The `symlinkat` function creates a symbolic link from the file descriptor `fd` to the file specified by `to`, but it returns -1 with an error set to `ENOSYS` if the system does not support symbolic links.\n",
    "ttyname": "The `ttyname` function retrieves the name of the terminal associated with a file descriptor `fd`. It uses `tcgetattr` to check if the file descriptor is a terminal, and if so, it returns the name of the terminal in a buffer provided by the caller.\n",
    "unlinkat": "The function unlinkat removes a file or directory by name, but only if the file or directory is a symbolic link and the link is not a directory.\n",
    "utime": "The `utime` function sets the access and modification times of a file specified by `file` to the values stored in the `struct utimbuf` pointed to by `times`. If `times` is `NULL`, the function sets the times to the current time.\n",
    "utimensat": "The function utimensat sets the file timestamps of a file descriptor fd to the values specified in the struct timespec array tsp, and returns 0 if successful or -1 if an error occurs.\n",
    "__fbufsize": "The `fbufsize` function returns the size of the input/output buffer currently in use by the specified `FILE` pointer, depending on the mode of the file.\n",
    "__flbf": "The function `__flbf` returns the value of the `_IO_LINE_BUF` flag in the `fp` parameter, which is a `FILE` pointer. In other words, it returns a boolean value indicating whether the input stream is currently in line buffering mode.\n",
    "__fpending": "The function `__fpending` returns the number of bytes pending to be written to a file pointer `fp`, depending on the mode of the file. If the file is in binary mode, it returns the difference between the current write pointer and the base pointer; if the file is in text mode, it returns the difference between the current write pointer and the base pointer, but only for the portion of the file that has been written so far.\n",
    "__fpurge": "The function `fpurge` clears the input and output pointers and bases for both byte and wide-character streams, freeing any backup areas in the process.\n",
    "__freadable": "The `freadable` function checks if the file pointer `fp` is open for reading by checking the `_IO_NO_READS` flag in `fp->_flags`. If the flag is not set, the function returns `true`.\n",
    "__freading": "The `freading` function checks if the file pointer `fp` is currently in a state where it is possible to read from the file, based on the values of the `_IO_NO_WRITES`, `_IO_CURRENTLY_PUTTING`, and `_IO_NO_READS` flags.\n",
    "__fsetlocking": "The `fsetlocking` function sets or queries the locking status of a file pointer, allowing the application to lock the file for exclusive access.\n",
    "__fwritable": "The function `__fwritable` checks if the file pointer `fp` is open for writing. It returns `true` if the file is open for writing, and `false` otherwise.\n",
    "__fwriting": "The `fwriting` function returns a boolean value indicating whether the file pointer `fp` is currently writing to the file or not, based on the values of the `_IO_NO_READS` and `_IO_CURRENTLY_PUTTING` flags.\n",
    "clearerr": "The `clearerr` function clears any error flags set on a file pointer and locks the file for exclusive access.\n",
    "clearerr_unlocked": "The `clearerr_unlocked` function clears any error flags for a file pointer `fp`.\n",
    "_IO_feof": "The `_IO_feof` function checks if the end of file has been reached for a given file pointer, and returns `true` if it has. It first checks if the file is locked and if not, it locks it, checks the end of file status, and then unlocks the file.\n",
    "_IO_ferror": "The function `_IO_ferror` checks for errors in a file stream, acquires a lock on the file if necessary, checks for errors again, and returns the result of the second check.\n",
    "_IO_file_doallocate": "The `_IO_file_doallocate` function allocates a buffer for a file descriptor, possibly using a tty device, and sets up the buffer for reading or writing. It returns 1 if the allocation was successful, or EOF if there was an error.\n",
    "_IO_file_open": "The `_IO_file_open` function opens a file in a specific mode, returning a file pointer if successful. The function first tries to open the file with the `open` system call, and if that fails, it falls back to the `open_nocancel` system call with the appropriate flags set.\n",
    "_IO_file_read": "The function `_IO_file_read` reads data from a file descriptor `fp` into a buffer `buf` of size `size`, returning the number of bytes read or -1 on error. It uses the `__read_nocancel` function if the file is not cancelable, and the `__read` function otherwise.\n",
    "_IO_file_seek": "The function `_IO_file_seek` seeks to a specific position in a file specified by the `offset` parameter, and returns the result of the seek operation as an integer.\n",
    "_IO_file_stat": "The function `_IO_file_stat` retrieves the file status information for a given file pointer `fp` and stores it in the user-provided buffer `st`.\n",
    "_IO_file_close": "The ` _IO_file_close` function closes a file descriptor, but avoids cancelling the close operation if possible to prevent leaving an unrecoverable state behind.\n",
    "fputc": "The function fputc(int c, FILE *fp) writes the character c to the file associated with the stream fp, acquiring and releasing a lock on the file if necessary to ensure thread safety.\n",
    "fputc_unlocked": "fputc_unlocked() writes a single character to a file, checking for errors and ensuring that the file pointer is not at the end of the file.\n",
    "fputwc": "The `fputwc` function writes a wide character (`wchar_t`) to a file, acquiring and releasing a lock on the file pointer to ensure thread safety.\n",
    "fputwc_unlocked": "The function `fputwc_unlocked` writes a wide character `wc` to a file pointer `fp`, checking for errors and returning the number of characters written or `-1` if an error occurs.\n",
    "freopen": "The `freopen` function opens a file and associates it with the stream `fp`, overwriting any existing file association. It returns a new file pointer or `NULL` if an error occurs.\n",
    "freopen64": "The `freopen64` function opens a file in a new file descriptor, preserving the original file descriptor and file pointer. It first flushes the stream and then attempts to open the file in a new file descriptor, returning the new file descriptor if successful or the original file descriptor if not.\n",
    "fseek": "The `fseek` function seeks to a specific position in a file specified by `offset` and `whence`, and returns the result of the seek operation.\n",
    "__fseeko64": "The `fseeko64` function seeks to a position in a file specified by `offset` and `whence`, returning the result of the seek operation.\n",
    "__ftello64": "The `ftello64` function returns the current position of a file pointer in bytes, taking into account the file's backup position and the current seek direction. It checks the file pointer's validity, acquires a lock on the file, seeks to the current position, and returns the position or sets an error if there is an error.\n",
    "fwide": "The function fwide() normalizes the value of the input mode, returns the current orientation of the stream if the mode is 0 or the stream's orientation has already been determined, and performs the actual orientation change if the mode is non-zero.\n",
    "_IO_un_link": "The function `_IO_un_link` unlinks a file pointer from the global list of open files, removing it from the list and breaking any links to it. It also clears the `_IO_LINKED` flag for the file pointer and, if it was the last reference to the file, frees any associated memory.\n",
    "_IO_link_in": "The function `_IO_link_in` sets the `_IO_LINKED` flag for a file pointer `fp` and links it to the list of all open files, if it is not already linked.\n",
    "_IO_switch_to_get_mode": "The function `_IO_switch_to_get_mode` switches the input/output mode of a file pointer `fp` from write to read, and updates the read and write pointers to the appropriate positions. It returns 0 if successful, or EOF if there was an error.\n",
    "_IO_free_backup_area": "The function `_IO_free_backup_area` frees the backup area associated with a file pointer `fp` and switches back to the main get area if necessary.\n",
    "__overflow": "The `overflow` function checks if the input stream is in single-byte mode and if so, switches to wide mode before returning the overflow status of the next character.\n",
    "__underflow": "The `underflow` function checks if there are any more input bytes available in the current file position, and if not, returns `EOF`.\n",
    "__uflow": "The function `uflow` checks if the input stream `fp` is in a valid state, and if so, it returns the next character from the stream. If the stream is not in a valid state or if there are no more characters to be read, the function returns `EOF`.\n",
    "_IO_setb": "The `_IO_setb` function sets the buffer for a `FILE` pointer to a new location, optionally freeing the previous buffer and setting a flag to indicate whether the buffer is user-provided or not.\n",
    "_IO_doallocbuf": "The `_IO_doallocbuf` function checks if the input/output buffer for a `FILE` pointer `fp` needs to be allocated or reallocated, and if so, it allocates a new buffer and sets it up for use.\n",
    "_IO_default_uflow": "The function `_IO_default_uflow` reads a single character from a file stream `fp` and returns it as an unsigned char. If there is no more data available in the stream, it returns `EOF`.\n",
    "_IO_default_xsputn": "The function `_IO_default_xsputn` takes a file pointer, a block of data, and a size_t value representing the number of bytes to write, and it writes the data to the file in chunks, handling buffer overflow and underflow, and returning the number of bytes written.\n",
    "_IO_sgetn": "The function `_IO_sgetn` reads up to `n` bytes from the file pointed to by `fp` and stores them in the buffer pointed to by `data`. It returns the number of bytes read, or a negative value on error.\n",
    "_IO_default_xsgetn": "The function `_IO_default_xsgetn` reads data from a file pointer `fp` and stores it in a buffer `data` of size `n`. It iterates until there is no more data available or an underflow occurs, and returns the number of bytes read.\n",
    "_IO_default_doallocate": "The function `_IO_default_doallocate` allocates a buffer of size `BUFSIZ` and sets it as the current buffer for a file pointer `fp`, returning 1 if successful or EOF if memory allocation fails.\n",
    "_IO_init": "The function `_IO_init` initializes the input/output stream `fp` with the specified `flags` and sets up the internal state for reading or writing, including enabling the use of foreign vtables if necessary.\n",
    "_IO_enable_locks": "The `_IO_enable_locks()` function enables locking for all open streams, marking them as needing locks and setting the `_IO_FLAGS2_NEED_LOCK` flag.\n",
    "_IO_default_finish": "The `_IO_default_finish` function frees any memory allocated by the input/output stream and unlinks it from the list of open files. It also clears the stream's buffer and markers, and releases any locks associated with the stream.\n",
    "_IO_sputbackc": "The function `_IO_sputbackc` puts a character back into the input buffer of a `FILE` pointer, either by successfully reading it back in or by failing and returning `EOF`.\n",
    "_IO_sungetc": "The function `_IO_sungetc` reads the next character from a file pointer and returns it, or returns EOF if there are no more characters to read.\n",
    "_IO_adjust_column": "The function `_IO_adjust_column` takes an unsigned start position, a line of text, and an integer count, and it returns the start position of the next line, or the end position of the current line if there is no newline character.\n",
    "_IO_flush_all": "The `_IO_flush_all()` function flushes all pending data to the underlying stream, and returns the result of the flush operation.\n",
    "_IO_flush_all_linebuffered": "The function `_IO_flush_all_linebuffered` flushes all line-buffered files in the list of open files, by locking each file and checking if it has any pending writes or overflows. If a file has pending writes or overflows, the function writes the contents of the file to the underlying stream and resets the file's line buffering state.\n",
    "_IO_init_marker": "The function `_IO_init_marker` initializes a marker structure for a file pointer, setting the marker's buffer to the file pointer and tracking the current position in the file.\n",
    "_IO_remove_marker": "The `_IO_remove_marker` function unlinks a marker from a stream buffer's marker chain.\n",
    "_IO_marker_difference": "The function `_IO_marker_difference` computes the difference between the positions of two `struct _IO_marker` pointers, returning the difference as a signed integer.\n",
    "_IO_marker_delta": "The `_IO_marker_delta` function returns the difference between the current position of a stream and the position of the next character to be read, taking into account the stream's buffering and backup state. It calculates the position of the next character to be read by subtracting the current position of the stream's read pointer from the position of the read pointer in the buffer or the base of the buffer, depending on the buffering state.\n",
    "_IO_seekmark": "The function `_IO_seekmark` seeks to a specific position in a file based on a marker, switching between the main and backup areas as needed.\n",
    "_IO_unsave_markers": "The function `_IO_unsave_markers` clears the marker stack and frees any backup area for a given file pointer `fp`.\n",
    "_IO_default_pbackfail": "The function `_IO_default_pbackfail` handles backup and restore of the input stream when a read operation encounters an EOF or a read error, by switching to a backup area and restoring the original read pointer.\n",
    "_IO_iter_begin": "The function `_IO_iter_begin` returns an iterator that points to the beginning of a list of all open files.\n",
    "_IO_iter_end": "The function `_IO_iter_end` returns `NULL` to indicate the end of an iteration.\n",
    "_IO_iter_next": "The function `_IO_iter_next` returns the next element in an input iteration, by providing the current element's chain.\n",
    "_IO_iter_file": "The function `_IO_iter_file` takes an iterator `iter` as input and returns the same iterator, allowing the user to iterate over the contents of a file.\n",
    "_IO_list_lock": "The function `_IO_list_lock` locks the `list_all_lock` mutex, which is used to protect the internal data structures of the input/output (I/O) library.\n",
    "_IO_list_unlock": "The `_IO_list_unlock()` function unlocks the list lock for all locks in the list.\n",
    "_IO_list_resetlock": "The `_IO_list_resetlock` function initializes the lock for the list of all files.\n",
    "_IO_getc": "The `_IO_getc` function reads a single character from a file pointed to by the `fp` parameter, and returns the character. If the file is not locked, the function reads the character unlocked; otherwise, it acquires the lock before reading the character and releases it afterward.\n",
    "getchar": "The `getchar()` function reads a single character from the standard input stream and returns it, acquiring and releasing a lock on the stream as necessary to ensure thread safety.\n",
    "getchar_unlocked": "The `getchar_unlocked()` function returns the next character from the standard input stream `stdin` without blocking, using the `_IO_getc_unlocked()` function.\n",
    "getwchar": "The `getwchar()` function acquires a lock on the standard input stream, reads a wide character from it using ` _IO_getwc_unlocked()`, and returns the result.\n",
    "getwchar_unlocked": "The `getwchar_unlocked()` function returns the next wide character from the standard input stream, without blocking or waiting for input.\n",
    "_IO_fflush": "The function `_IO_fflush` flushes the contents of a file pointer `fp` to disk, returning the number of bytes written or `EOF` if an error occurs.\n",
    "_IO_fgets": "The `_IO_fgets` function reads a line from a file into a buffer, handling irregular cases and errors. It returns a pointer to the buffer if the read was successful, or `NULL` if there was an error.\n",
    "fgetws": "The function fgetws reads a line from a file into a buffer of width n, handling irregularities and errors, and returns the buffer if successful or NULL if an error occurs.\n",
    "fgetws_unlocked": "The function fgetws_unlocked reads a line from a file into a buffer, handling non-blocking mode and reporting errors, and returns a null-terminated string if successful.\n",
    "_IO_fputs": "The function `_IO_fputs` writes a string to a file, acquires a lock on the file, checks if the file is already open in write mode, and returns 1 if the string is written successfully or 0 if there is an error.\n",
    "fputws": "The function fputws writes a wide string to a file, and returns 1 if the operation is successful, and 0 if an error occurs.\n",
    "fputws_unlocked": "The `fputws_unlocked` function writes a wide string to a file, using the `fputws` function if possible, and falls back to `fputc` if `fputws` is not supported. It returns 1 if the operation is successful, and 0 if an error occurs.\n",
    "_IO_fread": "The function _IO_fread reads up to count * size bytes from the file pointed to by fp into the buffer buf, returning the number of bytes read or the number of bytes requested if there is an error.\n",
    "_IO_ftell": "The function `_IO_ftell` returns the current position of a file pointer in bytes, taking into account the file's backup position and the stream's mode. It checks for errors and sets `errno` appropriately if there is an issue.\n",
    "_IO_fwrite": "The function `_IO_fwrite` writes the contents of a buffer to a file, handling buffered I/O and returning the number of bytes written or the number of bytes that would have been written if EOF is encountered.\n",
    "fwrite_unlocked": "The `fwrite_unlocked` function writes up to `count` bytes from the buffer `buf` to the file pointed to by `fp`, returning the number of bytes written.\n",
    "__getdelim": "The `__getdelim` function reads a line from a file pointer `fp` until a delimiter is encountered, stores the line in the memory pointed to by `lineptr`, and returns the length of the line.\n",
    "_IO_getline": "The `_IO_getline` function reads a line from a file and stores it in a buffer, optionally extracting the delimiter from the line.\n",
    "_IO_getline_info": "The `_IO_getline_info` function reads a line from a file and returns a pointer to the end of the line. It also returns the number of characters read and sets an error indicator if an error occurs.\n",
    "_IO_gets": "The `_IO_gets` function reads a line from the standard input stream and stores it in the provided buffer. It returns the address of the buffer if successful, or `NULL` if an error occurs (such as reaching the end of the stream or encountering a newline character).\n",
    "_IO_padn": "The function `_IO_padn` pads a file with a specified character (space, zero, or the specified character) to a given size, writing the padding to the file and returning the number of bytes written. It uses a buffer to store the padding character and loops to write the buffer to the file in chunks, returning the number of bytes written.\n",
    "_IO_puts": "The function _IO_puts writes the given string to the standard output, and returns the number of characters written.\n",
    "_IO_seekoff": "The function `_IO_seekoff` seeks to a specified offset from the current position of a file pointer, optionally changing the file pointer's position and returning the new position.\n",
    "_IO_seekpos": "The function `_IO_seekpos` seeks to a position `pos` in a file pointed to by `fp`, with the specified `mode`, and returns the new position.\n",
    "_IO_setbuffer": "The `_IO_setbuffer` function sets the buffer for a file pointer `fp` to the given `buf` with the specified `size`. It checks the file pointer and sets the buffer using the appropriate wide char function if necessary.\n",
    "_IO_setvbuf": "The `_IO_setvbuf` function sets the buffering mode for a file pointer `fp` to either fully buffered, line buffered, or unbuffered, depending on the value of the `mode` parameter. It also allocates a buffer if necessary and returns 0 on success or EOF on failure.\n",
    "ungetc": "The `ungetc` function takes an integer `c` and a `FILE *` pointer `fp`, checks if `c` is EOF and if the input stream is locked, and if not, puts the character back into the input stream.\n",
    "ungetwc": "The `ungetwc` function puts back a wide character (wint_t) from the input buffer of a file pointer (FILE *) to the file, returning the result of the operation.\n",
    "_IO_peekc_locked": "The function `_IO_peekc_locked` peeks at the next character in a file without changing the file position, and it acquires and releases a lock on the file to ensure thread-safety. It returns the peeked character, or EOF if the end of the file is reached.\n",
    "_IO_putc": "The function `_IO_putc` writes a single character to a file stream, checking for errors and acquiring/releasing a lock to ensure thread safety. It first checks if the file pointer is valid and if the character can be written without a lock, and if so, it writes the character and returns the result.\n",
    "putchar": "The `putchar` function writes a single character to the standard output stream, acquiring and releasing a lock on the stream to ensure thread safety. It takes an integer parameter representing the character to be written and returns an integer indicating the result of the write operation.\n",
    "putchar_unlocked": "The `putchar_unlocked` function writes a single character to the standard output stream, checking for errors and using an unlocked version of the `putc` function to ensure thread-safety. It takes an integer parameter representing the character to be written.\n",
    "putwc": "The `putwc` function writes a wide character (wchar_t) to a file pointer, checking for errors and acquiring and releasing a lock on the file. It returns the number of characters written (wint_t).\n",
    "putwc_unlocked": "The `putwc_unlocked` function writes a wide character (`wchar_t`) to a file, checking for errors and returning the result of the operation.\n",
    "putwchar": "The `putwchar` function writes a wide character (wchar_t) to the standard output stream, acquiring and releasing a lock on the stream to ensure thread safety. It returns the number of bytes written, or -1 if an error occurs.\n",
    "putwchar_unlocked": "The `putwchar_unlocked` function writes a wide character (wchar_t) to the standard output stream, checking for errors and using an unlocked version of the `_IO_putwc` function to perform the actual writing.\n",
    "rewind": "The `rewind` function rewinds a file pointer to the beginning of the file, acquiring and releasing a lock on the file to ensure thread safety.\n",
    "setbuf": "The `setbuf` function sets the buffer for a file pointer `fp` to the specified buffer `buf` with a size of `BUFSIZ`.\n",
    "setlinebuf": "The `setlinebuf` function sets the buffering mode for a file stream to unbuffered, which means that data is written to the file immediately without any buffering.\n",
    "_IO_str_init_static": "The function `_IO_str_init_static` initializes a static string buffer with the given size and starting point, and returns the initialized buffer.\n",
    "_IO_str_init_readonly": "The function `_IO_str_init_readonly` initializes a string file pointer with a read-only buffer, taking in a pointer to a string, the size of the string, and a flag indicating whether the buffer should be initialized with a null terminator. The function sets the buffer to read-only and initializes the string file pointer with the provided data.\n",
    "_IO_str_overflow": "The `_IO_str_overflow` function handles buffer overflows for streams, ensuring that writes do not exceed the buffer size and allocating a new buffer if necessary. It returns the number of bytes written or 0 if the write was suppressed due to buffer overflow.\n",
    "_IO_str_underflow": "The `_IO_str_underflow` function checks if there are any more characters to read from a stream and returns the next character if available, or EOF if there are no more characters. It also updates the read and write pointers of the stream and sets the `EOF` flag if there are no more characters to read.\n",
    "_IO_str_seekoff": "The `_IO_str_seekoff` function seeks to a position in a stream, optionally moving the read or write pointer, and returns the new position. It takes a `FILE *` pointer, an `off64_t` value representing the position to seek to, an `int` value indicating the direction of the seek (one of `_IO_seek_set`, `_IO_seek_cur`, or `_IO_seek_end`), and an `int` value indicating the mode of the seek (one of `_IOS_INPUT`, `_IOS_OUTPUT`, or both).\n",
    "_IO_str_pbackfail": "The function `_IO_str_pbackfail` checks if the stream is in non-writing mode and if the input character is not EOF, and if so, it returns EOF; otherwise, it calls the `_IO_default_pbackfail` function to perform the actual backspace operation.\n",
    "_IO_wdo_write": "The `_IO_wdo_write` function writes a sequence of wide characters to a stream, using a code conversion facility to convert the characters from the stream's internal format to the external buffer. It returns the number of characters written, or WEOF if an error occurs.\n",
    "_IO_wfile_underflow": "The function _IO_wfile_underflow(FILE *) checks for end-of-file, updates the file position and read pointer, and performs conversion of the next character using the specified codecvt function, returning the character if successful or WEOF if at end-of-file.\n",
    "_IO_wfile_overflow": "The function _IO_wfile_overflow(FILE *f, wint_t wch) checks if the buffer is full and if so, allocates a new buffer and writes the next character to it, returning the character written.\n",
    "_IO_wfile_sync": "The `_IO_wfile_sync` function synchronizes the input/output positions of a wide file pointer with the underlying file, ensuring that any changes made to the file's contents are reflected in the pointer's position. It returns `WEOF` if an error occurs, or the previous value of the pointer's position if no error is detected.\n",
    "_IO_wfile_seekoff": "The function seeks to a position in a file, taking into account the current buffer position and adjusting the buffer as needed, and returns the new file position or EOF if the seek fails.\n",
    "_IO_wfile_xsputn": "The `_IO_wfile_xsputn` function writes a block of data to a file, optimizing the write by using direct system calls if possible. It figures out how much space is available in the buffer, fills the buffer, and then writes any remaining data directly to the file using `sys_write`.\n",
    "_IO_least_wmarker": "The function `_IO_least_wmarker` returns the position of the least-recently-read marker in a stream, based on the current position of the stream and the position of all previously read markers.\n",
    "_IO_switch_to_main_wget_area": "The function `_IO_switch_to_main_wget_area` switches the input/output areas of a file pointer to the main area, swapping the read and save ends and bases, and sets the read pointer to the new read base.\n",
    "_IO_switch_to_wbackup_area": "The function `_IO_switch_to_wbackup_area` sets the input/output pointers and flags for a stream to use the backup area instead of the normal input/output area. It swaps the read and save pointers and bases, and sets the read pointer to the end of the backup area.\n",
    "_IO_wsetb": "The function `_IO_wsetb` sets the wide buffer base and end pointer for a file stream, optionally freeing the previous buffer and setting a flag to indicate whether the buffer is user-provided.\n",
    "_IO_wdefault_pbackfail": "The `_IO_wdefault_pbackfail` function is a callback function used by the `fgetwc` function to handle errors when reading from a stream in wide character mode. It checks if the stream is in backup mode and if the character read is the same as the previous character, and if so, it decrements the read pointer and returns the character.\n",
    "_IO_wdefault_finish": "The function `_IO_wdefault_finish` frees memory and unlinks the file pointer from any lists it may be on when the file is closed. It also clears the file pointer's buffers and markers, and releases any locks it may hold.\n",
    "_IO_wdefault_uflow": "The function `_IO_wdefault_uflow` reads a wide character from a stream and returns it, or returns WEOF if an underflow occurs.\n",
    "__woverflow": "The `woverflow` function checks if the input file is in binary mode and if so, it calls the `_IO_fwide` function to set the file's width and then returns the result of the `_IO_OVERFLOW` function, which checks for overflow when writing a wide character to the file.\n",
    "__wuflow": "The function `__wuflow` checks the input stream `fp` for validity and returns the next character or `WEOF` if there is an error. It first checks if the stream is in binary or text mode, and if it's in text mode, it switches to wide mode and reads the next character from the stream.\n",
    "__wunderflow": "The function `wunderflow` checks if the input file is in a valid state and returns the next character from the file if possible, or `WEOF` if an error occurs. It switches between different modes to handle wide character input and backup areas, and returns `UNDERFLOW` if no more characters can be read.\n",
    "_IO_wdefault_xsputn": "The function `_IO_wdefault_xsputn` takes a `FILE*` object, a block of constant memory, and a size_t value as inputs, and it writes the contents of the block to the `FILE` object, using the `wchar_t` type for the memory block. The function returns the number of characters written, or 0 if an overflow occurs.\n",
    "_IO_wdefault_xsgetn": "The `_IO_wdefault_xsgetn` function reads up to `n` bytes of data from a wide-character input stream and stores them in a user-provided buffer. It returns the number of bytes actually read, which may be less than `n` if the stream is exhausted or an error occurs.\n",
    "_IO_wdoallocbuf": "The `_IO_wdoallocbuf` function checks if the input file has any buffered data and if it does not need to allocate a new buffer. If a new buffer is needed, it allocates one and sets the buffer pointer for the file.\n",
    "_IO_wdefault_doallocate": "The function `_IO_wdefault_doallocate` allocates a buffer for a stream and sets the stream's buffer to the allocated buffer, returning 1 if successful or EOF if memory allocation fails.\n",
    "_IO_switch_to_wget_mode": "The function `_IO_switch_to_wget_mode` switches the input/output mode of a file pointer `fp` to use the wide character input/output functions, and updates the file pointer positions and flags accordingly. It returns 0 if successful, or EOF if an error occurs.\n",
    "_IO_free_wbackup_area": "The function `_IO_free_wbackup_area` frees the backup area of a file pointer and switches back to the main area if necessary.\n",
    "_IO_sputbackwc": "The function `_IO_sputbackwc` puts a wide character back into the input buffer of a stream, either by successfully putting it back at the previous position or signaling an error if the character is not present in the buffer.\n",
    "_IO_sungetwc": "The function `_IO_sungetwc` ungetc's a wide character from a stream, returning the character or `WEOF` if the stream reaches the end of file.\n",
    "_IO_adjust_wcolumn": "The function `_IO_adjust_wcolumn` adjusts the width of a column of text by counting the number of characters in the column, including any newline characters, and returning the starting position of the column.\n",
    "_IO_init_wmarker": "The function `_IO_init_wmarker` initializes a marker for a file pointer `fp`, which keeps track of the current position in the file and allows for restarting input from the last read position.\n",
    "_IO_wmarker_delta": "The function `_IO_wmarker_delta` calculates the delta between the current position of a marker and the position of the read/write pointer in the underlying buffer.\n",
    "_IO_seekwmark": "The `_IO_seekwmark` function seeks to a marker position in a file, either forward or backward, depending on the value of `delta`, and returns 0 if successful.\n",
    "_IO_unsave_wmarkers": "The function `_IO_unsave_wmarkers` clears the saved markers and backup area for a file pointer `fp`. It sets the file pointer's markers to zero and frees the backup area if one exists.\n",
    "open_wmemstream": "The `open_wmemstream` function creates a new wide-character stream and returns a pointer to its `FILE` structure. It allocates memory for the stream's buffer and initializes it with the specified buffer size and allocation functions.\n",
    "__ctype_get_mb_cur_max": "The `ctype_get_mb_cur_max()` function returns an array of size_t values representing the maximum number of bytes that can be stored in a multibyte character, based on the current locale.\n",
    "__duplocale": "The function `__duplocale` creates a copy of a locale object, allocating memory for the copy and copying the contents of the original object. It returns the new locale object, which can be used for further operations.\n",
    "__freelocale": "The `freelocale` function frees the memory associated with a `locale_t` handle and updates the usage counts for the locales. It also removes any unused locales from the list of available locales.\n",
    "__newlocale": "The function takes a category mask and a locale name as input, and it modifies the current locale object to include the specified locale data, returning a new locale object if successful or NULL if not.\n",
    "nl_langinfo": "The `nl_langinfo` function returns a value corresponding to a specific language item, such as the language name or currency symbol, for the current locale.\n",
    "__nl_langinfo_l": "The `nl_langinfo_l` function returns the string value of a specific item in the current locale, based on its category and index. It checks for bogus inputs and returns an empty string if the input is invalid, and it also handles special cases for the `LC_LOCALE_NAME` category.\n",
    "setlocale": "The `setlocale' function sets the locale for the current process by loading and setting the appropriate data for the specified category, and returns a pointer to a composite locale name if the category is LC_ALL, or a pointer to a specific locale name if the category is not LC_ALL.\n",
    "__uselocale": "The `uselocale` function sets the current locale for the thread to the specified `locale_t` object, and updates the thread-local variables for certain categories of locale data. It returns the previous current locale, or `LC_GLOBAL_LOCALE` if the new locale is the global one.\n",
    "endutxent": "The `endutxent` function ends the current utent session.\n",
    "getlogin": "The `getlogin` function retrieves the login name of the current user, either from the `name` argument or from the file `/etc/utmp` if `name` is null. It returns the login name if successful, or `NULL` if no login name could be found.\n",
    "__getlogin_r_chk": "The `__getlogin_r_chk` function retrieves the login name of the current user, with a maximum length of `nreal`, and checks that the input buffer is not too small before calling `getlogin_r`.\n",
    "getutmp": "The `getutmp` function copies the contents of a `struct utmpx` object into a `struct utmp` object, asserting that the sizes of the two structures are the same.\n",
    "getutmpx": "The `getutmpx` function copies the contents of the `utmp` structure to the `utmpx` structure, setting all members of `utmpx` to the corresponding values from `utmp`. It also sets `utmpx->ut_type`, `utmpx->ut_pid`, and `utmpx->ut_tv` to the values of `utmp`.\n",
    "getutxent": "The `getutxent` function returns a pointer to a `struct utmpx` structure containing information about the current user and the system.\n",
    "getutxid": "The `getutxid` function retrieves the utid of the specified `struct utmpx *id` pointer. It does this by calling the internal `__getutid` function and casting the result to a `struct utmpx *` pointer.\n",
    "getutxline": "The `getutxline` function retrieves the utxline associated with a given utmpx structure.\n",
    "__ptsname_r_chk": "The function `__ptsname_r_chk` checks if the buffer length is greater than the number of real bytes available and if so, it fails with an error, otherwise it calls the `__ptsname_r` function to read the contents of the file descriptor `fd` into the buffer `buf` with length `buflen`.\n",
    "pututxline": "The `pututxline` function puts a utmpx structure into the utmp file.\n",
    "setlogin": "The `setlogin` function sets the login name of a process, and returns 0 if successful or an error code if there is an issue.\n",
    "setutxent": "The `setutxent` function sets the utent (user ID and group ID) of the current process.\n",
    "updwtmpx": "The `updwtmpx` function updates the utmpx file with the given contents.\n",
    "utmpxname": "The `utmpxname` function returns the name of the user who last accessed a file, as recorded in the utmpx system file.\n",
    "__libc_alloc_buffer_alloc_array": "The `libc_alloc_buffer_alloc_array` function allocates an array of elements of size `element_size` in a buffer of size `count` and returns a pointer to the start of the allocated area. It checks for overflow and ensures that the allocation fits within the buffer boundaries.\n",
    "__libc_alloc_buffer_allocate": "The `libc_alloc_buffer_allocate` function allocates memory for a buffer using `malloc`, and returns an `alloc_buffer` structure containing pointers to the start and end of the allocated buffer if the allocation was successful, or an invalid pointer if the allocation failed.\n",
    "__libc_alloc_buffer_copy_bytes": "The `libc_alloc_buffer_copy_bytes` function allocates memory for a buffer, copies a given number of bytes from a source pointer to the allocated buffer, and returns the allocated buffer.\n",
    "__libc_alloc_buffer_copy_string": "The function `__libc_alloc_buffer_copy_string` allocates a buffer and copies a string to it, returning the allocated buffer.\n",
    "__libc_alloc_buffer_create_failure": "The function `__libc_alloc_buffer_create_failure` prints a fatal error message to stderr and exits the program when the allocation of a buffer of a given size fails.\n",
    "__libc_dynarray_at_failure": "The function `__libc_dynarray_at_failure` checks if an array index is not less than the array length, and if it is not, it prints a fatal error message and aborts the program.\n",
    "__libc_dynarray_emplace_enlarge": "The function `libc_dynarray_emplace_enlarge` increases the size of a dynamically-sized array by a factor of two, using an exponential growth policy, and returns `true` if successful, or `false` if there is not enough memory.\n",
    "__libc_dynarray_finalize": "The function `libc_dynarray_finalize` frees the memory used by a dynamic array, optionally taking ownership of the elements and returning a new array or indicating that the caller should free the memory.\n",
    "__libc_dynarray_resize": "The function `libc_dynarray_resize` resizes a dynamically allocated array of a given size, using the provided `scratch` memory area for the new allocation. It returns `true` if the resize is successful, and `false` otherwise.\n",
    "__libc_dynarray_resize_clear": "The function `libc_dynarray_resize_clear` resizes a dynamically allocated array, clearing the existing elements and returning `true` if the resize is successful.\n",
    "malloc_usable_size": "The `malloc_usable_size` function returns the size of the memory block pointed to by the `void*` argument, taking into account any debugging information and adjusting for the size of the memory block itself.\n",
    "malloc_info": "The `malloc_info` function takes an integer `options` and a `FILE*` pointer as input, and returns information about the memory allocation state of the program, if the program is running in debug mode or if the `malloc` function has been hooked.\n",
    "mallopt": "The function `mallopt` takes two integer parameters `param_number` and `value`, and it sets a parameter of the memory allocation library `libc` to the specified value, if the parameter is supported by the current version of the library.\n",
    "malloc_stats": "The `malloc_stats()` function returns information about the current state of the memory allocation system, including the number of allocated and freed blocks, the maximum and minimum block sizes, and the total amount of memory allocated.\n",
    "mallinfo2": "The function `mallinfo2` returns information about the current memory allocation state of the program, including the total amount of memory allocated, the total amount of memory currently in use, and the maximum amount of memory ever allocated. It first checks if memory debugging is enabled, and if so, it calls the `__libc_mallinfo2` function to retrieve the information; otherwise, it loads the `mallinfo2` symbol and calls it to retrieve the information.\n",
    "mallinfo": "The `mallinfo` function returns information about the current memory allocation state, including the total amount of memory allocated, the total amount of memory available, and the maximum amount of memory that can be allocated.\n",
    "malloc_trim": "The `malloc_trim` function trims the memory allocated by `malloc` to remove any unused or incomplete blocks, returning the number of bytes freed.\n",
    "__libc_malloc": "The `libc_malloc` function allocates memory from the heap, using a combination of a fixed-size arena and a variable-size cache. It first tries to find a usable arena, and if that fails, it retries with another arena.\n",
    "__libc_free": "The `libc_free` function frees a block of memory allocated by the `malloc` function. It checks for double-free and releases mmapped memory before marking the chunk as belonging to the library and freeing it.\n",
    "__libc_realloc": "The `libc_realloc` function reallocates memory for a block of size `bytes` from a block of size `oldsize` previously allocated with `malloc`. It returns a pointer to the new block or `NULL` if the allocation fails.\n",
    "__libc_memalign": "The `libc_memalign` function aligns a block of memory of a specified size with a given alignment and returns a pointer to the aligned memory.\n",
    "aligned_alloc": "The `weak_function aligned_alloc(size_t alignment, size_t bytes)` function allocates memory that is aligned to the specified `alignment` value, returning a pointer to the allocated memory if the alignment is a non-negative power of two and the allocation is successful, or returning zero and setting `errno` to `EINVAL` if the alignment is not supported or the allocation fails.\n",
    "__libc_valloc": "The `libc_valloc` function allocates memory for a specified size using a combination of the `ptmalloc_init` function and the `_mid_memalign` function, and returns a pointer to the allocated memory.\n",
    "__libc_pvalloc": "The `libc_pvalloc` function allocates memory for a given size, using the `ptmalloc` allocator and aligning the allocation to the page size of the system, with an overflow check and error handling if the allocation fails.\n",
    "__libc_calloc": "The function `libc_calloc` allocates memory for a block of size `sz` and clears it with zeroes if `MORECORE_CLEARS` is set and the allocation was successful.\n",
    "__libc_mallinfo": "The `__libc_mallinfo` function returns a `struct mallinfo` containing information about the memory allocation state of the program, including the total amount of memory allocated, the number of blocks of various sizes, and the cost of each block.\n",
    "__libc_mallopt": "This function sets various parameters related to memory allocation and deallocation, such as the maximum size of the memory pool, the threshold for trimming the pool, and the amount of padding to use for mmapped memory. It takes an integer parameter specifying which parameter to set and an integer value for the new setting, and returns 1 if the setting is successful or 0 if it fails.\n",
    "mcheck_check_all": "The `mcheck_check_all()` function checks all memory pointers for errors using the `mcheck_checkptr()` function.\n",
    "mcheck": "The `mcheck` function initializes the memory error checking mechanism, either by returning -1 if the function is being called from within the Linux libc, or by calling the `__mcheck_initialize` function to enable memory error checking for a given function pointer.\n",
    "mcheck_pedantic": "The `mcheck_pedantic` function initializes the memory error checking mechanism for the current process, passing the provided function as a callback to be called when a memory error is detected.\n",
    "mprobe": "The function `mprobe` checks if a given pointer is valid or not, returning `MCHECK_DISABLED` if it is inside the Linux libc library, and the result of `__mcheck_checkptr` otherwise.\n",
    "mmap": "The `mmap` function allocates memory from the system and returns a pointer to the allocated memory. It tracks various statistics related to memory allocation and deallocation, including the number of calls, total memory consumption, and memory usage patterns.\n",
    "mmap64": "The `mmap64` function maps a file or device into memory, with the specified protection and flags. It returns a pointer to the mapped memory, or `NULL` on failure.\n",
    "mremap": "The `mremap` function remaps a portion of memory, optionally increasing or decreasing its size. It returns a pointer to the newly mapped memory, or `NULL` on failure.\n",
    "munmap": "The `munmap` function unmaps a memory region specified by the `start` and `len` parameters. It returns 0 on success or -1 on failure, and keeps track of the number of calls, total memory freed, and failed calls using atomic variables.\n",
    "tr_break": "The `tr_break()` function does nothing and returns immediately.\n",
    "mtrace": "The `mtrace` function enables or disables the printing of trace messages to the standard error stream, depending on the value of the `IS_IN` macro.\n",
    "muntrace": "The `muntrace` function performs the `do_muntrace` function if the current process is not in the libc.\n",
    "_obstack_begin": "The `obstack_begin` function initializes a new `obstack` structure and sets up a new memory block for allocating objects. It sets the size and alignment of the block, and provides functions for freeing the memory when it is no longer needed.\n",
    "_obstack_begin_1": "The function `_obstack_begin_1` initializes a new memory block for an object stack, specifying the size and alignment of the blocks to be allocated, as well as functions to be called when memory is allocated and deallocated. It returns 1 if successful, or calls a failure handler if memory allocation fails.\n",
    "_obstack_newchunk": "The function `_obstack_newchunk' allocates a new chunk of memory for an object stack, computing the size of the new chunk based on the current stack size and alignment requirements. It then copies the existing object from the old chunk to the new chunk, and updates the stack pointers to point to the new chunk.\n",
    "_obstack_allocated_p": "The function `_obstack_allocated_p` checks if an object is located within a specific chunk of memory allocated by an obstack. It scans the chain of chunks starting from the current chunk and returning true if the object is found, or false if it is not found.\n",
    "_obstack_memory_used": "The `obstack_memory_used()` function calculates the total number of bytes used by all the chunks in an `obstack` structure.\n",
    "__libc_reallocarray": "The `libc_reallocarray` function reallocates an array of elements, returning a new array with the specified number of elements and size. If the reallocation fails due to memory exhaustion, the function sets `errno` to `ENOMEM` and returns 0.\n",
    "__libc_scratch_buffer_grow": "The `libc_scratch_buffer_grow` function grows the size of a scratch buffer by multiplying its current length by 2, and returns a new buffer pointer if the growth is successful, or `NULL` if there is an overflow or memory allocation failure. The function discards the old buffer and installs a new heap-based buffer if the growth is successful.\n",
    "__libc_scratch_buffer_grow_preserve": "The `libc_scratch_buffer_grow_preserve` function grows the size of a scratch buffer on the heap, preserving its contents and returning `true` if successful, or `false` if there is not enough memory.\n",
    "__libc_scratch_buffer_set_array_size": "The `libc_scratch_buffer_set_array_size` function sets the size of a scratch buffer's array to a specified size, but only if the new size is not too large to fit in the current buffer, and it returns `true` if the operation is successful, or `false` if there is an overflow or memory allocation failure.\n",
    "__libc_freeres": "The function frees memory allocated by various system calls and functions, including those related to the C standard library, network programming, and threading.\n",
    "twalk": "The `twalk` function performs a recursive traversal of a tree, starting at the root node, and calls a user-provided action function for each node. The action function is passed the current node, the `VISIT` enumeration value, and an integer parameter, and can modify the tree by changing the `VISIT` value.\n",
    "fedisableexcept": "The `fedisableexcept` function disables all exceptions except for the specified `excepts` in both the x87 FPU and the SSE MXCSR register. It returns the previous value of the exceptions that were enabled.\n",
    "feenableexcept": "The `feenableexcept` function modifies the exception masks for the x87 FPU and SSE MXCSR register, allowing the user to enable or disable specific exceptions. The function takes an integer parameter `excepts` representing the exceptions to be enabled or disabled, and returns the old exception mask.\n",
    "fegetexcept": "The `fegetexcept()` function retrieves the current control word and returns a mask of all exceptions except those that are currently enabled.\n",
    "fegetmode": "The function `fegetmode` retrieves the current floating-point control word and stores it in a user-provided structure, and returns 0.\n",
    "fesetexcept": "The function sets the floating-point exception flags for the current process, allowing specific exceptions to be caught and handled.\n",
    "fesetmode": "The `fesetmode` function sets the floating-point exception mode by preserving the SSE exception flags and restoring other state in MXCSR, and returns 0.\n",
    "fetestexceptflag": "The `fetestexceptflag` function returns a bitwise AND of the exception flags stored in the `flagp` pointer and the `excepts` integer, where `excepts` is a mask of exception types.\n",
    "fetestexcept": "The function `fetestexcept` retrieves the current exceptions and returns a mask of the exceptions that are set, using the `fnstsw` and `stmxcsr` assembly instructions.\n",
    "matherr": "The `matherr` function takes a pointer to a `struct exception` object as input, prints a message to the console, sets a flag to 0, and returns 1.\n",
    "acct": "The function `acct` sets the error number to `ENOSYS` and returns -1.\n",
    "__libc_allocate_once_slow": "The `libc_allocate_once_slow` function allocates memory using a strong CAS loop with acquire-release MO semantics, and returns the allocated memory if successful. If the allocation fails due to a race condition, the function frees the allocated memory and returns the result of a subsequent acquire MO load.\n",
    "chflags": "The `chflags` function sets file flags for a file specified by its name. It looks up the file name in the file system, sets the specified flags, and then deallocates the file port.\n",
    "chroot": "The `chroot` function changes the current working directory of the process to the directory specified by the argument `path`. It does this by creating a new directory structure for the specified directory and then reparenting the current process to that directory.\n",
    "daemon": "This function creates a new process and makes it a daemon, which means it runs in the background and does not have a controlling terminal. It also closes all open file descriptors except for standard input, output, and error, and sets the current working directory to the root directory.\n",
    "dirname": "The `dirname` function takes a path as input and returns a pointer to a string that contains the directory name of the path, without the leading directory name. If the path is empty or does not contain a directory name, the function returns a pointer to a static constant string containing \".\".\n",
    "vwarn": "The `vwarn` function prints a warning message to the standard error stream using the specified format and arguments, but with a suppressed error message.\n",
    "vwarnx": "The `vwarnx` function formats a message using the specified `format` and prints it to the standard error stream, using the `va_list` `ap` to expand any format specifiers.\n",
    "warn": "The function `warn` takes a format string and optional arguments, and prints a warning message to the standard error stream using `va_list` notation.\n",
    "warnx": "The `warnx` function prints a message to the standard error stream using the `vasprintf` function, with the message format specified by the `format` parameter and any additional arguments passed as `...`.\n",
    "verr": "The function `verr` prints a warning message using `vwarn`, exits the program with the specified `status`, and takes a variable number of arguments using `__gnuc_va_list`.\n",
    "verrx": "The function `verrx` prints a warning message using `vwarnx` and then exits the program with the specified `status` value.\n",
    "err": "The `err` function prints an error message to the standard error stream using the `verr` function, passing in the status code, format string, and any additional arguments.\n",
    "errx": "The `errx` function prints an error message to the standard error stream using the `verrx` function and a format string and variables.\n",
    "error": "The `error` function takes a string message and optional arguments, and prints an error message to the console and sets a flag indicating that an error occurred.\n",
    "error_at_line": "The `error_at_line` function reports an error at a specific line number in a file, with a custom message and error number.\n",
    "fchflags": "The function `fchflags` changes file flags for a file descriptor `fd` based on the specified `flags` parameter, and returns 0 if successful or an error code if there is a failure.\n",
    "fdatasync": "The function `fdatasync(int fd)` cancels any pending asynchronous disk I/O operations for the file descriptor `fd`.\n",
    "fgetxattr": "The function `fgetxattr` retrieves the value of an extended attribute with the given name from a file descriptor `fd` and stores it in the provided buffer `value` of size `size`, returning the number of bytes stored or an error code if there is a problem.\n",
    "flistxattr": "The function `flistxattr` retrieves a list of extended attributes for a file descriptor `fd` and stores them in the provided buffer `list` of size `size`, returning the number of attributes stored or an error code if there is an issue.\n",
    "fremovexattr": "The function `fremovexattr` removes an extended attribute with the given name from a file descriptor `fd`, and returns an error value if the operation fails.\n",
    "fsetxattr": "The function `fsetxattr` sets an extended attribute on a file descriptor `fd` with name `name`, value `value`, and size `size`, and returns an error code if any.\n",
    "setfsent": "The `setfsent` function initializes the file system and returns a pointer to the `fstab_init` function, which is used to specify the file systems that should be mounted at boot time.\n",
    "getfsent": "The `getfsent` function initializes a `struct fstab_state` structure, fetches the next file system entry from the file system table, and returns the converted entry.\n",
    "getfsspec": "The `getfsspec` function retrieves information about a file system specified by name, using the `fstab` table, and returns the information in a structured format.\n",
    "getfsfile": "The function `getfsfile` takes a file system name as a string and returns a pointer to the mount point structure for that file system if it exists in the `fstab` file, or `NULL` if it does not exist.\n",
    "endfsent": "The `endfsent` function releases resources associated with the current file system, including closing any open file descriptors. It sets the file pointer to `NULL` to indicate that no file is currently open.\n",
    "fsync": "The `fsync` function synchronizes changes made to a file with the underlying storage devices, ensuring that all data is written to disk and acknowledged by the system.\n",
    "futimesat": "The `futimesat` function sets the file timestamps of a file descriptor `fd` to the values specified in the `tvp` array. If any argument is invalid, the function returns -1 with an error set to `EBADF` or `ENOSYS`.\n",
    "__getauxval": "The `__getauxval` function retrieves the value of a specific auxiliary vector entry, and returns the value if it exists, or 0 if it does not exist. If the entry does not exist, the function sets the `errno` variable to `ENOENT` before returning 0.\n",
    "getdomainname": "The `getdomainname` function retrieves the contents of the NIS domain name from the file `/etc/nisdomain` and returns the result in the provided buffer, with a length of up to `len` characters.\n",
    "gethostid": "The `gethostid` function returns a unique identifier for the host, based on its IP address. It first tries to read the ID from a former invocation of `sethostid`, and if that fails, it uses the host name to determine the IP address and returns a unique value based on that.\n",
    "getloadavg": "The `getloadavg` function returns an array of doubles representing the current system load, scaled by `SYSINFO_LOADS_SCALE`, and returns the number of elements in the array, or -1 on error.\n",
    "__getpagesize": "The `__getpagesize` function returns the current page size of the system, or 4096 if the `getpagesize` system call is not supported.\n",
    "getpass": "The `getpass` function reads a password from the user and returns the password as a null-terminated string. It tries to open the terminal and disable echoing, then prompts the user to enter a password and reads the password from the terminal.\n",
    "getusershell": "The `getusershell()` function returns the current user's shell, initializing it if necessary and returning a pointer to the shell string.\n",
    "endusershell": "The `endusershell` function frees the memory allocated for the `shells` and `strings` arrays and resets the `curshell` pointer to `NULL`.\n",
    "setusershell": "The `setusershell()` function sets the current shell to the one specified in the `initshells()` function, which initializes the shells for the current user.\n",
    "getxattr": "The `getxattr` function retrieves the value of a extended attribute with the given name from a file, and returns the size of the value or an error code if the attribute is not found or the file is not a regular file.\n",
    "gtty": "The `gtty` function takes an file descriptor and a `struct sgttyb` pointer as input, and returns the result of the `TIOCGETP` ioctl call, which sets or retrieves the terminal settings for the specified file descriptor.\n",
    "hsearch": "The function `hsearch` performs a search operation on an hash table using the given `item` and `action`, and returns the search result in the `result` pointer.\n",
    "hcreate": "The `hcreate` function creates a new hash table with the specified size (in bytes) and returns a pointer to the table.\n",
    "insque": "The function `insque` inserts a new element into a singly linked list, linking it to the previous element if it exists, or to the beginning of the list if it is the first element. The function updates the links between elements in the list to maintain the correct ordering.\n",
    "remque": "The function `remque` removes an element from a singly-linked list, updating the links between adjacent elements to maintain the list's structure.\n",
    "lgetxattr": "The function `lgetxattr` retrieves the value of a extended attribute with the given `name` from the file specified by `path`, stores the value in `value` with a maximum size of `size`, and returns the number of bytes stored or an error code if the attribute does not exist or the size is exceeded.\n",
    "listxattr": "The `listxattr` function retrieves a list of extended attributes associated with a file or directory, and stores the list in the `list` buffer provided. The function returns the number of attributes returned, or -1 on error.\n",
    "llistxattr": "The function `llistxattr` retrieves a list of extended attributes for a file and stores them in a buffer, returning the number of attributes found or an error code if an error occurs.\n",
    "lremovexattr": "The `lremovexattr` function removes an extended attribute with the given name from the file specified by the path.\n",
    "lsearch": "The `lsearch` function searches for a key in a list of elements, and if it is not found, it inserts the key at the end of the list.\n",
    "lfind": "The `lfind` function searches for the first occurrence of a given key in an array of elements, using a custom comparison function to determine the search result.\n",
    "lsetxattr": "The `lsetxattr` function sets an extended attribute of a file specified by `path` with the name `name`, value `value`, and size `size`, and returns the number of bytes written or -1 on error.\n",
    "__madvise": "The `madvise` function advises the system on how to handle a range of memory, but it always returns an error code of -1 and sets the `ENOSYS` error code.\n",
    "mincore": "The `mincore` function sets the errno variable to ENOSYS and returns -1, indicating that the function is not supported.\n",
    "mkdtemp": "The `mkdtemp` function creates a temporary directory based on a given template string, and returns the path to the newly created directory. If the creation fails, the function returns `NULL`.\n",
    "mkostemp": "The `mkostemp` function generates a temporary file name based on a given template string and returns a file descriptor for the created file.\n",
    "mkostemp64": "The `mkostemp64` function generates a temporary file name using the specified template string and returns a file descriptor for the created file.\n",
    "mkostemps": "The function `mkostemps` generates a temporary file name based on a given template string and returns the file name.\n",
    "mkostemps64": "The `mkostemps64` function generates a temporary file name based on a given template string and returns a file descriptor for the created file, checking for invalid input and returning an error if the suffix length is negative.\n",
    "mkstemp": "The `mkstemp` function generates a unique temporary file name based on the provided template string and returns a file descriptor for the created file.\n",
    "mkstemp64": "The `mkstemp64` function generates a unique temporary file name using the specified template string and returns a file descriptor for the created file.\n",
    "mkstemps": "The `mkstemps` function generates a unique temporary file name based on the given template string and returns a file descriptor for the created file.\n",
    "mkstemps64": "The `mkstemps64` function generates a unique temporary file name based on the given template string and returns a file descriptor for the created file.\n",
    "__mktemp": "The `mktemp` function creates a unique temporary file name based on the given template string, and returns the name as a null-terminated string.\n",
    "mlock": "The function mlock takes a memory address and size as input, acquires the necessary privileges to lock the memory, and then locks the memory for the specified duration.\n",
    "mlockall": "The `mlockall` function acquires exclusive ownership of all virtual memory pages for the current task, using the `vm_wire_all` function to wire all pages and prevent them from being swapped out. If any errors occur during the process, the function returns an error status.\n",
    "__mmap": "The `mmap` function maps a file or device into the address space of a process, allowing the process to access the contents of the file or device as if they were a part of its own memory. The function takes several parameters, including the address and length of the mapping, the protection and flags for the mapping, and a file descriptor for the file or device to be mapped.\n",
    "getmntent": "The `getmntent` function allocates memory for a buffer to store mount table entries and reads a mount table entry from the specified stream. If there is no core available, the function returns NULL, indicating that the program cannot run successfully.\n",
    "__setmntent": "The `setmntent` function creates a file pointer and sets the file's locking mode to be controlled by the caller.\n",
    "__getmntent_r": "The `getmntent_r` function reads a mount table from a file and returns the next entry in the table, skipping entries for the \"autofs\" file system with the \"ignore\" mount option hint.\n",
    "__mprotect": "The function __mprotect sets the protection attributes of a memory region specified by address and length, allowing read, write, and execute access based on the value of the prot parameter.\n",
    "msync": "The `msync` function synchronizes changes made to memory with the underlying storage, ensuring that any changes made to the memory are written to disk and are visible to other processes.\n",
    "munlock": "The `munlock` function unlocks a memory region specified by an address and a length. It first acquires privileged ports and then uses the `vm_wire` function to unlock the memory region, dealing with page boundaries and returning an error status.\n",
    "munlockall": "The `munlockall` function releases all privileged ports and wires them to the current task. If there are any errors, the function returns an error status.\n",
    "__munmap": "The `munmap` function deallocates the memory range specified by `addr` and `len`.\n",
    "preadv": "The function preadv reads data from a file descriptor fd into an array of iovecs, with the option to specify an offset and count, and returns the number of bytes read or an error code.\n",
    "preadv2": "The `preadv2` function reads data from a file descriptor `fd` into an array of `struct iovec` structures, optionally skipping over bytes based on an offset and flags. It emulates the `preadv2` syscall, but with some limitations due to the lack of certain flags and semantics.\n",
    "preadv64": "The `preadv64` function reads data from a file descriptor using the `preadv` system call, but falls back to a replacement function if the `preadv` call is not available.\n",
    "preadv64v2": "The `preadv64v2` function reads up to `count` bytes from the file descriptor `fd` at the specified `offset`, using the `struct iovec` vector `vector`, and returns the number of bytes read or -1 on error, with the error code stored in `errno`.\n",
    "ptrace": "The function ptrace() performs a trace event on a process with the given PID, address, and data, and returns the result of the trace event or an error code.\n",
    "pwritev": "The function `pwritev` writes multiple blocks of data to a file, using the `iovec` structure to specify the data and the `off_t` type to specify the file offset, and it falls back to a replacement function if the original implementation is not available.\n",
    "pwritev2": "The `pwritev2` function writes `count` bytes from the `vector` of buffers to the file descriptor `fd` at `offset`, with the option to synchronize the write with the file's data integrity and buffering state, and returns the number of bytes written or -1 on error.\n",
    "pwritev64": "The `pwritev64` function writes a vector of buffers to a file descriptor, optionally specifying an offset, and returns the number of bytes written or an error code.\n",
    "pwritev64v2": "The `pwritev64v2` function writes data to a file using the `pwritev2` syscall with the given `vector` of iovecs and `count`, and optionally with the given `offset` and `flags`. If the `flags` are not zero, the function returns -1 with `ENOTSUP` set.\n",
    "reboot": "The `reboot` function forces the system to restart with the specified `howto` parameter, which determines the type of reboot (e.g., warm reboot, cold reboot, etc.).\n",
    "step": "This function takes two strings as input and returns 1 if the first string matches the second string using regular expressions, and 0 if there is no match. It uses the `regexec` function to perform the match and returns the starting and ending locations of the match in the first string.\n",
    "advance": "The `advance` function checks if a given string matches a regular expression, and if so, it returns the location of the match. If the match is not found, the function returns 0.\n",
    "removexattr": "The `removexattr` function removes an extended attribute with the given name from the file specified by the path.\n",
    "__sbrk": "The function `sbrk` allocates memory from the break area, which is a special area of memory used for allocating memory when no other memory is available. The function takes an integer parameter `increment` that specifies the amount of memory to allocate, and returns a void pointer to the allocated memory or -1 if the allocation fails.\n",
    "__select": "The `select` function selects one or more sockets that are ready for read or write operations, based on a set of file descriptors and a timeout value. It returns the number of sockets that are ready, and the remaining timeout value.\n",
    "setdomainname": "The `setdomainname` function sets the NIS domain name for the system, using the contents of the file `/etc/nisdomain`. It returns 0 if the setting is successful, or -1 if there is an error.\n",
    "setegid": "The function sets the real group ID of the calling process to the specified value, and returns the result of the system call.\n",
    "seteuid": "The `seteuid` function sets the effective user ID of the current process to the specified value. It returns an error value if the specified ID is invalid or if the system call is not supported by the current kernel.\n",
    "sethostid": "The function sets the host ID of the system to the specified value, checking for appropriate rights and avoiding overflows.\n",
    "sethostname": "The `sethostname` function sets the hostname of the system by reading the contents of the file `/etc/hostname` and returning 0 if successful or -1 if there is an error.\n",
    "setxattr": "The `setxattr` function sets an extended attribute on a file specified by `path`, with the name specified in `name`, the value specified in `value`, and the size specified in `size`, and returns the result of the operation.\n",
    "sstk": "The function attribute_compat_text_section sets the error number to ENOSYS and returns a void pointer with the value -1.\n",
    "stty": "The function `stty` sets the terminal settings for a file descriptor `fd` based on the contents of the `struct sgttyb` parameter. It does this by calling the `TIOCSETP` ioctl function with the `params` pointer as its argument.\n",
    "swapoff": "The `swapoff` function attempts to disable swapping on the specified file system, but always fails with an error code of `-1` and sets the `ENOSYS` error code.\n",
    "swapon": "The function `swapon` attempts to enable swapping on the file specified by `path`, but always returns an error code of `-1` with the error `ENOSYS` set.\n",
    "sync": "The `sync` function attempts to synchronize the file system, but it does not actually wait for the operations to complete. It returns an error code if there is any issue with the synchronization.\n",
    "syncfs": "The `syncfs` function synchronizes the file system with the HURD file system, using the `__file_syncfs` function to perform the actual synchronization and returning 0 on success or a negative error code on failure.\n",
    "syscall": "The function syscall takes seven long integer arguments and performs a system call, returning the result of the call or an error code if there is an error.\n",
    "__vsyslog_chk": "The function `__vsyslog_chk` checks the priority and flags of a message and calls the underlying `__nldbl___vsyslog_chk` function to log the message with the specified format and variables.\n",
    "openlog": "The `openlog` function initializes and opens a syslog facility, protecting against multiple users and cancellation. It pushes a cancel handler and locks the syslog lock before calling the internal `openlog_internal` function.\n",
    "closelog": "The `closelog` function protects against multiple users and cancellation, locks the syslog, and frees the lock after closing the log.\n",
    "setlogmask": "The `setlogmask` function sets the log mask for the current process, protecting against multiple users by acquiring and releasing a lock on the `syslog_lock` variable.\n",
    "truncate64": "The `truncate64` function truncates a file to a specified length, returning -1 on error and the number of bytes truncated on success.\n",
    "__tsearch": "The function `tsearch` performs a search for a key in a red-black tree, inserting the key if it is not already present in the tree. The function returns a pointer to the inserted node if the key is found, or `NULL` if the key is not found.\n",
    "__tfind": "The function `__tfind` searches for a key in a balanced binary search tree, returning the node containing the key if found, or `NULL` if not found.\n",
    "__tdelete": "The function `void *__tdelete(const void *key, void **vrootp, __compar_fn_t compar)` removes a node from a red-black tree. It takes a key and a pointer to the root of the tree as input, and returns a pointer to the removed node or `NULL` if the key was not found. The function also modifies the tree's structure to maintain the red-black properties.\n",
    "__twalk": "The `twalk` function traverses a tree, starting at a given root node, and calls a provided action function for each node, checking for null pointers and recursively traversing child nodes.\n",
    "__twalk_r": "The `twalk_r` function performs a recursive traversal of a tree, calling a user-provided action function for each node and passing in a closure argument.\n",
    "ttyslot": "The `ttyslot()` function returns the slot number of the tty device associated with the given name, or 0 if no matching device is found. It iterates through the list of tty devices obtained from the `__getttyent()` function, comparing the name of the device with the given name, and returns the slot number of the matching device.\n",
    "ualarm": "The `ualarm` function sets a real-time alarm to trigger after the specified number of microseconds, using the `setitimer` system call.\n",
    "__libc_unwind_link_get": "The `libc_unwind_link_get()` function initializes a copy of the dynamic linker's unwind information and returns a pointer to it, using double-checked locking to ensure that only one thread can initialize the information at a time. If another thread has already initialized the information, the function cleans up and returns the global pointer to the unwind information.\n",
    "usleep": "The `usleep` function takes a number of microseconds to sleep for and returns after the specified time has elapsed, using the `nanosleep` function to achieve precise timing.\n",
    "vhangup": "The `vhangup` function sets the errno variable to ENOSYS and returns -1.\n",
    "_pthread_cleanup_push_defer": "The `attribute_compat_text_section._pthread_cleanup_push_defer` function sets up a deferred cleanup routine and argument to be executed when the current scope exits.\n",
    "_pthread_cleanup_pop_restore": "The `attribute_compat_text_section._pthread_cleanup_pop_restore` function pops the current cleanup block from the list and, if necessary, executes the cleanup routine.\n",
    "__nptl_create_event": "The `__nptl_create_event()` function creates an event object in the NPTL (New Portable Thread Library) that can be used to signal between threads.\n",
    "__nptl_death_event": "The `nptl_death_event()` function is a null function that does nothing, but it is used as a placeholder to indicate that the process has terminated and all resources should be released.\n",
    "__lll_lock_wait_private": "The function `lll_lock_wait_private` waits for a lock to become available, by repeatedly checking if the lock value is 2 and waiting if it is not. If the lock value is already 2, the function immediately returns.\n",
    "__lll_lock_wake_private": "The function `lll_lock_wake_private` wakes up a thread that is waiting on a futex variable with the value 1, using the `LLL_PRIVATE` flag to indicate that the wakeup should only be sent to the thread that owns the futex.\n",
    "__pthread_get_minstack": "The `pthread_get_minstack` function returns the minimum size of a stack required for a thread, taking into account the page size and the static TLS size for the stack. The function returns a value that is the sum of the page size, the static TLS size, and the minimum stack size required by the platform.\n",
    "clock_getcpuclockid": "The `clock_getcpuclockid` function returns the clock ID associated with the current CPU for the calling process, or returns an error code if the process ID is not the current process or the function is not supported.\n",
    "clock_gettime": "The `clock_gettime` function returns the current time in seconds and nanoseconds for a specific clock ID, using the `HP_TIMING_NOW` function to get the current counter value and computing the seconds and nanoseconds based on the clock frequency.\n",
    "pthread_attr_setsigmask_np": "The `pthread_attr_setsigmask_np` function sets the signal mask for a thread attribute object, filtering out internal signals.\n",
    "thrd_current": "The function returns the current thread, or 0 if no threads are running.\n",
    "thrd_yield": "The `thrd_yield` function relinquishes the current thread's execution to other threads, allowing them to run and potentially yielding the CPU to other threads.\n",
    "__nss_passwd_lookup": "The `attribute_compat_text_section` function performs a lookup in the password file using the specified function name, but always returns an error code of `-1` with an `ENOSYS` error.\n",
    "__nss_next": "The `attribute_compat_text_section__nss_next` function processes the next attribute in a list of attributes, and returns -1 if the attribute is not found or if there are no more attributes to process.\n",
    "__nss_database_lookup": "The `attribute_compat_text_section` function performs a lookup in a database to retrieve information about a configuration file, but it always returns an error code of -1 and does not actually perform the lookup.\n",
    "__nss_hostname_digits_dots": "The function `nss_hostname_digits_dots` resolves a hostname to an IP address, using the `getaddrinfo` function and returning the result in the `resbuf` and `buffer` parameters.\n",
    "ether_hostton": "The `ether_hostton` function looks up the IP address of a hostname using the `gethostton_r` function and stores the result in the `struct ether_addr` pointer `addr`.\n",
    "ether_ntohost": "The `ether_ntohost` function converts an Ethernet address to a hostname. It uses the `nss_ethers_lookup2` function to search for the hostname, and returns the hostname if found, or -1 if not found.\n",
    "fgetgrent": "The function fgetgrent reads group information from the stream pointed to by stream and stores it in the static buffers resbuf and buffer. It returns the group structure in the result pointer, or NULL if an error occurs.\n",
    "fgetpwent": "The function `fgetpwent` reads a password entry from the specified stream and returns the resulting `struct passwd` pointer. It allocates a buffer to store the password entry and loops until the end of the stream is reached, allocating more memory as needed.\n",
    "fgetsgent": "The function fgetsgent(FILE *) allocates a buffer to read data from a stream and returns the data in the buffer, handling errors and locking the stream to prevent interference from other threads.\n",
    "fgetspent": "The `fgetspent` function reads a stream of sparse file information from a file and stores it in a buffer. It allocates a buffer of a fixed size and reads from the stream until there are no more sparse file records or an error occurs.\n",
    "getaddrinfo": "Finally, it sorts the results using the `rfc3484_sort` function, and returns the sorted results.\n",
    "freeaddrinfo": "The function `freeaddrinfo` frees the memory allocated for the `struct addrinfo` structure and its components, including the canonical name and the next pointer.\n",
    "getnameinfo": "The `getnameinfo` function takes a socket address and various flags as input, and returns information about the address in the format specified by the flags. It checks the input parameters for validity and returns an error code if there is a problem.\n",
    "getnetgrent": "The `getnetgrent` function retrieves a Netgroup entry from the netgroup database, optionally filling in the `hostp`, `userp`, and `domainp` pointers with the corresponding information.\n",
    "__internal_setnetgrent": "The `__internal_setnetgrent` function frees a list of netgroup names from the previous run and sets a new netgroup entry based on the given `group` name and `datap` structure, returning the result of the operation and storing any errors in the `errno` variable.\n",
    "setnetgrent": "The function `setnetgrent` sets the current network group for a process by calling the `nscd_setnetgrent` function and returns the result, or falls back to the internal `setnetgrent` function if `nscd_setnetgrent` fails.\n",
    "__internal_endnetgrent": "The function `__internal_endnetgrent` frees the list of netgroup names from the last run and calls the `endnetgrent_hook` function to clean up any resources associated with the netgroup. It also frees any memory allocated for the netgroup data.\n",
    "endnetgrent": "The function `endnetgrent` ends the current network grant and releases the lock on the `dataset` using the `lock` variable.\n",
    "__internal_getnetgrent_r": "The function __internal_getnetgrent_r retrieves a netgroup entry from a list of available groups, using a variety of modules and fallback mechanisms to ensure that the entry is found.\n",
    "innetgr": "The `innetgr` function uses the Netgroup Service Provider (NSP) to search for a netgroup and return information about the group. It walks through a list of services and calls the `setnetgrent` function for each service, checking if the netgroup is known and returning the result.\n",
    "__copy_grp": "The `copy_grp` function copies the contents of one group structure to another, including the GID, name, password, and member list. It also counts the number of members and saves the count at the end of the buffer.\n",
    "__merge_grp": "The `__merge_grp` function merges the members of two groups, saving the members of the first group in a buffer and then adding the members of the second group to the end of the buffer, overwriting any existing members. The function returns the result of the merge, which is stored in the `mergebuf` parameter.\n",
    "getgrouplist": "The function `getgrouplist` retrieves a list of groups that a user is a member of, and optionally increases the size of the input buffer to accommodate the list if it is too small.\n",
    "initgroups": "The `initgroups` function initializes the group membership of a user, by retrieving the list of groups the user is a member of and setting the maximum number of groups the kernel can handle.\n",
    "__nss_configure_lookup": "The `nss_configure_lookup` function configures a named database for a service, loading and caching the data so that it can be overridden. It takes a database name and a service line as input, and returns 0 if the configuration is successful, or -1 if the database is not ours (e.g., sudoers).\n",
    "__nss_database_get": "The `nss_database_get` function retrieves a database connection for a specified database and action list, and checks if the database needs to be reloaded.\n",
    "__nss_files_data_open": "The `nss_files_data_open` function opens a file specified by `path` and returns the status of the operation. If the file is not found or there is an error, the function returns an error status and sets the `errno` variable to the value it saved before the open operation.\n",
    "__nss_files_data_put": "The function `nss_files_data_put` unlocks the lock associated with the `struct nss_files_per_file_data` data structure.\n",
    "__nss_files_data_setent": "The function `nss_files_data_setent` sets up a file data structure for a given file and path, and optionally opens the file if it is not already open.\n",
    "__nss_files_data_endent": "The function `nss_files_data_endent` releases resources associated with a file descriptor in the nss-files library.\n",
    "__nss_files_fopen": "The `nss_files_fopen` function opens a file in read-only mode and returns a pointer to the `FILE` structure. It sets the file's seekability and ensures that the file's offset is correct for efficient seeking.\n",
    "__nss_hash": "The `nss_hash` function takes a key argument and a length, and returns a hash value based on the key. The function uses a series of bitwise operations and multiplications to combine the key bytes into a single hash value.\n",
    "__nss_disable_nscd": "The `nss_disable_nscd` function disables all uses of the Network Security Component (NSCD) by setting up tracing files for the various name services databases and then calling the initialization functions for each database. It also sets up a callback function to purge the NSCD cache if the `nsswitch.conf` file changes.\n",
    "__nss_parse_line_result": "The `nss_parse_line_result` function parses a line from a file and returns an error code indicating success (0), parse error (EINVAL), or out of buffer space (-1), depending on the result of the parse.\n",
    "__nss_readline": "The `nss_readline` function reads a line from a file and returns it to the caller. It checks for errors, handles truncation, and removes leading whitespace from the line.\n",
    "__nss_lookup": "The `__nss_lookup` function searches for a function in a list of action modules and returns the address of the function or a negative value if it is not found.\n",
    "__nss_next2": "The function `__nss_next2` iterates through a list of NSS actions, calling each action's function pointer until one returns a non-NULL value or the end of the list is reached. It returns 0 if a non-NULL value is returned, or -1 if the end of the list is reached without finding a non-NULL value.\n",
    "__nss_lookup_function": "The `nss_lookup_function` function retrieves a function pointer from an action list by name, returning the function pointer if it exists or `NULL` if it does not.\n",
    "putgrent": "The `putgrent` function writes a group entry to a file stream, including the group name, password, and member list. It returns 0 on success or -1 on failure, with the error being stored in `errno`.\n",
    "putpwent": "The `putpwent` function writes the contents of a `struct passwd` structure to a file stream, formatting the output according to the specified fields. If any of the fields are invalid, the function sets the error number and returns -1.\n",
    "putsgent": "The `putsgent` function writes the group information of a struct sgrp pointer to a file, checking for invalid fields and printing errors if any. It writes the group name, password, and membership lists to the file, with each list item separated by a comma and a colon.\n",
    "putspent": "The `putspent` function writes the contents of a `struct spwd` to a file stream, printing the fields in a specific order. If any of the field writes fail, the function returns an error code indicating how many fields failed to be written.\n",
    "sgetsgent": "The `sgetsgent` function retrieves the next line from a stream of text, using the `sgetsgent_r` function to read the line in chunks and allocating memory dynamically to store the line. It returns the next line or `NULL` if there are no more lines or an error occurs.\n",
    "sgetspent": "The `sgetspent` function retrieves the password entry for a given string, using the `getspent` function with a buffer that is dynamically allocated and resized as needed. It returns the password entry structure, or `NULL` if an error occurs or if the string is not found.\n",
    "_nss_files_setaliasent": "The `nss_files_setaliasent` function sets the alias database for the `nss_file` namespace by reading the contents of the `/etc/aliases` file.\n",
    "_nss_files_endaliasent": "The `nss_files_endaliasent` function ends the alias resolution for the current file name.\n",
    "_nss_files_getaliasent_r": "The `nss_files_getaliasent_r` function reads entries from the `/etc/aliases` file and returns the next entry in the file. It returns a status indicating whether the function was successful or not, and it sets the `alias_local` field of the `struct aliasent` argument to 1.\n",
    "_nss_files_getaliasbyname_r": "The `nss_files_getaliasbyname_r` function retrieves the next entry from a host file based on a given name, and returns the result in a `struct aliasent` structure. The function opens a stream to the host file, reads lines until it finds a match, and returns the result or an error status.\n",
    "_nss_files_gethostbyname3_r": "The `gethostbyname3_r` function uses the `internal_setent` and `internal_getent` functions to read a host database and return the host information for a given name. It returns the status of the operation and the host information in the `result` structure.\n",
    "_nss_files_gethostbyname_r": "The function `_nss_files_gethostbyname_r` retrieves information about a host specified by a name, returning the results in a `struct hostent` structure.\n",
    "_nss_files_gethostbyname2_r": "The function `_nss_files_gethostbyname2_r` retrieves information about a host specified by a name, returning the hostent structure in `result` and storing any error information in `errnop` and `herrnop`.\n",
    "_nss_files_gethostbyname4_r": "The function `_nss_files_gethostbyname4_r` uses the host name resolution functions to find the IP addresses of a given host name, and returns the addresses in a struct `gaih_addrtuple` array, or an error status if no addresses are found.\n",
    "_nss_files_init": "The function `_nss_files_init` registers files for various system databases (e.g. `/etc/passwd`, `/etc/group`, etc.) with a provided callback function to handle file access.\n",
    "_nss_files_initgroups_dyn": "The function `_nss_files_initgroups_dyn` initializes a list of groups for a given user by reading the `/etc/group` file and returning the list of groups or an error status.\n",
    "_nss_files_setnetgrent": "The function `_nss_files_setnetgrent` reads the netgroups file and searches for a line containing the given group name. If found, it stores the line in the `struct __netgrent` and returns `NSS_STATUS_SUCCESS`. If not found, it returns `NSS_STATUS_NOTFOUND`.\n",
    "_nss_files_endnetgrent": "The function `nss_files_endnetgrent` frees any allocated memory for data and resets the result structure to null.\n",
    "_nss_netgroup_parseline": "The function `_nss_netgroup_parseline` takes a netgroup line and extracts the host, user, and domain names, returning the extracted information in a `struct __netgrent` structure.\n",
    "_nss_files_getnetgrent_r": "The function `_nss_files_getnetgrent_r` parses a netgroup line and fills a `struct __netgrent` with the information, returning an `nss_status` indicating success or failure.\n",
    "_Fork": "The `Fork` function creates a new process by calling the `arch_fork` system call, and initializes the robust mutex list for the new process. It clears the list of robust mutexes and sets the correct value for the `robust_head` field, but does not check for errors.\n",
    "_exit": "The function `_exit` terminates the current process group with the specified status.\n",
    "alarm": "The `alarm` function sets an alarm to go off after a specified number of seconds, and returns the number of seconds remaining until the alarm goes off. If the alarm is already set, it returns the current number of seconds remaining, rounded to the nearest second.\n",
    "__bsd_getpgrp": "The `__bsd_getpgrp()` function returns the process group ID of the specified process ID (pid).\n",
    "execl": "The function `execl` executes a program with the specified arguments, avoiding dynamic memory allocation to ensure async-signal-safety and avoiding internal bad state in vfork/clone scenarios.\n",
    "execle": "The `execle` function executes a program with the given `path` and `argv` array, and returns the result of the execution, handling the `E2BIG` error code and avoiding dynamic memory allocation for async-signal-safety and vfork/clone compatibility.\n",
    "execlp": "The `execlp` function executes a program with the given name and arguments, allocating memory for the arguments using a variable-length array to avoid issues with `malloc` in asynchronous scenarios.\n",
    "execv": "The `execv` function executes a program specified by the `path` parameter, passing the `argv` array as arguments and using the `environ` environment variables.\n",
    "execvp": "The `execvp` function executes a program specified by the `file` parameter, passing the `argv` array as arguments and using the current environment variables.\n",
    "fexecve": "The `fexecve` function executes a program with the given file descriptor, argument vector, and environment vector. It checks for valid input parameters and uses the `execve` system call to execute the program, falling back to using the `/proc` filesystem if the `execve` call fails.\n",
    "fnmatch": "The `fnmatch` function compares a pattern string to a string using wildcard characters, returning 0 if there is a match, -2 if there is a syntax error, and -1 if there is no match. It converts both strings to wide characters if necessary, and uses the `internal_fnmatch` function to perform the actual comparison.\n",
    "__libc_fork": "The `libc_fork` function determines if the process is running multiple threads and, if so, performs various setup and teardown tasks related to locks and memory allocation before calling the `fork` system call. If the `fork` call succeeds, the function runs handlers registered for the child process; if the call fails, it releases acquired locks and runs handlers registered for the parent process.\n",
    "gai_strerror": "The function `gai_strerror` takes an integer `code` as input and returns a human-readable error message corresponding to the code, using a table of predefined error messages.\n",
    "getopt_long": "The `getopt_long` function parses command-line options, allowing the user to specify options using either short or long names. It takes in the number of command-line arguments, an array of argument values, a list of available options, and an index of the currently processed option, and returns the index of the next option in the argument list.\n",
    "getopt_long_only": "The `getopt_long_only` function parses command-line options using the `getopt` function, but only considers long options.\n",
    "__getpgid": "The `__getpgid` function retrieves the process group ID of a process with the given PID, returning the process group ID if successful, or an error code if not.\n",
    "getpgrp": "The `getpgrp()` function returns the process group ID of the current process.\n",
    "__getpid": "The `__getpid` function returns the current process ID, assuming atomic word fetch and store operations and without acquiring a lock.\n",
    "getsid": "The function `getsid` retrieves the session ID of a process given its PID, and returns the session ID if successful, or returns a failure status if an error occurs.\n",
    "glob64": "The `glob64` function searches for files matching a pattern, but it always returns `GLOB_NOSYS` and sets `errno` to `ENOSYS` instead of performing the search.\n",
    "globfree": "The `globfree` function frees the memory allocated for the global variable table by freeing the arrays of string pointers and setting the table pointers to null.\n",
    "globfree64": "The `globfree64` function frees the memory associated with a `glob64_t` structure.\n",
    "__nanosleep": "The `nanosleep` function with a `struct timespec` argument sleeps for a specified amount of time, returning the number of seconds slept or an error code, and optionally updating a second `struct timespec` argument with the remaining time.\n",
    "pause": "The `pause` function sets the error number to `ENOSYS` and returns -1.\n",
    "posix_madvise": "The `posix_madvise` function advises the kernel on how to handle a range of memory, optionally discarding changes made to the memory without writing it back to disk, but ignores the POSIX behavior.\n",
    "__libc_pread": "The function `__libc_pread` is a wrapper for the `pread64` system call that reads `count` bytes from the file descriptor `fd` at the specified `offset`, and stores the data in the user-provided buffer `buf`.\n",
    "__libc_pwrite": "The `libc_pwrite` function writes `count` bytes of data from the buffer `buf` to the file descriptor `fd` at the position `offset`.\n",
    "re_compile_pattern": "The `re_compile_pattern` function compiles a regular expression pattern and returns a compiled pattern structure. It sets the `no_sub` field of the structure to indicate whether or not to include subexpression information, and sets the `newline_anchor` field to match anchors at newlines.\n",
    "re_set_syntax": "The `re_set_syntax` function sets the regular expression syntax to be used by the `re` library, and returns the previous syntax settings.\n",
    "re_compile_fastmap": "The `re_compile_fastmap` function compiles a regular expression pattern into a fastmap, which is a data structure that allows for efficient matching of the pattern in a string. The function initializes the fastmap with all zeros, and then iterates over the states in the DFA (deterministic finite automaton) that represents the pattern, filling in the fastmap with the appropriate values.\n",
    "regcomp": "This function compiles a regular expression into a data structure that can be used for matching, using the provided pattern and flags. It allocates memory for the fastmap and compiles the expression using the specified syntax, returning an error code if there is an error.\n",
    "regerror": "The `regerror` function returns a string describing an error that occurred during regular expression matching, using a message ID that is specific to the error code passed as an argument. The function copies the message into a user-provided buffer, taking care to avoid overflowing the buffer or writing past its end.\n",
    "regfree": "The function `regfree` frees the memory allocated by a regular expression structure, including the DFA and the fastmap, and sets the structure to an empty state. It also frees the memory allocated by the translate table, if any.\n",
    "re_comp": "The `re_comp` function compiles a regular expression string into an internal format that can be used for matching. It returns a string with an error message if there is a compile error, or NULL if the compilation was successful.\n",
    "regexec": "The `regexec` function searches a string for matches of a regular expression, returning an error code indicating whether the search was successful or not.\n",
    "re_match": "The `re_match` function searches for a match of a regular expression pattern in a given string, starting from a specified position, and returns the index of the match if found.\n",
    "re_search": "The `re_search` function searches for a match of a regular expression in a given string, starting at a specified position and with a specified range of characters to search.\n",
    "re_match_2": "The `re_match_2` function performs a search for a pattern in a string, starting at a specified position, using a provided set of registers.\n",
    "re_search_2": "The `re_search_2` function searches for a pattern in a string, using a given range of characters and a set of registers. It returns the index of the first match, or -1 if no match is found.\n",
    "re_set_registers": "The `re_set_registers` function sets up the register allocation for a regular expression pattern, optionally reallocating the register array and storing the start and end pointers for each register.\n",
    "re_exec": "The `re_exec` function checks if a regular expression matches a given string using the `regexec` function, and returns 0 if the match is successful.\n",
    "__register_atfork": "The `__register_atfork` function registers a function to be called before or after a fork system call, depending on the type of fork (parent or child). It assigns an ID to the handler and returns 0 on success or ENOMEM if there is no more memory available.\n",
    "__sched_cpualloc": "The function `sched_cpualloc` allocates memory for a given count of CPU allocations, using the `CPU_ALLOC_SIZE` function to determine the appropriate size of the allocation. It then returns a pointer to the allocated memory using `malloc`.\n",
    "__sched_cpucount": "The `sched_cpucount` function returns the number of CPUs that are set in a given CPU set, specified by a pointer to a `cpu_set_t` structure and a size parameter.\n",
    "__sched_cpufree": "The `sched_cpufree` function frees the memory allocated for a CPU set represented by the `cpu_set_t` pointer `set`.\n",
    "sched_getaffinity": "The `sched_getaffinity` function sets the CPU affinity of a process with the specified `pid` to the specified `cpuset` of size `cpusetsize`, but it always returns -1 with an error code of `ENOSYS` (not supported).\n",
    "__sched_getparam": "The `sched_getparam` function retrieves the scheduling parameters of a process with the given `pid`.\n",
    "__sched_getscheduler": "The `sched_getscheduler` function returns the scheduling policy of the process with the specified `pid` as `SCHED_OTHER`.\n",
    "__sched_get_priority_max": "The `sched_get_priority_max` function returns the maximum priority that can be assigned to a process using the specified scheduling algorithm, but it always returns -1 with an error set to ENOSYS.\n",
    "__sched_get_priority_min": "The function `sched_get_priority_min` returns -1 with an error set to ENOSYS (not implemented) when called.\n",
    "sched_setaffinity": "The `sched_setaffinity` function sets the CPU affinity of a process with the specified `pid` to the specified `cpusetsize` and `cpuset` parameters, but it always returns -1 with an error code of `ENOSYS` (not supported).\n",
    "__sched_setscheduler": "The `sched_setscheduler` function sets the scheduling policy and parameters for a process with the specified PID. It returns 0 if successful, or an error code if the policy or parameters are invalid.\n",
    "__sched_yield": "The `sched_yield()` function yields the current thread to allow other threads to run, and returns immediately with a value of 0.\n",
    "setgroups": "The `setgroups` function sets the group ID of a process to the specified group ID(s).\n",
    "__setpgid": "The function __setpgid sets the process group ID of a process to the specified value. It synchronizes with the signal thread to ensure that any changes to the process group ID have been processed before returning to the user.\n",
    "setpgrp": "The `setpgrp()` function sets the process group ID of the current process to 0, effectively ending the process group.\n",
    "__shm_get_name": "The `shm_get_name` function retrieves a name for a shared memory object based on a given name string. It checks the name for validity and returns an error code if the name is invalid, otherwise it returns 0.\n",
    "posix_spawn_file_actions_addchdir_np": "The `posix_spawn_file_actions_addchdir_np` function adds a new directory change action to a list of file actions for a posix spawn, allowing the spawned process to change its working directory.\n",
    "posix_spawn_file_actions_addfchdir_np": "The `posix_spawn_file_actions_addfchdir_np` function adds a new file descriptor to the list of file actions for a spawned process, allowing the process to change its working directory using the `fchdir` system call.\n",
    "posix_spawnattr_getsigdefault": "The `posix_spawnattr_getsigdefault` function copies the signal default settings from the `posix_spawnattr_t` structure to a `sigset_t` buffer provided by the user.\n",
    "posix_spawnattr_getflags": "The `posix_spawnattr_getflags` function retrieves the flag word of a `posix_spawnattr_t` structure and stores it in a `short int` variable.\n",
    "posix_spawnattr_getpgroup": "The `posix_spawnattr_getpgroup` function copies the process group ID of the specified attributes to a provided `pid_t` variable.\n",
    "posix_spawnattr_getschedparam": "The `posix_spawnattr_getschedparam` function copies the scheduling parameters from the `posix_spawnattr_t` structure to a `struct sched_param` structure.\n",
    "posix_spawnattr_getschedpolicy": "The `posix_spawnattr_getschedpolicy` function copies the scheduling policy from the `posix_spawnattr_t` structure to the `int` variable `schedpolicy`.\n",
    "posix_spawnattr_getsigmask": "The `posix_spawnattr_getsigmask` function copies the sigset_t data from the attribute object to a user-provided buffer.\n",
    "posix_spawnattr_setpgroup": "The `posix_spawnattr_setpgroup` function sets the process group ID of a spawn attribute structure to the specified value.\n",
    "posix_spawnattr_setschedparam": "The `posix_spawnattr_setschedparam` function sets the scheduling parameters for a new process created using `posix_spawnattr_t` attributes.\n",
    "posix_spawnattr_setschedpolicy": "The `posix_spawnattr_setschedpolicy` function sets the scheduling policy for a process created with `posix_spawn` to one of three possible values: `SCHED_OTHER`, `SCHED_FIFO`, or `SCHED_RR`.\n",
    "fattach": "The `fattach` function attempts to attach a file descriptor to a specific path, but always returns an error code of -1 with an errno set to ENOSYS.\n",
    "fdetach": "The `attribute_compat_text_section` function detaches a section of memory associated with a file specified by the given `path` parameter. If the function is unable to detach the section, it sets the error number to `ENOSYS` and returns -1.\n",
    "getmsg": "The `attribute_compat_text_section` function returns -1 with an error set to ENOSYS (not implemented) when called with the specified parameters.\n",
    "getpmsg": "The `attribute_compat_text_section` function returns -1 with an error set to ENOSYS (not implemented) when called with the specified arguments.\n",
    "isastream": "The function attribute_compat_text_section checks if a file descriptor is a valid stream, returning 0 if it is not a stream or -1 if it is an invalid file descriptor.\n",
    "putmsg": "The `attribute_compat_text_section` function sets the error number to `ENOSYS` and returns -1.\n",
    "putpmsg": "The `attribute_compat_text_section` function sets the error number to `ENOSYS` and returns -1.\n",
    "__sysconf": "The function `sysconf` provides information about the system's configuration, and it delegates the work to either the `linux_sysconf` function or the `cache_sysconf` function depending on the specific name of the configuration item requested.\n",
    "__vfork": "The function `__vfork(void)` creates a new process by calling the `__fork()` function and returns the new process.\n",
    "__wait": "The `__wait` function waits for any child process to complete, and returns the status of the process in the `stat_loc` integer pointer.\n",
    "__waitpid": "The `waitpid` function waits for the termination of a process specified by the `pid` argument, and returns the exit status of the process in the `stat_loc` parameter.\n",
    "wordfree": "The function `wordfree` frees the memory allocated for the word vector in a `wordexp_t` structure, if it is not NULL.\n",
    "wordexp": "The function wordexp takes a string of words, a word expansion context, and flags that determine the behavior of the expansion, and it parses the string of words and adds them to the context, returning the number of words added or an error code if there is a problem.\n",
    "herror": "The function `herror` takes a null-terminated string `s` as input and prints an error message to `stderr` based on the value of `h_errno`.\n",
    "hstrerror": "The function hstrerror takes an integer err as input and returns a human-readable error message based on the value of err. If err is less than 0, the function returns \"Resolver internal error\". If err is between 0 and h_nerr (inclusive), the function returns the error message associated with err in the h_errlist array. Otherwise, the function returns \"Unknown resolver error\".\n",
    "__inet_aton_exact": "The `inet_aton_exact` function parses a string IP address and returns `1` if the address is valid, and `0` if the address is not valid.\n",
    "inet_ntop": "The `inet_ntop` function converts a network address from a binary format to a textual format, depending on the address family (IPv4 or IPv6) passed as an argument. It returns a textual representation of the address, or `NULL` if the address family is not supported.\n",
    "__inet_pton_length": "The `inet_pton_length` function converts a string representation of an IP address to its binary form, depending on the address family (IPv4 or IPv6), and returns the length of the converted address.\n",
    "__libc_ns_makecanon": "The function __libc_ns_makecanon takes a string src and a buffer dst of size dstsize, and returns 0 if it successfully converts src to a canonicalized form by removing trailing dots and backslashes, and -1 if the input string is too long.\n",
    "__libc_ns_samename": "The function `__libc_ns_samename` compares two domain names in a case-insensitive manner, returning 1 if the names are the same, 0 if they are different, and -1 if there is an error.\n",
    "inet_nsap_addr": "The `inet_nsap_addr` function takes a string of ASCII characters and converts it to a binary string of NSAP address format. It returns the length of the converted string or 0 if the input string is not a valid NSAP address.\n",
    "inet_nsap_ntoa": "The `inet_nsap_ntoa()` function converts a binary IP address to a human-readable ASCII string, optionally including a leading '.' for every second octet. It returns a pointer to the start of the ASCII string, which is stored in either the `ascii` parameter or a static buffer `tmpbuf`.\n",
    "__res_iclose": "The function `__res_iclose` closes the socket and frees the address information associated with a resolution state.\n",
    "__res_state": "The function `res_state()` returns the current value of the global variable `__resp`.\n",
    "__res_context_hostalias": "The `res_context_hostalias` function takes a `struct resolv_context` pointer, a hostname, and a buffer to store the resolved hostname, and returns the resolved hostname if it is found in the `HOSTALIASES` environment variable, otherwise it returns NULL.\n",
    "__res_get_nsaddr": "The function `res_get_nsaddr` retrieves the address associated with a given index in the `nsaddr_list` array of a `res_state` structure, returning the address as a `struct sockaddr` if it exists and is not equal to `NULL`, or returning the address as a void pointer to the `nsaddr_list` array if the index is valid but the address is not present or is equal to `NULL`.\n",
    "__res_context_mkquery": "The `res_context_mkquery` function builds a DNS query message based on a given domain name, class, type, and data. It initializes the message header, compresses the domain name, and adds the query type and class to the message.\n",
    "__res_nopt": "The `res_nopt` function adds a DNS resource record to a buffer, optionally including an EDNS0 header with advertised buffer size and DNSSEC information. It returns the length of the updated buffer, or -1 on error.\n",
    "__libc_res_nameinquery": "The function `libc_res_nameinquery` checks if a domain name is a subdomain of a given domain name, and returns 1 if it is, and 0 otherwise.\n",
    "__libc_res_queriesmatch": "The function `__libc_res_queriesmatch` compares two DNS resource records to determine if they match based on their question sections. It returns 1 if the records match, and -1 if they do not match.\n",
    "__res_context_query": "The function __res_context_query generates a DNS query packet and sends it to a DNS server, using the specified context and name, and returning the response or an error code.\n",
    "__res_context_search": "The function __res_context_search() performs a DNS search for a hostname using a context and a list of search domains, and returns the result or an error code.\n",
    "__res_context_send": "The function `res_context_send` sends a DNS request to a list of name servers, using a virtual circuit or datagrams as needed, and returns the response or an error code.\n",
    "__resolv_context_get": "The `resolv_context_get()` function returns the current DNS resolution context.\n",
    "__resolv_context_get_preinit": "The `resolv_context_get_preinit()` function returns a pre-initialized `context_t` structure that can be used to initialize the DNS resolver.\n",
    "__resolv_context_get_override": "The `resolv_context_get_override` function allocates a new `struct resolv_context` structure and sets it as the current context, returning the allocated structure if successful or `NULL` if memory allocation fails.\n",
    "__resolv_context_put": "The `resolv_context_put` function puts a resolver context on the free list, releasing any resources associated with it, and assumes responsibility for updating the reference count and potentially freeing the context.\n",
    "_nss_dns_getcanonname_r": "The function _nss_dns_getcanonname_r takes a name, a buffer to store the canonical name, and various error variables as input, and it queries the DNS to find the canonical name for the given name, returning the canonical name in the input buffer if successful, or an error status if not.\n",
    "_nss_dns_gethostbyname3_r": "The function `_nss_dns_gethostbyname3_r` performs a DNS lookup for a hostname using the gethostbyname3_context function, and returns the result or an error status.\n",
    "_nss_dns_gethostbyname2_r": "The function `_nss_dns_gethostbyname2_r` checks the validity of a hostname and performs a DNS lookup to retrieve information about the host. If the hostname is invalid, it returns an error status; otherwise, it performs a DNS lookup using the `gethostbyname3` function and returns the results in the `result` structure.\n",
    "_nss_dns_gethostbyname_r": "The function `_nss_dns_gethostbyname_r` looks up a hostname using the DNS system and returns the hostent structure containing the IP address and other information about the host. It first checks if the name is valid and then uses the gethostbyname3_context function to perform the actual lookup, returning the result and any errors that occur.\n",
    "_nss_dns_gethostbyname4_r": "This function performs a DNS lookup for a hostname and returns the IP address(es) associated with it. It checks if the hostname has any dots in it and if not, it tries to find a user-level alias for it.\n",
    "_nss_dns_gethostbyaddr2_r": "This function takes an IP address and a buffer as input, and it resolves the IP address to a hostname using DNS. It returns a structure with the hostname and other information, or an error code if there is a failure.\n",
    "_nss_dns_gethostbyaddr_r": "The function `_nss_dns_gethostbyaddr_r` resolves a hostname or IP address to a hostent structure, returning the resulting hostent and any error information in the `errnop` and `h_errnop` parameters.\n",
    "_nss_dns_getnetbyname_r": "The function `_nss_dns_getnetbyname_r` takes a name as input and returns the corresponding network entry. It searches the DNS database using the `res_context_search` function and returns the result in the `result` structure, along with any errors in the `errnop` and `herrnop` parameters.\n",
    "_nss_dns_getnetbyaddr_r": "The `nss_dns_getnetbyaddr_r` function looks up a network address by its binary representation and returns the corresponding network name. It uses the `res_context_query` function to perform the lookup and returns the result in the `struct netent` parameter.\n",
    "__getrlimit": "The `__getrlimit` function retrieves the current value of the specified resource limit and stores it in the `rlimits` structure passed as an argument.\n",
    "nice": "The function \"nice\" adjusts the priority of a process by adding the specified value to its current priority. It checks for errors and returns the new priority value.\n",
    "setrlimit64": "The `setrlimit64` function sets the resource limits for a process, taking an `enum __rlimit_resource` parameter representing the resource to limit and a `const struct rlimit64*` parameter pointing to a structure containing the new limits.\n",
    "vlimit": "The `vlimit` function sets the value of a specific resource limit (CPU, memory, or file size) for the current process, based on the `rlimit` resource type and value passed as arguments.\n",
    "mq_close": "The `mq_close` function closes a message queue descriptor, but always returns an error code indicating that the operation is not supported.\n",
    "mq_getattr": "The `mq_getattr` function retrieves information about a message queue, but always returns an error code of -1 with the error code ENOSYS set.\n",
    "mq_notify": "The `mq_notify()` function sends a notification to a message queue, but it always returns an error (-1) and sets the `errno` variable to `ENOSYS`.\n",
    "__mq_open_2": "The function `mq_open_2` opens a message queue with the specified name and options, and checks that the `O_CREAT` flag is not used without also specifying the `mode` and `attr` parameters. It then calls the `__mq_open` function to perform the actual queue opening.\n",
    "mq_receive": "The `mq_receive` function receives a message from a message queue, but always returns an error code of -1 and sets the `errno` variable to `ENOSYS`.\n",
    "mq_send": "The `mq_send` function sends a message to a message queue with the specified message pointer and length, but always returns an error code of -1 with the error code set to ENOSYS.\n",
    "mq_setattr": "The function mq_setattr sets the attributes of a message queue, but always returns -1 with the error code ENOSYS (not supported).\n",
    "mq_unlink": "The `mq_unlink` function attempts to unlink a message queue specified by the given name, but always returns an error code of -1 with an errno set to ENOSYS (not supported).\n",
    "timer_create": "The `timer_create` function creates a new timer with the specified clock ID and event structure, and optionally starts a thread to deliver the timer event.\n",
    "timer_delete": "The `timer_delete` function removes a timer from the system and deallocates it, waiting for any currently running timer handlers to finish before returning.\n",
    "timer_getoverrun": "The `timer_getoverrun()` function returns the overrun count of a timer specified by the `timerid` parameter, by locking and checking the validity of the corresponding timer node, and returning the overrun count if the timer is valid.\n",
    "timer_gettime": "The `timer_gettime` function retrieves the current time and the expiry time of a timer specified by its ID, and stores the result in the `itimerspec` structure pointed to by the `value` argument. If the timer is armed, the function also calculates the time remaining until expiry and stores it in the `itimerspec` structure.\n",
    "timer_settime": "The `timer_settime` function sets the timing parameters for a timer, including the interval and expiration time, and optionally wakes up a thread when the timer expires. The function takes a `timer_t` identifier, a flag indicating whether the timer is absolute or relative, and two `struct itimerspec` structures representing the current and desired timer values.\n",
    "_setjmp": "The `setjmp` function sets the jump buffer `env` to the current state and returns the previous value of the signal mask, allowing the program to later resume execution at the point where it left off.\n",
    "setjmp": "The `setjmp` function sets the signal mask to zero and jumps to the location specified in the `jmp_buf` environment.\n",
    "__libc_current_sigrtmin": "The function `__libc_current_sigrtmin()` returns the current real-time priority minimum (RTMIN) value, which is either the current value of the RTMIN parameter if it is set, or -1 if it is not set.\n",
    "__libc_current_sigrtmax": "The function `__libc_current_sigrtmax()` returns the current real-time priority maximum value or -1 if the real-time priority is not supported.\n",
    "__libc_allocate_rtsig": "The function `libc_allocate_rtsig` allocates a signal from the range of available signals, returning the index of the allocated signal if successful, or -1 if no signals are available.\n",
    "killpg": "The `killpg` function kills a process group specified by the `pgrp` argument with the specified signal `sig`. If `pgrp` is negative, the function sets the error number to `EINVAL` and returns -1.\n",
    "__libc_sigaction": "The `libc_sigaction` function sets or gets the action to be taken when a specific signal is received by a process, by storing the signal handler and mask in the `sigaction` structure and returning the result of the system call.\n",
    "raise": "The `raise` function raises a signal with the specified signal number `sig`, and returns the result of the signal handling, or -1 if the signal could not be delivered.\n",
    "__sigaction": "The `sigaction` function sets or gets the action to be taken when a specific signal is received by a process, and returns the previous action or -1 if an error occurs.\n",
    "sigaddset": "The `sigaddset` function adds a signal to a set of signals, but returns an error if the signal is invalid or if the set is null.\n",
    "sigaltstack": "The `sigaltstack` function sets the alternate stack for a process, but always returns an error code of -1 with the errno set to ENOSYS.\n",
    "sigandset": "The `sigandset` function sets the intersection of two signal sets in a single signal set, returning 0 if successful or -1 with an error code if any input is invalid.\n",
    "sigdelset": "The `sigdelset` function removes a signal from a signal set, returning 0 if successful or -1 with `EINVAL` set if the input is invalid.\n",
    "sigemptyset": "The `sigemptyset` function sets all elements of a `sigset_t` pointer to 0, returning 0 if successful or -1 with `EINVAL` set if the pointer is null.\n",
    "sigfillset": "The `sigfillset` function fills a signal set with all possible signals and clears any internal signals, returning 0 if successful or -1 with an error code if the input pointer is null.\n",
    "siggetmask": "The `siggetmask` function sets the signal mask to zero, allowing all signals to be received by the process.\n",
    "sighold": "The `sighold` function blocks the specified signal `sig` until it is unblocked using the `sigunblock` function. It sets up a signal mask with the `sigemptyset` function and adds the specified signal to the mask using `sigaddset`, and then blocks all signals in the mask using `sigprocmask`.\n",
    "sigignore": "The `sigignore` function sets the handler for a given signal to ignore the signal and returns the result of the `sigaction` function with the updated signal action.\n",
    "siginterrupt": "The `siginterrupt` function sets or clears the SA_RESTART flag for a signal, allowing the process to restart the signal handler or not, respectively, when the signal is received.\n",
    "sigisemptyset": "The `sigisemptyset` function checks if the given `sigset_t` pointer is empty, and returns -1 with an error set to `EINVAL` if it is not. If the pointer is empty, it returns 0.\n",
    "sigismember": "The `sigismember` function checks if a signal is a member of a signal set, and returns -1 with an error if the input parameters are invalid or if the signal is not a member of the set.\n",
    "signal": "The `signal` function sets the error number to `ENOSYS` and returns `SIG_ERR`.\n",
    "sigorset": "The `sigorset()` function sets the union of two signal sets in a single signal set, and returns 0 if successful, or -1 with an error set to `EINVAL` if any of the input parameters are invalid.\n",
    "__sigpause": "The `sigpause` function suspends the execution of a process until a signal is received, optionally specifying a signal mask to block or unblock certain signals.\n",
    "sigpending": "The `sigpending` function returns the pending signal set for the current process, as determined by the `rt_sigpending` system call.\n",
    "sigrelse": "The function sigrelse blocks the specified signal (sig) if it is currently blocked, and returns 1 if the signal was successfully blocked, or -1 if there was an error.\n",
    "sigset": "The function sigset() sets a signal to be either held or blocked, and returns the previous handler for the signal. It takes an integer signal number and a handler function as input, and adds the signal to the current signal mask if the handler is not already installed. If the signal is already blocked, it returns the current handler for the signal. If the signal is not blocked, it returns the handler that was previously installed for the signal.\n",
    "sigstack": "The `sigstack` function sets or gets the signal stack for a process. It takes a pointer to a `struct sigstack` as an argument, and returns a value indicating whether the operation was successful.\n",
    "__sigsuspend": "The `sigsuspend` function suspends the execution of all signals in the specified set of signals.\n",
    "__sigtimedwait": "The `sigtimedwait` function waits for a signal to be received by the process, with the option to timeout after a specified amount of time.\n",
    "__sysv_signal": "The `sysv_signal` function sets a signal handler for a given signal number. It checks the signal extent and sets the handler and flags for the signal, and returns the previous handler.\n",
    "accept": "The `accept` function accepts a connection on a socket and returns the address of the connecting client, along with other information such as the address length.\n",
    "__connect": "The function __connect takes an file descriptor, a socket address, and a length, and it connects the file descriptor to the socket address. If the address is for the local domain, it looks up the name as a file and talks to it with the ifsock protocol. Otherwise, it returns an error.\n",
    "getpeername": "The function `getpeername` returns -1 with an error set to `ENOSYS` (not supported) when called on a socket.\n",
    "getsockopt": "The `getsockopt` function retrieves a socket option value, specified by `level` and `optname`, and stores it in the user-provided buffer `optval` of size `*optlen`. The function returns 0 on success, or an error code on failure, and also updates `*optlen` with the actual size of the option value.\n",
    "isfdtype": "The `isfdtype` function checks if the file descriptor `fildes` is of the specified type `fdtype`, by using the `fstat64` function to retrieve the file status and then checking the mode of the file. If the file descriptor is not of the specified type, the function returns an error.\n",
    "__recv": "The function `__recv` is a socket receive function that reads data from a socket and stores it in the provided buffer. It returns the number of bytes read, or an error code if there is a problem.\n",
    "recvmmsg": "The `recvmmsg` function receives messages from a message queue and returns the number of received messages, or -1 with an error set to `ENOSYS` if the function is not supported.\n",
    "__libc_sa_len": "The `libc_sa_len` function returns the size of a `struct sockaddr` for a given address family, with different sizes for different address families such as `AF_INET`, `AF_INET6`, `AF_AX25`, and others.\n",
    "__send": "The function __send sends data from a file descriptor to a socket, using the cancelability feature of the hurd to handle errors and returning the number of bytes written or an error code.\n",
    "__sendmmsg": "The `sendmmsg` function sends a message to a socket using the `mmsg` protocol, allowing for sending multiple messages at once and specifying the message type and flags.\n",
    "shutdown": "The `shutdown` function closes a socket and disables further incoming connections or outgoing transmissions, depending on the value of the `how` parameter.\n",
    "sockatmark": "The `sockatmark` function marks a socket as being at the end of a message, and returns the result of the `SIOCATMARK` ioctl call.\n",
    "__socket": "The function `__socket` creates a socket of the specified type and domain, and returns the socket descriptor.\n",
    "socketpair": "The `socketpair` function creates a pair of sockets for communication between processes, but always returns an error code of `-1` with the error code `ENOSYS` set.\n",
    "ctermid": "The `ctermid` function returns the name of the terminal device file (e.g. \"/dev/tty\") or a copy of the input string if a non-null pointer is provided.\n",
    "cuserid": "The function `cuserid` takes a null-terminated string `s` as input, and returns a string containing the user name associated with the current process, using the `getpwuid_r` function to retrieve the information.\n",
    "getw": "The `getw` function reads a single word from a file stream and returns its value, or returns `EOF` if there is an error.\n",
    "__isoc23_fscanf": "The `attribute_hidden __isoc23_fscanf` function reads input from a file stream using a format string and variable arguments, returning 1 if the format string is successfully parsed or 0 if an error occurs.\n",
    "__isoc23_scanf": "The `__isoc23_scanf` function reads input from standard input and checks if it matches a given format string using variable argument list.\n",
    "__isoc23_sscanf": "The `__isoc23_sscanf` function scans a string `s` using the format `fmt` and returns `true` if the scan was successful, and `false` otherwise.\n",
    "__isoc23_vfscanf": "The `isoc23_vfscanf` function reads data from a file and stores it in variables according to a format string, using va_list argument parsing.\n",
    "__isoc23_vscanf": "The `attribute_hidden __isoc23_vscanf` function reads data from the standard input and stores it in the variables passed in the `va_list` according to the format specified in the `fmt` parameter.\n",
    "__isoc23_vsscanf": "The `isoc23_vsscanf` function scans a string using a format specifier and a variable argument list, and returns the number of successful scans.\n",
    "__isoc99_fscanf": "The `attribute_hidden __isoc99_fscanf` function reads data from a file stream using a format string and variable arguments, returning 1 if the format string matches the input data or 0 if there is an error.\n",
    "__isoc99_scanf": "The `attribute_hidden __isoc99_scanf` function reads input from standard input and parses it according to a format string using variable argument parsing, returning `true` if the input is successfully parsed and `false` if there is an error.\n",
    "__isoc99_sscanf": "The `attribute_hidden __isoc99_sscanf` function scans a string `s` using the format string `fmt` and a variable argument list `arg`, returning `1` if the scan was successful, and `0` otherwise.\n",
    "__isoc99_vfscanf": "The `isoc99_vfscanf` function reads data from a file using a variable format string and a list of arguments, and it returns the number of successfully scanned items.\n",
    "__isoc99_vscanf": "The function `__isoc99_vscanf` takes a format string and a variable argument list, and it performs variable scanning on the standard input stream `stdin` using the specified format string.\n",
    "__isoc99_vsscanf": "The `isoc99_vsscanf` function scans a string using a variable number of arguments and returns the number of successful scans.\n",
    "perror": "The `perror` function takes a string `s` and an error number `errnum`, and it writes the error message to the standard error stream, creating a new stream if necessary and ensuring that the stream is properly closed afterwards.\n",
    "parse_printf_format": "The `parse_printf_format` function parses a printf format string and returns the number of arguments and the types of those arguments. It searches for format specifications in the format string, parses each one, and determines the types of the arguments based on the format specifier and the value of the argument.\n",
    "printf_size_info": "The `printf_size_info` function determines the argument type of the first argument in a `printf` format string and returns 1 if a double or long double argument is found.\n",
    "psiginfo": "The function psiginfo takes a siginfo_t pointer and a string, and writes a human-readable representation of the signal to a file.\n",
    "psignal": "The function psignal takes an integer signal and a null-terminated string description, and prints a message to the standard error stream indicating the signal and its description, or an error message if the signal is unknown.\n",
    "putw": "The `putw` function writes the integer `w` to the file specified by `stream`, and returns 0 if the write is successful or EOF if there is an error.\n",
    "remove": "The function removes a file or directory by attempting to unlink it first, and if that fails, trying to remove it using rmdir, returning -1 on failure and 0 on success.\n",
    "rename": "The function rename() renames a file or directory by replacing the old name with the new name, using the appropriate system call depending on the platform and the presence of the renameat() function.\n",
    "tempnam": "The `tempnam` function generates a temporary file name in the specified directory, using the given prefix and a unique suffix. It returns a string representation of the file name, or `NULL` if the generation failed.\n",
    "tmpfile": "The `tmpfile` function creates a temporary file using a system-specific method, and then opens the file in write-binary mode. If the creation of the file fails, the function falls back to using a named temporary file and unlinks it after opening the file.\n",
    "tmpnam": "The `tmpnam` function creates a temporary file name and returns a pointer to it. It uses two buffers to ensure thread safety and limits the size of the temporary file name to `L_tmpnam` characters.\n",
    "tmpnam_r": "The `tmpnam_r` function generates a unique temporary file name in the specified directory, returns the name if it is not NULL.\n",
    "vfprintf": "The `attribute_hidden` function is a wrapper for the `vfprintf` function that redirects the call to the `__nldbl_vfprintf` function.\n",
    "a64l": "The function `a64l` takes a null-terminated string as input and returns the long integer value of the string, converted using a lookup table. The function iterates over the string, shifting the bits of each character and combining them to form the final result.\n",
    "abort": "The `abort` function attempts to abort the current process using a system-specific command, and if that fails, it exits the process with a status of 127. If even this fails, the function enters an infinite loop to ensure that the process never returns.\n",
    "abs": "The `abs` function takes an integer `i` and returns its absolute value, either `i` if `i` is positive, or `-i` if `i` is negative.\n",
    "atof": "The `atof` function takes a C-style string representation of a number and returns its double value.\n",
    "atoi": "The `atoi` function converts a string representing an integer to an integer value, returning the result as an `int`.\n",
    "atol": "The `atol` function converts a string to a long integer using the `strtol` function and returns the result.\n",
    "atoll": "The `atoll` function converts a string to a long long integer using the `strtoll` function and returns the result. It takes a single argument, a null-terminated string, and uses the base 10 radix.\n",
    "__cxa_at_quick_exit": "The function `__cxa_at_quick_exit` registers a function to be called when the program is about to exit, allowing the function to perform any necessary cleanup or initialization before the program exits.\n",
    "__cxa_atexit": "The function `__cxa_atexit` registers a function to be called when the program exits, allowing the function to clean up any resources it needs to. It takes three parameters: a function to be called, an argument to pass to that function, and a pointer to a data block.\n",
    "__cxa_finalize": "The `cxa_finalize` function is a C++ finalizer that is called when the program is about to terminate. It iterates over a list of exit functions and calls each one with the given argument and status.\n",
    "__cxa_thread_atexit_impl": "This function registers a TLS destructor for a given object and function. It prepares the destructor by creating a new struct dtor_list and linking it to the TLS destructor list, and it also increments the TLS destructor count for the object's link map.\n",
    "__call_tls_dtors": "The function `call_tls_dtors` iterates through a list of objects that have been allocated using the `tls_dtor_list` mechanism and calls the destructor function associated with each object. The function ensures that the destructor is called after the object has been dereferenced, to prevent potential issues with DSO unload.\n",
    "div": "The function div takes two integer parameters, numer and denom, and returns a struct containing the quotient and remainder of the division of numer by denom.\n",
    "drand48": "The `drand48` function generates a random double-precision floating-point number using the ERAND48 algorithm, and returns the result.\n",
    "drand48_r": "The function `drand48_r` generates a random double-precision floating-point number using the Mersenne Twister algorithm, and stores the result in the provided double pointer `result`, using the internal state of the `struct drand48_data` object `buffer` to generate the random number.\n",
    "erand48": "The function `erand48` generates a random double-precision floating-point number using the Mersenne Twister random number generator, taking an array of three unsigned short integers as seed.\n",
    "exit": "The function `exit` terminates the current process and calls exit handlers with the given status.\n",
    "fmtmsg": "The `fmtmsg` function formats a message according to a set of severity levels and labels, and outputs the message to the console or stderr depending on the classification.\n",
    "getcontext": "The `getcontext` function sets the errno variable to ENOSYS and returns -1.\n",
    "getentropy": "The `getentropy` function fills a buffer with random data, returning 0 if successful and -1 if an error occurs, such as if the buffer is too long or if the call is interrupted by a signal.\n",
    "getenv": "The `getenv` function retrieves the value of an environment variable, given its name. It searches through a list of environment variables and returns the value of the first variable that matches the given name.\n",
    "getsubopt": "The `getsubopt` function takes a pointer to a string representing an option and a pointer to an array of strings representing possible suboptions, and it returns the index of the matching suboption or -1 if no match is found. It works by finding the end of the next token in the option string and then searching for a match between the token and the suboptions.\n",
    "jrand48": "The function `jrand48` generates a random number using the `drand48` algorithm and returns the result.\n",
    "l64a": "The function `l64a` takes a long integer `n` and returns a null-terminated string representing `n` in base 32, using a predefined conversion table.\n",
    "labs": "The function `labs` takes a long integer `i` as input and returns its absolute value, either `i` if `i` is positive, or `-i` if `i` is negative. In other words, the function returns the value of `i` with all negative signs removed.\n",
    "lcong48": "The function `lcong48` generates a random number using the Libreria C standard random number generator, taking an array of 7 unsigned short integers as input.\n",
    "ldiv": "The `ldiv` function takes two long integers `numer` and `denom` and returns a `ldiv_t` structure containing the quotient and remainder of `numer` divided by `denom`.\n",
    "llabs": "The `llabs` function takes a `long long int` parameter `i` and returns its absolute value, either `i` if `i` is positive, or `-i` if `i` is negative.\n",
    "lldiv": "The `lldiv` function takes two `long long int` parameters `numer` and `denom` and returns a `lldiv_t` structure containing the quotient and remainder of `numer` divided by `denom`.\n",
    "lrand48": "The `lrand48` function generates a random long integer using the Mersenne Twister random number generator, taking no arguments and returning the generated value.\n",
    "lrand48_r": "The `lrand48_r` function generates a random number using the Mersenne Twister algorithm and returns the result, checking for errors and being generous in its arguments.\n",
    "makecontext": "The `makecontext` function sets the context for a new function execution, including the function pointer and arguments, and sets the errno value to ENOSYS.\n",
    "mblen": "The `mblen` function returns the length of the multibyte sequence in `s`, handling stateful encodings and returning -1 on error.\n",
    "mbstowcs": "The `mbstowcs` function converts a null-terminated ASCII string to a wide character string using the current locale, and returns the number of wide characters written.\n",
    "mbtowc": "The `mbtowc` function converts a sequence of bytes to a wide character, using a stateful encoding conversion function if necessary, and returns the result or -1 on error.\n",
    "mrand48": "The `mrand48` function generates a random long integer using the `__jrand48_r` function from the libc DRAND48 data.\n",
    "mrand48_r": "The function `mrand48_r` generates a random number using the `drand48` algorithm and returns the result, checking for errors and being generous in its arguments.\n",
    "nrand48": "The function `nrand48` generates a random long integer using the `drand48` algorithm, taking an array of three unsigned short integers as input.\n",
    "putenv": "The `putenv` function sets an environment variable, either by adding it to the environment if it does not already exist, or by overwriting an existing variable with the same name.\n",
    "qsort": "The `qsort` function sorts an array of elements using the provided comparison function to determine the order.\n",
    "rand": "The `rand()` function returns a randomly generated integer value using the `__random()` function.\n",
    "rand_r": "The function rand_r takes an unsigned int seed and returns a pseudo-random integer between 0 and 2047, using a proprietary algorithm that involves multiplying and adding the seed with various constants, and then shifting and XORing the result with other values.\n",
    "rpmatch": "The `rpmatch` function caches response patterns and compiled regexps and returns the result of trying to match the response against either a yes or no expression. It returns the result of the match, or `-1` if there is no match.\n",
    "__libc_secure_getenv": "The `libc_secure_getenv` function returns the value of the environment variable `name` if the system is in secure mode, and returns `NULL` otherwise.\n",
    "seed48": "The function `seed48` takes an array of 3 unsigned short integers as input and returns a random value from the DRAND48 random number generator, using the input values as seeds.\n",
    "setcontext": "The function `setcontext` sets the current context to the specified `ucount_t` structure, but it always returns -1 with an error code of ENOSYS (not supported).\n",
    "setenv": "The `setenv` function sets an environment variable, optionally replacing an existing variable with the same name.\n",
    "clearenv": "The `clearenv` function clears the environment pointer and frees the memory allocated for the environment if it was allocated by this function.\n",
    "srand48": "The `srand48` function sets the random number generator seed using the specified `seedval` value, and initializes the random number generator using the `__libc_drand48_data` data structure.\n",
    "__isoc23_strtol": "The `isoc23_strtol` function converts a string to a long integer value based on a given base and locale, using the `strtol` function with a customized `endptr` parameter.\n",
    "__strtol_l": "The function `__strtol_l` takes a string pointer, an end pointer, a base, and a locale, and it returns an integer value by parsing the string. It uses the `strtol` function with the `endptr` and `base` parameters to perform the parsing.\n",
    "__isoc23_strtol_l": "The `isoc23_strtol_l` function converts a string to a long integer value using the `strtol` function with a locale-specific parsing algorithm and returns the result.\n",
    "swapcontext": "The `swapcontext` function swaps the context of two processes, but it always returns -1 with an error code of ENOSYS (not implemented).\n",
    "__libc_system": "The `libc_system` function checks if a command processor is available and, if so, executes the specified command using the `do_system` function.\n",
    "wcstombs": "The `wcstombs` function writes a wide character string to a multibyte character string, using the current locale's encoding, and returns the number of bytes written or an error code.\n",
    "wctomb": "The `wctomb` function takes a null-terminated string `s` and a wide character `wchar`, and returns the number of bytes written to `s` in the encoding specified by the current locale, or 0 if `s` is null.\n",
    "__xpg_basename": "The `xpg_basename` function takes a filename as input and returns a pointer to a static string containing the basename (i.e., the last component) of the filename, without the leading directory path. If the filename is empty or has no slashes, the function returns a pointer to the static string \".\".\n",
    "__argz_count": "The `argz_count` function counts the number of arguments in a null-terminated array of strings, by iterating through the array and counting the number of non-empty parts.\n",
    "argz_delete": "The `argz_delete` function removes a given entry from a null-terminated array of strings, shrinking the array and updating the length.\n",
    "__argz_next": "The `argz_next` function advances a pointer to the next token in a null-terminated string array, returning the token if it exists and is not beyond the end of the array, or `NULL` otherwise.\n",
    "__argz_stringify": "The `argz_stringify` function takes a null-terminated character array `argz` and a length `len`, and separates the array into substrings using a specified separator character. It iterates over the array, stopping when the length of the current substring is less than or equal to 1, and appending the separator to each substring.\n",
    "bcopy": "The `bcopy` function copies the contents of the specified source memory block to the destination memory block, with a specified length.\n",
    "__bzero": "The `bzero` function sets all bytes in a given block of memory to zero.\n",
    "envz_entry": "The `envz_entry` function searches for a substring within a null-terminated string `envz` and returns a pointer to the start of the substring if it exists, or `0` if it does not. The function iterates over the characters of `envz` and compares them to the characters of the input string `name`, returning the first match or `0` if no match is found.\n",
    "envz_get": "The `envz_get` function returns a pointer to the value of the environment variable `name` in the string `envz`, or `NULL` if the variable is not found.\n",
    "envz_remove": "The `envz_remove` function removes an environment variable from the list of environment variables stored in the `envz` array, given the name of the variable to be removed.\n",
    "envz_add": "The `envz_add` function adds a new entry to the end of an environment variable array, optionally setting a value for the entry.\n",
    "envz_merge": "The `envz_merge` function appends the contents of the `envz2` array to the `envz` array, overwriting any existing entries. If an entry already exists in `envz`, it is deleted before the new entry is added.\n",
    "envz_strip": "The `envz_strip` function removes null entries and concatenates the remaining non-null entries in the environment vector `envz`, returning the new length of the vector in `envz_len`.\n",
    "explicit_bzero": "The function fills a block of memory with zeros, using the `memset` function, and then inserts a compiler barrier to ensure that the memory is properly zeroed before returning.\n",
    "__ffs": "The function `__ffs` takes an integer `x` as input, counts the number of low bits set in `x` using a bit manipulation instruction, and returns the count plus 1.\n",
    "ffsll": "The function ffsll takes a long long int argument x and returns the number of low bits set in x, counting from 1. It uses an assembler instruction to count the low bits and then adds 1 to the result.\n",
    "memfrob": "The `memfrob` function takes a void pointer `s` and a size `n`, and modifies the memory pointed to by `s` by XORing each byte with the value 42, returning the modified memory pointer.\n",
    "sigabbrev_np": "The `sigabbrev_np` function returns a pointer to a null-terminated string representing the abbreviation of a signal number, if the signal number is valid and less than or equal to `NSIG`.\n",
    "__strcasecmp": "The function `__strcasecmp` compares two strings in a case-insensitive manner, using the current locale, and returns an integer indicating the difference between the two strings.\n",
    "strchr": "The `strchr` function searches for the first occurrence of the character `c_in` in the string `s` and returns a pointer to the found character or `NULL` if not found.\n",
    "strcmp": "The `strcmp` function compares two strings (represented as arrays of characters) and returns an integer indicating the difference between the two strings, taking into account the alignment of the strings. The function first handles any unaligned bytes in the input strings and then compares the aligned parts of the strings using a loop.\n",
    "__strdup": "The `strdup` function creates a new null-terminated string by copying the contents of the input string `s` and returns a pointer to the new string. If memory allocation fails, the function returns `NULL`.\n",
    "strerror": "The `strerror` function takes an error number `errnum` and returns a human-readable string describing the error using the current locale.\n",
    "strerrorname_np": "The `strerrorname_np` function returns a human-readable name for a given error number using the `__get_errname` function.\n",
    "strfry": "The `strfry` function shuffles the characters of a string in-place using the `rand()` function to randomly swap adjacent characters. It returns the modified string.\n",
    "__strndup": "The `strndup` function creates a new null-terminated string by copying a given string and returns a pointer to the new string. If memory allocation fails, the function returns `NULL`.\n",
    "strsignal": "The function `strsignal` takes an integer `signum` as input and returns a string description of the signal, using the `__sigdescr_np` function to retrieve the description if possible, and falling back to a hard-coded string if not.\n",
    "strtok": "The `strtok` function splits a string into multiple tokens using a specified delimiter, and returns the next token.\n",
    "__strtok_r": "The `strtok_r` function splits a string into tokens using a given delimiter, and returns the address of the first token. It also saves the address of the next token in a pointer passed as an argument.\n",
    "__strverscmp": "The `strverscmp` function compares two strings (represented as arrays of unsigned char) and returns an integer indicating the difference between the two strings, with a special case for comparing strings of digits.\n",
    "swab": "The function `swab` swaps the contents of two blocks of memory, `bfrom` and `bto`, of size `n` bytes, using a single loop that copies each byte in turn from `bfrom` to `bto`, and vice versa.\n",
    "__xpg_strerror_r": "The function `xpg_strerror_r` takes an error number, a buffer to store the error message, and a buffer length, and returns the length of the error message or an error code if the buffer is too small. It maps the error number to a human-readable error message using a table of error codes and messages for different systems and subsystems.\n",
    "authdes_pk_create": "The `authdes_pk_create` function creates an authentication handle using the DES algorithm and a given private key. It allocates memory for the authentication handle and private data, sets up the private data, and returns the authentication handle.\n",
    "authnone_create": "The `authnone_create()` function initializes the `authnone` structure once and returns a pointer to the initialized structure.\n",
    "authunix_create": "The `authunix_create` function creates a new authentication handle for a Unix-based system, using the given `machname`, `uid`, `gid`, and `len` parameters to set up the authentication context. The function allocates memory for the authentication handle and the associated data structures, and sets up the handle to reflect the new credentials.\n",
    "authunix_create_default": "The `authunix_create_default` function creates an authentication context for the current process, using the `geteuid` and `getegid` functions to obtain the current user and group IDs, and the `getgroups` function to obtain the current group IDs. It then creates an authentication structure using the `authunix_create` function, truncating the list of groups to the first `NGRPS` members.\n",
    "xdr_authdes_cred": "The `xdr_authdes_cred` function unrolls an XDR stream containing an `struct authdes_cred` structure and extracts the contents of the structure. It handles two possible values of the `adc_namekind` field, `ADN_FULLNAME` and `ADN_NICKNAME`, and returns `TRUE` if the extraction is successful, or `FALSE` if there is an error.\n",
    "xdr_authdes_verf": "The function xdr_authdes_verf unrolls XDR encoding for the struct authdes_verf structure, encoding two members (adv_xtimestamp and adv_int_u) using xdr_opaque.\n",
    "xdr_authunix_parms": "The function `xdr_authunix_parms` takes an XDR stream `xdrs` and a `struct authunix_parms` pointer `p`, and it reads the authentication parameters for a Unix login. It returns `TRUE` if the parameters are read successfully, and `FALSE` otherwise.\n",
    "clnt_create": "The `clnt_create()` function creates a client connection to a remote RPC server, using the specified hostname, program number, version number, and protocol (either \"unix\" or a TCP/UDP port number).\n",
    "clnt_sperror": "The `clnt_sperror` function takes a `CLIENT *` pointer and a string message, and returns a newly allocated string containing a human-readable error message for an RPC error.\n",
    "clnt_perror": "The `clnt_perror` function prints an error message to the standard error stream, using the `clnt_sperror` function to generate the message.\n",
    "clnt_sperrno": "The function `clnt_sperrno` takes an enumeration value `stat` and returns a string representing the error message corresponding to that value, searching through a table of predefined error messages and returning a default message if no match is found.\n",
    "clnt_perrno": "The `clnt_perrno` function prints the error message corresponding to the given `enum clnt_stat` value to the standard error stream.\n",
    "clnt_spcreateerror": "The `clnt_spcreateerror` function creates a human-readable error message from an RPC error status and a given message.\n",
    "clnt_pcreateerror": "The `clnt_pcreateerror` function creates an error message using the `clnt_spcreateerror` function and then prints the message to the console using `fxprintf`.\n",
    "clntraw_create": "The `clntraw_create` function creates a new client handle for a raw RPC call, initializing the necessary data structures and setting up the XDR stream for serialization. It also creates a shared buffer for the client and server to use during the call.\n",
    "callrpc": "The `callrpc` function is a wrapper for the RPC call function that manages the creation and destruction of the RPC client and caches the host, program number, and version number. It takes host, program number, version number, procedure number, input and output procedure pointers, and input data as arguments, and returns the status of the RPC call.\n",
    "clnttcp_create": "The `clnttcp_create` function creates a new TCP client handle, allocating memory for the client and call data structures, and initializing the call message and XDR stream.\n",
    "__libc_clntudp_bufcreate": "The `libc_clntudp_bufcreate` function creates a new RPC client connection to a server using UDP, allocating memory for the client and server data, and returning a pointer to the client structure.\n",
    "clntudp_bufcreate": "The `clntudp_bufcreate` function creates a UDP client buffer and returns a pointer to the buffer, allowing the user to send and receive data using the UDP protocol.\n",
    "clntudp_create": "The `clntudp_create` function creates a UDP connection to a remote host and returns a socket descriptor.\n",
    "clntunix_create": "The `clntunix_create` function creates a client handle for a Unix RPC call. It allocates memory for the client structure and sets up the RPC call message, then returns the client handle.\n",
    "cbc_crypt": "The `cbc_crypt` function performs a CBC (Cipher Block Chaining) encryption of a block of data using the given key, IV, and mode, and returns the result of the encryption.\n",
    "ecb_crypt": "The `ecb_crypt` function encrypts a block of data using the Electronic Codebook (ECB) mode with a given key, and returns the encrypted data.\n",
    "des_setparity": "The function `des_setparity` sets the parity of a given character array using a predefined mapping table `partab`.\n",
    "get_myaddress": "The `get_myaddress` function retrieves the IP address of the interface that the current process is using, taking into account the loopback interface. It returns the IP address and port number of the interface in the `struct sockaddr_in` format.\n",
    "getrpcport": "The function `getrpcport` retrieves the port number associated with a given host, program number, version number, and protocol. It first resolves the hostname to an IP address using `gethostbyname`, and then uses `pmap_getport` to retrieve the port number.\n",
    "key_setsecret": "The `key_setsecret` function sets a secret key using the `KEY_SET` function and returns 0 if successful, or -1 if there is an error.\n",
    "key_secretkey_is_set": "The function `key_secretkey_is_set()` checks if the secret key is set and if it is not, it sets all bytes of the secret key to zero to avoid leaving it in memory.\n",
    "key_encryptsession": "The `key_encryptsession` function encrypts a session key using the given DES key and remote name. It returns 0 if the encryption is successful, or -1 if there is an error.\n",
    "key_decryptsession": "The `key_decryptsession` function decrypts a session key using a remote name and a DES key, and returns the decrypted key.\n",
    "key_encryptsession_pk": "The function key_encryptsession_pk encrypts a session key using the given remote name, remote key, and des key, and returns the encrypted des key.\n",
    "key_decryptsession_pk": "The function key_decryptsession_pk decrypts a session key using a remote name, remote key, and a des key, and returns the decrypted des key.\n",
    "key_gendes": "The `key_gendes` function creates a UDP/IP client using the `clntudp_bufcreate` function, calls the `KEY_GEN` RPC procedure with the `xdr_void` and `xdr_des_block` xdr procedures, and destroys the client and socket after the call completes. If the call fails, the function returns -1.\n",
    "key_setnet": "The `key_setnet` function sets a network key using the `KEY_NET_PUT` call and returns 1 if successful, or -1 if there is an error.\n",
    "key_get_conv": "The function `key_get_conv` retrieves the encryption key from a password and stores it in the `deskey` parameter.\n",
    "xdr_keystatus": "The `xdr_keystatus` function reads an XDR-encoded `keystatus` object from a buffer and returns `TRUE` if the read was successful, and `FALSE` otherwise.\n",
    "xdr_keybuf": "The `xdr_keybuf` function reads an opaque key buffer from an XDR stream and returns `TRUE` if successful, `FALSE` otherwise.\n",
    "xdr_netnamestr": "The `xdr_netnamestr` function reads a string representing a network name from an XDR stream and stores it in a `netnamestr` object, returning `TRUE` if successful and `FALSE` if there is an error.\n",
    "xdr_cryptkeyarg": "The `xdr_cryptkeyarg` function reads an XDR-encoded cryptographic key argument from a stream and returns `TRUE` if the decoding is successful, and `FALSE` otherwise.\n",
    "xdr_cryptkeyarg2": "The function xdr_cryptkeyarg2 takes an XDR stream and a cryptkeyarg2 structure as input, and performs XDR encoding of the structure's remote name, remote key, and DES key, returning TRUE if successful or FALSE if not.\n",
    "xdr_cryptkeyres": "The function `xdr_cryptkeyres` decodes a cryptographic key result from an XDR stream and returns `TRUE` if successful, `FALSE` otherwise.\n",
    "xdr_unixcred": "The function xdr_unixcred takes an XDR stream and a pointer to a Unix credit structure, and it reads the uid and gid fields from the stream and stores them in the structure, as well as reading an array of gid values and storing them in the structure.\n",
    "xdr_getcredres": "The function xdr_getcredres retrieves a Unix credit handle from an XDR stream and returns a boolean value indicating success or failure.\n",
    "xdr_key_netstarg": "The `xdr_key_netstarg` function reads an XDR-encoded `key_netstarg` structure from a buffer and returns `TRUE` if successful, `FALSE` otherwise. It reads the structure's private and public keys, as well as its network name, from the buffer and verifies that all three fields are correctly encoded.\n",
    "xdr_key_netstres": "The function xdr_key_netstres takes an XDR stream and a pointer to a key_netstres structure, and it reads the status and network address information from the XDR stream and stores it in the key_netstres structure, returning TRUE if successful or FALSE if there is an error.\n",
    "user2netname": "The `user2netname` function takes a network name, a user ID, and an optional domain name as input, and returns a netname string in the format `<osys>.<uid>@<domain>`. It checks for overflow and returns 0 if the resulting netname string would be too long.\n",
    "host2netname": "The `host2netname` function takes a hostname, domain name, and an array to store the resulting network name, and it returns 1 if the network name can be constructed successfully, and 0 otherwise. The function constructs the network name by combining the hostname and domain name, and it returns the resulting network name in the provided array.\n",
    "getnetname": "The `getnetname` function returns a network name based on a user ID or host ID. It takes a character array `name` as input, and returns a network name based on the contents of `name`.\n",
    "netname2user": "The `netname2user` function looks up the user ID and group ID for a given network name, using the `nss_publickey_lookup2` function to search for a plugin that can handle the request. The function returns `NSS_STATUS_SUCCESS` if a plugin was found and the lookup was successful, or `NSS_STATUS_UNAVAIL` if no plugin was found or the lookup failed.\n",
    "netname2host": "The `netname2host` function takes a network name as input, extracts the hostname from it, and copies the extracted hostname into a provided buffer, returning 1 if the hostname fits within the provided buffer size.\n",
    "pmap_getmaps": "The `pmap_getmaps` function retrieves a list of available ports from the portmapper and returns the list in a `pmaplist` structure. It opens a socket to the portmapper and calls the `PMAPPROC_DUMP` procedure to obtain the list of ports, and then closes the socket if it was opened.\n",
    "__libc_rpc_getport": "The `libc_rpc_getport` function retrieves a port number for a given program and version from the portmapper service. It creates a client connection to the portmapper, sends a request to get a port, and returns the port number if successful, or an error status if failed.\n",
    "pmap_getport": "The `pmap_getport` function retrieves a port number for a given program, version, and protocol, using the RPC mechanism.\n",
    "pmap_set": "The function pmap_set registers a service with a given program, version, and protocol, and returns a boolean value indicating success or failure.\n",
    "pmap_unset": "The function pmap_unset sets a program and version to unset in the pmap table. It creates a client using clntudp_bufcreate, calls PMAPPROC_UNSET on the client, and then destroys the client and closes the socket.\n",
    "xdr_pmap": "The function xdr_pmap takes an XDR stream and a pointer to a pmap structure, and it reads the program, version, and protection information from the stream and returns the port number if successful, or FALSE if there is an error.\n",
    "xdr_pmaplist": "The function xdr_pmaplist iterates through a list of pmap structures, encoding or decoding each one using XDR, and returns TRUE if all elements were successfully encoded or decoded, and FALSE if an error occurred.\n",
    "pmap_rmtcall": "The function pmap_rmtcall sends a remote procedure call to a portmapper daemon, specifying the program, version, and procedure to call, as well as the arguments and results to be passed and received. The function returns an error status indicating whether the call was successful or not.\n",
    "xdr_rmtcall_args": "This function takes an XDR stream and a struct rmtcallargs pointer as input, and extracts the argument length and arguments from the XDR stream. It returns TRUE if the extraction is successful, and FALSE otherwise.\n",
    "xdr_rmtcallres": "The function xdr_rmtcallres takes an XDR stream and a struct rmtcallres pointer as input, and it updates the port pointer and result length in the struct rmtcallres based on the XDR stream, returning TRUE if successful or FALSE if there is an error.\n",
    "clnt_broadcast": "The function clnt_broadcast sends a broadcast request to a list of possible servers and waits for a response, using the specified version number, procedure number, and xdr routine for arguments and results, and calling each result obtained.\n",
    "getpublickey": "The function `getpublickey` retrieves a public key from a name using the NSS library, and returns `true` if the key is found and `false` otherwise.\n",
    "getsecretkey": "The `getsecretkey` function retrieves a secret key from a name and password, using the NSS library. It iterates through a list of available secret key functions and calls each one in turn, returning the first one that successfully retrieves the key.\n",
    "xdr_callmsg": "xdr_callmsg decodes or encodes an RPC call message, including the authentication information, and returns TRUE if successful or FALSE if not.\n",
    "_rpc_dtablesize": "The `_rpc_dtablesize()` function returns the current size of the dynamic table used by the RPC system, initializing it to zero if it hasn't been set before.\n",
    "xdr_opaque_auth": "The `xdr_opaque_auth` function takes an `XDR` stream and a `struct opaque_auth` pointer as input, and it tries to read an opaque authentication value from the stream. If the read is successful, it returns the authenticated value as a byte array; otherwise, it returns `FALSE`.\n",
    "xdr_des_block": "The function `xdr_des_block` takes an `XDR` pointer and a `des_block` pointer as input, and returns an `XDR` result indicating whether the block was successfully read. It uses the `xdr_opaque` function to read the block from the input stream.\n",
    "xdr_accepted_reply": "The `xdr_accepted_reply` function processes an XDR (eXternal Data Representation) stream containing an accepted reply message, verifying the message's authentication and extracting its status and results, returning TRUE if the message is valid or FALSE if there is an error.\n",
    "xdr_rejected_reply": "The `xdr_rejected_reply` function takes an XDR stream and a `struct rejected_reply` pointer, and it performs XDR decoding of the rejected reply message. Depending on the value of the `rj_stat` field of the `struct rejected_reply` structure, the function may perform additional XDR decoding of specific fields of the message.\n",
    "xdr_replymsg": "The `xdr_replymsg` function takes an XDR stream and a `struct rpc_msg` pointer, and it decodes the reply message from the stream, returning `TRUE` if the decoding is successful or `FALSE` otherwise.\n",
    "xdr_callhdr": "The function `xdr_callhdr` sets the direction of a RPC message to CALL and sets various version numbers, and returns the version number of the RPC protocol if the encoding is successful, or FALSE if there is an error.\n",
    "_seterr_reply": "The `_seterr_reply` function handles error replies from an RPC server, setting the status of the error and optionally filling in additional information about the error.\n",
    "__rpc_thread_svc_fdset": "The `rpc_thread_svc_fdset()` function returns a pointer to the `svc_fdset` structure or the `svc_fdset_s` structure depending on the value of the `tvp` variable, which is initialized by the `__rpc_thread_variables()` function.\n",
    "__rpc_thread_createerr": "The function `rpc_thread_createerr` creates and returns a structure containing error information for RPC thread creation.\n",
    "__rpc_thread_svc_pollfd": "The `rpc_thread_svc_pollfd()` function returns a pointer to the `pollfd` structure for the current RPC thread, either the global `svc_pollfd` structure or the per-thread `svc_pollfd_s` structure depending on the value of the `tvp` pointer.\n",
    "__rpc_thread_svc_max_pollfd": "The function `__rpc_thread_svc_max_pollfd` returns a pointer to the maximum poll descriptor structure for the current RPC thread, which is either the global `svc_max_pollfd` structure or the per-thread `svc_max_pollfd_s` structure depending on the value of the `tvp` variable.\n",
    "rtime": "The function rtime sends a request to a time server and returns the current time in seconds, using a socket and poll or connect/read to wait for a response.\n",
    "xprt_register": "The `xprt_register` function registers an XPRT pointer with the system, associating it with a socket. If there are no existing XPRT pointers registered, it also initializes the `svc_pollfd` array to poll for incoming connections.\n",
    "xprt_unregister": "The `xprt_unregister` function unregisters an SVCXPRT structure from the service discovery table, closing the associated socket and removing it from the poll set.\n",
    "svc_register": "The `svc_register` function registers an RPC service with the local binder service, associating a specific protocol with a particular program and version number. It also maps the service to a specific port and returns `TRUE` if successful, or `FALSE` if there is an error.\n",
    "svc_unregister": "The `svc_unregister` function unregisters a service callout from the local binder service. It finds the callout in the list of callouts for the specified program and version, and then removes it from the list and frees the memory associated with it.\n",
    "svc_sendreply": "The `svc_sendreply` function sends a reply to a remote procedure call (RPC) request, providing the results of the request in the `xdr_results` buffer at the specified `xdr_location`. The function sets the reply direction to REPLY, sets the reply status to MSG_ACCEPTED, and includes the verified reply data and results in the `rply` structure.\n",
    "svcerr_noproc": "The `svcerr_noproc` function sets up and sends a reply message to a client indicating that the server is not available to process the requested procedure, while using the existing verification data from the client's request.\n",
    "svcerr_decode": "The function `svcerr_decode` decodes a reply message from a remote procedure call (RPC) and sets the reply status to accepted with the specified verify value and garbage argument status.\n",
    "svcerr_systemerr": "The `svcerr_systemerr` function handles a system error response to an RPC request, setting the reply message to indicate an accepted response with a system error status, and sending the reply back to the client. The function takes a `SVCXPRT` pointer as input and uses it to set the reply message and send it back to the client.\n",
    "svcerr_auth": "The `svcerr_auth` function sets up and sends an RPC reply message to the client indicating an authentication error, with the specified `why` value.\n",
    "svcerr_weakauth": "The `svcerr_weakauth` function sets the `AUTH_TOOWEAK` error code and sends an error message to the client indicating that the authentication attempt was too weak.\n",
    "svcerr_noprog": "The function `svcerr_noprog` registers an SVCXPRT pointer and sends a reply to the client with a PROG_UNAVAIL status, indicating that the program is not available.\n",
    "svcerr_progvers": "The function `svcerr_progvers` registers an SVCXPRT *xprt and returns a reply message with the status PROG_MISMATCH, indicating that the program version is not supported.\n",
    "svc_getreq": "The `svc_getreq` function sets up a request for a service by initializing a file descriptor set with the request descriptor and then calling the `svc_getreqset` function to wait for the request. The `svc_getreq` function prepares the service to receive a request on the specified descriptor.\n",
    "svc_getreqset": "The function `svc_getreqset` retrieves the set of file descriptors that are ready for reading and calls the common function `svc_getreq_common` for each descriptor.\n",
    "svc_getreq_poll": "The `svc_getreq_poll` function polls the file descriptors in the `pfdp` array for input, and if any have input waiting, it calls the `svc_getreq_common` function to process the request. The function continues polling until it has processed all the file descriptors in the array or until it has reached the maximum number of file descriptors specified in `pollretval`.\n",
    "svc_getreq_common": "This function, `svc_getreq_common`, receives a file descriptor and calls the appropriate service program based on the message received from the client. It first authenticates the message and then matches the message with a registered service program, calling the program if a match is found.\n",
    "_authenticate": "The `authenticate` function sets up the authentication context for an RPC request and calls the appropriate authentication function based on the credential flavor provided. If the credential flavor is invalid or not supported, the function returns `AUTH_REJECTEDCRED`.\n",
    "svcraw_create": "The `svcraw_create` function initializes and returns a `struct svcraw_private_s` pointer, which represents the private data for an XDR stream, and sets up the stream's parameters and memory allocation.\n",
    "svc_exit": "The `svc_exit` function frees the memory allocated for the `svc_pollfd` structure and sets it to null, as well as resetting the `svc_max_pollfd` variable to 0.\n",
    "svc_run": "The `svc_run` function runs a service by repeatedly polling for incoming requests using the `poll` system call. It allocates memory for the poll descriptor set and loops until an interrupt or a successful poll operation, handling any errors that may occur.\n",
    "svctcp_create": "The `svctcp_create` function creates a new TCP rendezvous connection and returns a pointer to the `SVCXPRT` structure representing the connection. The function first creates a socket and binds it to a specific address and port, then listens for incoming connections.\n",
    "svcfd_create": "The `svcfd_create` function creates an XPRT (extended transport) handle for a given file descriptor (fd), specifying the send and receive buffer sizes (sendsize and recvsize, respectively).\n",
    "svcudp_bufcreate": "The `svcudp_bufcreate` function creates a UDP socket and binds it to a specific port, then allocates memory for an RPC buffer and an XDR decoder. It returns a pointer to an `SVCXPRT` structure, which represents the RPC connection.\n",
    "svcudp_create": "The `svcudp_create` function creates a UDP message buffer for a given socket.\n",
    "svcudp_enablecache": "The `svcudp_enablecache` function enables caching for the specified size in the `struct svcudp_data` structure, allocating memory for the cache and initializing it with the specified size and sparseness.\n",
    "svcunix_create": "The `svcunix_create` function creates a Unix domain socket and sets up the necessary structures to handle RPC requests. It returns a pointer to an `SVCXPRT` structure, which represents the socket and provides a set of functions for sending and receiving RPC messages.\n",
    "svcunixfd_create": "The `svcunixfd_create` function creates a new Unix socket and returns a file descriptor for the socket.\n",
    "authdes_getucred": "The `authdes_getucred` function retrieves the user and group credentials for a given netname, and returns the uid, gid, and group list if found in the cache, or 0 if not found. If the cache misses, it performs a lookup and stores the results in the cache for future fast access.\n",
    "xencrypt": "The `xencrypt` function encrypts a secret using the DES algorithm and the given password. It takes two arguments: a secret string and a password string, and returns 1 if the encryption is successful, or 0 if there is an error.\n",
    "xdecrypt": "The `xdecrypt` function decrypts a secret using the DES algorithm, using a password as the key. It takes two character arrays as input, `secret` and `passwd`, and returns a decrypted version of `secret` as a character array.\n",
    "xdr_free": "The `xdr_free` function frees an object pointed to by `objp` using the `xdrproc_t` procedure `proc`. It sets the `XDR_FREE` operation code and calls `proc` with the `x` object and `objp` as arguments.\n",
    "xdr_void": "This function returns `TRUE`.\n",
    "xdr_int": "The function xdr_int encodes and decodes an integer value in a stream using XDR format, depending on the size of the integer type (int, long, or short) and returns a boolean value indicating success.\n",
    "xdr_u_int": "The function xdr_u_int encodes or decodes a u_int value using XDR, with different behavior depending on the size of u_int and the operation being performed (encode, decode, or free).\n",
    "xdr_long": "The `xdr_long` function encodes and decodes long integers in XDR format, and returns `TRUE` if successful or `FALSE` if there is an error.\n",
    "xdr_u_long": "This function, xdr_u_long, is a part of the XDR (External Data Representation) system, and it handles the encoding and decoding of u_long values (which are 32-bit unsigned integers) in XDR streams. It takes an XDR stream and a pointer to a u_long value as input, and it returns a boolean value indicating whether the operation was successful.\n",
    "xdr_hyper": "The `xdr_hyper` function encodes and decodes a quadruple value in XDR format, handling both encoding and decoding operations as well as freeing the memory allocated for the value.\n",
    "xdr_u_hyper": "The function xdr_u_hyper encodes and decodes a u_quad_t value in XDR format, handling both encoding and decoding of the high and low 32-bit halves of the value.\n",
    "xdr_longlong_t": "The function `xdr_longlong_t` takes an `XDR` pointer and a `quad_t` pointer as input, and returns a value indicating whether the `quad_t` value was successfully read from the `XDR` stream.\n",
    "xdr_u_longlong_t": "The function `xdr_u_longlong_t` takes an `XDR` stream and a `u_quad_t` pointer as input, and writes a union of `u_long` and `u_quad` values to the stream.\n",
    "xdr_short": "The `xdr_short` function encodes and decodes short values using the XDR protocol, and returns a boolean value indicating success or failure.\n",
    "xdr_u_short": "The `xdr_u_short` function encodes or decodes a u_short value in XDR format, returning TRUE if successful or FALSE if there is an error.\n",
    "xdr_char": "The function `xdr_char` reads an unsigned char value from an XDR stream and stores it in a provided buffer, returning `TRUE` if the read was successful and `FALSE` otherwise.\n",
    "xdr_u_char": "The function `xdr_u_char` takes a pointer to a character and a pointer to an XDR stream, and it reads a single character from the input stream and stores it in the provided character pointer, returning `TRUE` if the read was successful and `FALSE` otherwise.\n",
    "xdr_bool": "The `xdr_bool` function encodes and decodes a boolean value using the XDR (External Data Representation) format, and returns `TRUE` if the operation was successful and `FALSE` otherwise.\n",
    "xdr_enum": "The function xdr_enum takes an XDR stream and an enum pointer as input, and it encodes or decodes the enum value using the appropriate size and representation for the system.\n",
    "xdr_opaque": "The function xdr_opaque handles the rounding of byte counts to full xdr units and performs XDR encoding or decoding operations as needed, depending on the value of xdrs->x_op.\n",
    "xdr_bytes": "The `xdr_bytes` function decodes or encodes a variable-length byte string using the XDR protocol, handling the length and actual bytes separately. It returns `TRUE` if successful, `FALSE` otherwise.\n",
    "xdr_netobj": "The `xdr_netobj` function serializes a `struct netobj` object to an XDR stream using the `xdr_bytes` function.\n",
    "xdr_union": "The `xdr_union` function takes an `XDR` pointer, an `enum` pointer, a `char*` pointer, a list of `struct xdr_discrim` values, and an optional default `xdrproc_t` value, and it searches for a matching `enum` value in the list and executes the corresponding `xdr` routine if found, otherwise it executes the default `xdr` routine if provided.\n",
    "xdr_string": "xdr_string is a function that handles the encoding and decoding of strings in XDR (External Data Representation) format. It takes a pointer to an XDR stream, a pointer to a character string, and a maximum size limit, and returns TRUE if the operation was successful, FALSE otherwise.\n",
    "xdr_wrapstring": "The `xdr_wrapstring` function takes an XDR stream and a string pointer as input, and returns TRUE if it successfully wraps the string in an XDR stream, and FALSE if it fails.\n",
    "xdr_array": "The function xdr_array takes an XDR stream, an array pointer, the number of elements, the maximum number of elements, the size of each element, and an XDR routine to handle each element, and it xdr's each element of the array, optionally allocating memory for the array if necessary, and returns TRUE if successful or FALSE if there is an error.\n",
    "xdr_vector": "The function `xdr_vector` takes an XDR stream, a base pointer, a count of elements, an element size, and an XDR procedure for each element, and it iterates over the elements, calling the XDR procedure for each one and advancing the base pointer by the element size for each successful call.\n",
    "xdr_float": "The `xdr_float` function is a XDR (External Data Representation) routine that encodes and decodes floating-point numbers in the IEEE 754 single-precision format, with support for VAX and non-VAX platforms.\n",
    "xdr_double": "The function xdr_double takes a pointer to a double value and an XDR stream, and performs encoding or decoding of the double value using VAX floating-point representation, with fallback to IEEE floating-point representation if necessary.\n",
    "xdr_int64_t": "The function xdr_int64_t handles encoding and decoding of integer64_t values using the XDR (External Data Representation) protocol. It takes an XDR stream and a pointer to an integer64_t value as input, and returns a boolean value indicating whether the operation was successful.\n",
    "xdr_quad_t": "The function `xdr_quad_t` reads an integer64 value from an XDR stream and stores it in a `quad_t` pointer.\n",
    "xdr_uint64_t": "The function xdr_uint64_t handles encoding and decoding of uint64_t values using XDR, with the ability to handle both big-endian and little-endian byte orders.\n",
    "xdr_u_quad_t": "The function `xdr_u_quad_t` takes an `XDR` pointer and a pointer to a `u_quad_t` value, and it serializes the `u_quad_t` value to an XDR stream.\n",
    "xdr_int32_t": "The function xdr_int32_t handles the encoding and decoding of 32-bit integers using the XDR protocol, depending on the current operation (encode, decode, or free), and returns a boolean value indicating success.\n",
    "xdr_uint32_t": "The function xdr_uint32_t handles encoding, decoding, and freeing of uint32_t values in XDR format, depending on the current operation (encode, decode, or free).\n",
    "xdr_int16_t": "This function, xdr_int16_t, is a utility function that handles the encoding and decoding of 16-bit integers in the XDR (External Data Representation) format. It takes an XDR stream and a pointer to an integer as input, and returns a boolean value indicating whether the operation was successful.\n",
    "xdr_uint16_t": "This function is an XDR (External Data Representation) function that handles encoding and decoding of a 16-bit unsigned integer (uint16_t) value. It takes an XDR stream and a pointer to the uint16_t value as input, and returns a boolean value indicating whether the operation was successful.\n",
    "xdr_int8_t": "The function xdr_int8_t handles the encoding and decoding of int8_t values in XDR (External Data Representation) format, depending on the operation (encode, decode, or free) and returns a boolean value indicating success or failure.\n",
    "xdr_uint8_t": "This function handles the encoding and decoding of uint8_t values using the XDR (External Data Representation) protocol, and it also frees the memory allocated for the value.\n",
    "xdrmem_create": "The `xdrmem_create' function sets up an XDR stream to read or write data from a memory address, specifying the operation (read or write) and the memory address and size. It also sets the XDR stream's private data and handy size.\n",
    "xdrrec_create": "The function xdrrec_create creates a new RECSTREAM structure and initializes it with the given send and receive sizes, TCP handle, read and write functions, and other parameters, and returns a pointer to the newly created structure.\n",
    "xdrrec_skiprecord": "The `xdrrec_skiprecord` function skips over any remaining bytes in the current record fragment and sets the `last_frag` flag to `FALSE` if the fragment is not complete.\n",
    "xdrrec_eof": "The function `xdrrec_eof` checks if the current input stream has reached the end of the record, and returns `TRUE` if it has, or `FALSE` if there are still more bytes to be read.\n",
    "xdrrec_endofrecord": "The `xdrrec_endofrecord` function checks if the current record fragment should be sent immediately or if it should wait for more data to be available, and if it should send the fragment now, it flushes the output buffer and updates the fragment header.\n",
    "xdr_reference": "The `xdr_reference` function manages the reference count of a memory block pointed to by a pointer `pp`, allocating and freeing memory as needed, and calling an xdr routine `proc` to handle the object pointed to.\n",
    "xdr_pointer": "The `xdr_pointer` function takes an XDR stream, a pointer to a char* variable, an object size, and an XDR procedure, and it returns TRUE if the object size is zero and the pointer is NULL, or it returns TRUE if the object size is non-zero and the XDR procedure successfully serializes the object at the given pointer.\n",
    "xdr_sizeof": "xdr_sizeof takes a function pointer and a void pointer as input, and returns the size of the data encoded by the function using XDR.\n",
    "xdrstdio_create": "The `xdrstdio_create' function sets up an XDR stream for reading or writing to a file, specifying the operation to be performed and storing the file pointer and other parameters in the XDR stream structure.\n",
    "feclearexcept": "The function `feclearexcept` clears selected floating-point exceptions in the FPU environment, using a combination of assembly instructions to access and modify the exception mask. The function takes an integer parameter `excepts` representing the exceptions to clear, and returns successfully if the clearing operation is completed without error.\n",
    "fegetexceptflag": "The function `fegetexceptflag` retrieves the current exceptions for the x87 FPU and SSE unit, filters them based on the specified `excepts` mask, and returns the resulting flags in the `flagp` parameter.\n",
    "fesetexceptflag": "The function sets or clears exception flags in both the x87 FPU and the SSE unit, taking into account the current environment and the flags that can be set or cleared in each unit.\n",
    "__libc_ifunc_impl_list": "",
    "__isnan": "The `isnan()` function returns a boolean indicating whether the input `double` `x` is a NaN (Not a Number).\n",
    "link": "The function `link` retrieves the current unwind link information and returns it if it exists, otherwise it fatal error if the `LIBGCC_S_SO` is not installed.\n",
    "__signbit": "The `__signbit` function returns a boolean indicating whether the absolute value of the input `double` `x` is negative, positive, or zero.\n",
    "pthread_attr_getguardsize": "The function `pthread_attr_getguardsize` retrieves the guard size of a thread attribute object and stores it in the provided `size_t` variable.\n",
    "pthread_attr_setguardsize": "The `pthread_attr_setguardsize` function sets the guard size of a pthread attribute object to the specified size.\n",
    "pthread_barrier_destroy": "The `pthread_barrier_destroy()` function destroys a barrier created with `pthread_barrier_create()`.\n",
    "pthread_barrier_init": "The `pthread_barrier_init` function initializes a barrier object with the specified attributes and count of threads. It sets up the barrier's lock and pending count, and optionally copies the specified attributes to the barrier object.\n",
    "pthread_barrier_wait": "The `pthread_barrier_wait` function waits for all threads to reach a barrier, adding the current thread to a list of waiters if necessary. Once all threads have reached the barrier, the function unlocks the barrier and wakes up all waiters in a serialized manner.\n",
    "pthread_barrierattr_destroy": "The function `pthread_barrierattr_destroy` destroys a barrier attribute object.\n",
    "pthread_barrierattr_getpshared": "The `pthread_barrierattr_getpshared()` function retrieves the shared value of a barrier attribute and stores it in the `pshared` integer pointer.\n",
    "pthread_barrierattr_init": "The function `pthread_barrierattr_init` initializes a `pthread_barrierattr_t` structure with the default attributes.\n",
    "pthread_barrierattr_setpshared": "The `pthread_barrierattr_setpshared()` function sets the shared/private status of a barrier attribute, allowing the barrier to be shared among all processes in a multi-process system.\n",
    "pthread_condattr_getclock": "The `pthread_condattr_getclock()` function retrieves the clock ID associated with a `pthread_condattr_t` object.\n",
    "pthread_condattr_getpshared": "The `pthread_condattr_getpshared()` function retrieves the shared status of a condition variable attribute. It returns the shared status as an integer, and returns 0 on success.\n",
    "pthread_condattr_setclock": "The function sets the clock for a condition variable, allowing only a few clocks, including CLOCK_REALTIME and CLOCK_MONOTONIC if the kernel supports it, and returns 0 if the clock is set successfully or EINVAL if the clock is not available.\n",
    "pthread_condattr_setpshared": "The `pthread_condattr_setpshared()` function sets the shared/private status of a condition attribute, allowing the condition to be shared between processes or kept private to the current process.\n",
    "pthread_getconcurrency": "The `pthread_getconcurrency()` function returns the current concurrency level of the thread.\n",
    "pthread_getcpuclockid": "The `pthread_getcpuclockid` function returns the CPU clock ID associated with the specified thread, returning 0 if the feature is supported and ENOSYS if it is not.\n",
    "__pthread_getspecific": "The `pthread_getspecific` function retrieves the value associated with a specific key for the current thread, returning the value if it exists, or `NULL` if the key is invalid or not found.\n",
    "__pthread_key_create": "The `pthread_key_create` function creates a new key in the thread-local key cache, and associates the given destructor function with the key. If there are no available slots in the cache, the function resizes the cache and allocates a new slot.\n",
    "__pthread_once": "The `pthread_once` function initializes a one-time execution routine, `init_routine`, and ensures that it is executed only once per thread. The function uses a spin lock and barrier to ensure atomicity and avoid race conditions.\n",
    "__pthread_rwlock_rdlock": "The `pthread_rwlock_rdlock` function acquires a read lock on a pthread rwlock, blocking until the lock is available if necessary, and returning immediately if the lock is already available.\n",
    "pthread_rwlock_tryrdlock": "The `pthread_rwlock_tryrdlock` function attempts to acquire a read lock on a pthread rwlock, and returns immediately with a value of 0 if the lock is available, or the error code EBUSY if the lock is currently held by a writer or is busy.\n",
    "pthread_rwlock_trywrlock": "The `pthread_rwlock_trywrlock` function tries to acquire a write lock on a resource, waiting until the lock is available if necessary. If the lock is successfully acquired, the function returns 0; if the lock is busy, the function returns EBUSY.\n",
    "__pthread_rwlock_unlock": "This function unlocks a pthread rwlock, releasing it for use by other threads. It first checks if there are any waiters, and if so, wakes them up and transfers ownership of the lock to them. If there are no waiters, it simply unlocks the lock.\n",
    "__pthread_rwlock_wrlock": "The `pthread_rwlock_wrlock` function acquires a write lock on the specified read-write lock, blocking until the lock is available if necessary.\n",
    "pthread_rwlockattr_destroy": "The `pthread_rwlockattr_destroy()` function destroys a `pthread_rwlockattr_t` object, releasing any resources it holds.\n",
    "pthread_rwlockattr_getpshared": "The function `pthread_rwlockattr_getpshared()` retrieves the shared status of a rwlock attribute object and stores it in the `pshared` integer pointer.\n",
    "pthread_rwlockattr_init": "The `pthread_rwlockattr_init` function initializes a `pthread_rwlockattr_t` structure with the default attributes for a read-write lock.\n",
    "pthread_rwlockattr_setpshared": "The `pthread_rwlockattr_setpshared` function sets the sharedness of a rwlock attribute to either private or shared, depending on the value passed in `pshared`.\n",
    "pthread_setconcurrency": "The `pthread_setconcurrency` function sets the current concurrency level of the thread to the specified value, and returns 0 if successful or `EINVAL` if the specified value is negative.\n",
    "pthread_setschedprio": "The `pthread_setschedprio` function sets the scheduling priority of a thread, but it always returns `ENOSYS` (not supported).\n",
    "__pthread_setspecific": "The `pthread_setspecific` function sets a specific value for a thread-local variable in the current thread. It takes a `pthread_key_t` key and a `const void*` value as input, and stores the value in the thread-specific storage area associated with the given key.\n",
    "init_module": "The `init_module` function initializes the timer and thread management systems by creating and initializing lists for free timers and threads, and setting up a signal thread to handle timer expirations. It also initializes all timers and threads to be free and available for use.\n",
    "strlen": "The function `strlen` takes a null-terminated string `str` as input and returns the length of the string. It does this by searching forward from the beginning of the string until it finds a zero byte, using the `repnz` instruction.\n",
    "__isinfl": "The `attribute_hidden `__isinfl function checks if a double-precision floating-point number `x` is an infinite number.\n",
    "__finite": "The function `__finite(double x)` checks whether the double-precision floating-point number `x` is finite (neither infinite nor NaN) and returns `true` if it is, and `false` otherwise.\n",
    "__fpclassify": "The function `__fpclassify` takes a double value `x` and returns a categorization of its floating-point class, either `FP_NORMAL`, `FP_ZERO`, `FP_SUBNORMAL`, `FP_INFINITE`, or `FP_NAN`, based on the value of the integer flags set by the `_FCLASS` function.\n",
    "__isinf": "The `isinf` function determines if a double-precision floating-point number `x` is infinite (either positive or negative infinity) based on its floating-point class, returning 1 if `x` is infinite and 0 otherwise.\n",
    "__issignaling": "The `issignaling` function takes a double `x` as input and returns a boolean indicating whether `x` is a signaling NaN (not a quiet NaN) based on the value of the `_FCLASS` bitfield.\n",
    "__fpclassifyf": "The `fpclassifyf` function classifies a floating-point number `x` into one of five categories: normal, zero, subnormal, infinite, or NaN. It returns a corresponding enumeration value (FP_NORMAL, FP_ZERO, FP_SUBNORMAL, FP_INFINITE, or FP_NAN) based on the value of `x`.\n",
    "__isinff": "The `isinff` function determines whether a floating-point number is infinite or not, based on its class. It returns 1 if the number is infinite, and 0 otherwise.\n",
    "__isnanf": "The `isnanf` function returns a boolean indicating whether the input `float` `x` is a NaN (Not a Number).\n",
    "__issignalingf": "The `issignalingf` function checks if a floating-point number `x` is a signaling NaN (NaN with a signaling bit set). It returns `true` if the number has a signaling bit set, and `false` otherwise.\n",
    "__signbitf": "The function `__signbitf(float x)` returns a boolean value indicating whether the floating-point number `x` has a negative sign.\n",
    "__finitel": "The `attribute_hidden `__finitel function takes a double `x` as input and returns a boolean indicating whether `x` is a finite number.\n",
    "__fpclassifyl": "The `fpclassifyl` function classifies a long double value as normal, subnormal, zero, infinity, or NaN based on its exponent and mantissa. It returns an integer value indicating the classification, with FP_NORMAL for normal values, FP_SUBNORMAL for subnormal values, FP_ZERO for zero values, FP_INFINITE for infinity values, and FP_NAN for NaN values.\n",
    "__isnanl": "The function `isnanl` takes a long double argument `x` and returns an integer indicating whether `x` is a pseudo-normal number (i.e., the exponent is non-zero and the top bit of the significand is not set). The function computes the exponent and mantissa of `x` using bitwise operations and then checks for pseudo-normality using a series of bitwise AND and OR operations.\n",
    "__issignalingl": "The function `issignalingl` takes a long double argument `x` and returns an integer indicating whether `x` is a signaling NaN (NaN with a non-zero high-order word). The function first extracts the exponent and high and low words of `x` and then checks for the presence of a signaling NaN using a series of bitwise operations.\n",
    "__signbitl": "The function returns a boolean value indicating whether the sign bit of the input double value `x` is set.\n",
    "__iscanonicall": "The function `iscanonicall` takes a long double `x` as input and returns a boolean value indicating whether the high bit of the mantissa is set or not, based on the value of the exponent.\n",
    "acosl": "The `acosl` function takes a double `x` as input and returns the arccosine of `x`.\n",
    "acoshl": "The `acoshl` function takes a double `x` as input and returns its inverse hyperbolic sine (inverse hyperbolic cosine) using the `acosh` function.\n",
    "asinl": "The `asinl` function takes a double `x` as input and returns the arcsine (inverse sine) of `x`.\n",
    "asinhl": "The `asinhl` function takes a double `x` as input and returns the hyperbolic sine of `x`.\n",
    "__asprintf": "The function `__asprintf` takes a pointer to a string and a format string as input, and it uses variadic arguments to fill in the string with the specified format. The function returns a flag indicating whether the string was successfully filled in or not.\n",
    "__asprintf_chk": "The function `__asprintf_chk` is a variant of the `vasprintf` function that checks for errors and returns a non-zero value if there is an error. It takes a pointer to a string, an integer flag, and a format string as input, and uses a `va_list` to parse the format string and store the formatted output in the string.\n",
    "atanl": "The `atanl` function calculates the angle of a number `x` in radians, returning the result as an angle in radians.\n",
    "atan2l": "The `atan2l` function calculates the angle in radians between the positive x-axis and a point (x,y) in the complex plane.\n",
    "atanhl": "The `atanhl` function takes a double `x` as input and returns the hyperbolic arctangent of `x`.\n",
    "cabsl": "The `cabsl` function calculates the absolute value of a complex number `x` and returns the result as a double complex value.\n",
    "cacosl": "The function `cacosl` takes a complex double `x` as input and returns the cosine of `x` using the `cacos` function.\n",
    "cacoshl": "The function `cacoshl` takes a complex double `x` as input and returns the hyperbolic cosine of `x`.\n",
    "canonicalizel": "The `canonicalizel` function takes two double pointers `cx` and `x` as input and returns the canonicalized version of the input vector `x` using the given `cx` vector as a reference.\n",
    "cargl": "The function `cargl` takes a complex double `x` as input and returns the complex argument `carg(x)`.\n",
    "casinl": "The function `casinl` takes a complex double `x` as input and returns the complex inverse cosine of `x`.\n",
    "casinhl": "The function `casinhl` takes a complex double argument `x` and returns the hyperbolic cosine of `x`.\n",
    "catanl": "The function `catanl` takes a complex double `x` as input and returns the catan function applied to `x`.\n",
    "catanhl": "The function `catanhl` takes a complex double `x` as input and returns the hyperbolic cotangent of `x`.\n",
    "cbrtl": "The `cbrtl` function takes a double `x` and returns its cube root.\n",
    "ccosl": "The function `ccosl` takes a complex double `x` as input and returns the complex cosine of `x`.\n",
    "ccoshl": "The `ccoshl` function takes a complex double `x` as input and returns the hyperbolic cosine of `x`.\n",
    "ceill": "The `ceill` function takes a double `x` as input and returns the ceiling of `x`, which is the smallest integer greater than or equal to `x`. In other words, it rounds `x` up to the nearest integer.\n",
    "cexpl": "The `cexpl` function computes the complex exponential of a given complex number `x`, returning the result as a complex number.\n",
    "cimagl": "The `cimagl` function returns the imaginary part of a complex number.\n",
    "clogl": "The function `clogl` takes a complex double `x` as input and returns the complex logarithm of `x`.\n",
    "clog10l": "The function `clog10l` takes a complex double `x` as input and returns the complex logarithm of `x` to the base 10.\n",
    "conjl": "The function `conjl` takes a complex double `x` as input and returns the complex conjugate of `x`.\n",
    "copysignl": "The `copysignl` function copies the sign of one double value to another, returning the result.\n",
    "cosl": "The `attribute_hidden` function, with the name `cosl`, takes a `double` argument `x` and returns the cosine of `x`.\n",
    "coshl": "The `coshl` function takes a double `x` as input and returns the hyperbolic cosine of `x`.\n",
    "cpowl": "The function cpowl takes two complex numbers as input and returns their complex power.\n",
    "cprojl": "The function `cprojl` takes a complex double `x` as input and returns the result of calling the function `cproj` with `x` as its argument.\n",
    "creall": "The function `attribute_hidden creall(double _Complex x)` returns the real part of the complex number `x`.\n",
    "csinl": "The function `csinl` takes a complex double `x` as input and returns the complex sine of `x`.\n",
    "csinhl": "The function `csinhl` takes a complex double `x` as input and returns the complex hyperbolic sine of `x`.\n",
    "csqrtl": "The function csqrtl takes a complex double argument x and returns the complex square root of x.\n",
    "ctanl": "The function `ctanl` takes a complex double `x` as input and returns the hyperbolic cotangent of `x`.\n",
    "ctanhl": "The function `ctanhl` takes a complex double `x` as input and returns the hyperbolic tangent of `x`.\n",
    "daddl": "The `daddl` function computes the sum of two double-precision floating-point numbers `x` and `y`, returning the result as a double precision floating-point number.\n",
    "ddivl": "The `ddivl` function takes two double arguments `x` and `y` and returns the result of dividing `x` by `y` using the `__nldbl_ddivl` function.\n",
    "dfmal": "The `dfmal` function computes the floating-point multiplication of three double arguments `x`, `y`, and `z` using the fma (fused multiply-add) operation and returns the result.\n",
    "dmull": "The `dmull` function takes two double arguments `x` and `y` and returns their multiplication result using the intrinsic function `__nldbl_dmull`.\n",
    "dprintf": "The `dprintf` function prints a message to the debug log using the `va_list` argument format, returning `true` if the message was written successfully and `false` if an error occurred.\n",
    "dsqrtl": "The `dsqrtl` function calculates the square root of a double precision floating-point number `x`.\n",
    "dsubl": "The `dsubl` function takes two double arguments `x` and `y` and returns the result of the double-precision floating-point subtraction of `x` from `y` using the `_nldbl_dsubl` internal function.\n",
    "erfl": "The `erfl` function takes a double `x` as input and returns the complementary error function (`erf`) of `x`.\n",
    "erfcl": "The `attribute_hidden` function returns the complementary error function (erfc) of a given double value `x`.\n",
    "expl": "The `attribute_hidden` function takes a `double` `x` and returns its exponential value.\n",
    "exp10l": "The `exp10l` function takes a double `x` as input and returns its exponential function with base 10.\n",
    "exp2l": "The `exp2l` function takes a double `x` as input and returns the exponential of `x` with the result rounded to the nearest integer.\n",
    "expm1l": "The function `expm1l` takes a double `x` and returns the exponential of `x` minus 1.\n",
    "fabsl": "The `fabsl` function takes a `double` argument `x` and returns the absolute value of `x` using the `fabs` function. In other words, it returns the magnitude of `x` without considering its sign.\n",
    "faddl": "The `faddl` function takes two double arguments `x` and `y` and returns the result of adding them together using the `fadd` function. In other words, `faddl` is a wrapper function that simply forwards its arguments to `fadd` and returns the result.\n",
    "fdiml": "The `fdiml` function takes two double arguments `x` and `y`, and returns the distance between `x` and `y` using the `fdim` function.\n",
    "fdivl": "The `fdivl` function takes two double arguments `x` and `y` and returns the result of dividing `x` by `y`, using the floating-point division operator `fdiv`.\n",
    "ffmal": "The function `attribute_hidden::ffmal(double x, double y, double z)` calculates the fast Fourier transform of three double values `x`, `y`, and `z` using the `ffma` function.\n",
    "floorl": "The `floorl` function takes a double `x` as input and returns the floor of `x`, which rounds down `x` to the nearest integer.\n",
    "fmal": "The `fmal` function takes three double arguments `x`, `y`, and `z` and returns the result of the floating-point multiplication of `x` and `y`, then adds `z` to the result.\n",
    "fmaxl": "The `fmaxl` function returns the larger of two double values, `x` and `y`.\n",
    "fmaximuml": "The function `fmaximuml` takes two double arguments `x` and `y` and returns the larger of the two values using the `fmaximum` function.\n",
    "fmaximum_magl": "The `fmaximum_magl` function takes two double arguments `x` and `y` and returns the maximum magnitude of the two values.\n",
    "fmaximum_mag_numl": "The function `fmaximum_mag_numl` takes two double arguments `x` and `y` and returns the maximum magnitude of the two numbers.\n",
    "fmaximum_numl": "The function `fmaximum_numl` takes two double arguments `x` and `y` and returns the maximum value between `x` and `y` using the `fmaximum` function.\n",
    "fmaxmagl": "The `fmaxmagl` function takes two double arguments `x` and `y` and returns the larger of the two values using the `fmaxmag` function.\n",
    "fminl": "The function `fminl` takes two double arguments `x` and `y` and returns the minimum of the two values using the `fmin` function.\n",
    "fminimuml": "The `fminimuml` function takes two double arguments `x` and `y` and returns the smaller of the two values using the `fminimum` function.\n",
    "fminimum_magl": "The `fminimum_magl` function takes two double arguments `x` and `y`, and returns the minimum of the two values using the `fminimum_mag` function.\n",
    "fminimum_mag_numl": "The function `fminimum_mag_numl` takes two double arguments `x` and `y` and returns the minimum magnitude of the two numbers.\n",
    "fminimum_numl": "The `fminimum_numl` function takes two double arguments `x` and `y` and returns the minimum of the two numbers using the `fminimum` function.\n",
    "fminmagl": "The `fminmagl` function takes two double arguments `x` and `y`, and returns the minimum of the two values using the `fminmag` function.\n",
    "fmodl": "The `fmodl` function takes two double arguments `x` and `y` and returns the remainder of `x` divided by `y` using the `fmod` function.\n",
    "fmull": "The `attribute_hidden fmull(double x, double y)` function performs a multiplication of two double values `x` and `y` and returns the result.\n",
    "fprintf": "The `fprintf` function prints a formatted string to a file stream, using a variable argument list to specify the values to be printed.\n",
    "__fprintf_chk": "The `attribute_hidden __fprintf_chk` function prints a formatted string to a file stream, using a variable argument list and checking for errors.\n",
    "frexpl": "The `frexpl` function takes a double `x` and an integer pointer `exponent` as input, and returns the floating-point exponent and mantissa of `x` using the `frexp` function.\n",
    "fromfpl": "The `attribute_hidden` function takes a double value `x`, an integer `round`, and an unsigned integer `width` as input and returns the result of rounding `x` to the nearest integer, with the rounding done using the `fromfp` function and the result returned as an unsigned integer with the specified width.\n",
    "fromfpxl": "The `attribute_hidden` function takes a double `x`, an integer `round`, and an unsigned integer `width` as input and returns the result of calling `fromfpx` with those arguments.\n",
    "fscanf": "The `attribute_hidden` function reads data from a file using the `vfscanf` function, with the format string specified in the `fmt` parameter and any additional arguments passed in the `arg` variable.\n",
    "fsqrtl": "The `fsqrtl` function takes a double `x` as input and returns the square root of `x` using the `fsqrt` function.\n",
    "fsubl": "The function `attribute_hidden fsubl(double x, double y)` returns the result of calling `fsub(x, y)` with the same arguments.\n",
    "fwprintf": "The `fwprintf` function writes a formatted string to a file stream using the `vfwprintf` function with a variable argument list.\n",
    "fwscanf": "The `fwscanf` function scans a wide-character format string and stores the converted values in a variable argument list, returning the number of successful conversions.\n",
    "gammal": "The function `attribute_hidden` has a single method `gammal` that takes a double `x` and returns the gamma function of `x`.\n",
    "getpayloadl": "The `attribute_hidden` function returns the value of the `getpayload` function, which takes a double pointer as input (`const double *x`).\n",
    "hypotl": "The `attribute_hidden` function calculates the hypotenuse (or length) of a right triangle given two sides (x and y).\n",
    "ilogbl": "The `ilogbl` function takes a double `x` as input and returns its inverse logarithm base 2 (ilogb2) result.\n",
    "_IO_vfscanf": "The function `_IO_vfscanf` reads data from a file pointer `s` using a format string `fmt` and a variable argument list `ap`, and returns the number of items successfully scanned. It is a hidden attribute of the `_IO_vfscanf` function.\n",
    "__isoc23_fwscanf": "The `isoc23_fwscanf` function scans input from a file using a format string and returns the number of successful scans.\n",
    "__isoc23_swscanf": "The `isoc23_swscanf` function reads a string from a file or buffer into a variable number of arguments using a format string, and returns the number of successful matches.\n",
    "__isoc23_vfwscanf": "The `isoc23_vfwscanf` function scans a formatted input from a file stream using the ISO C99 and ISO 23 standards, with support for binary and character-based input.\n",
    "__isoc23_vswscanf": "The `isoc23_vswscanf` function reads a wide string from a file and performs variable-width scanning using the `vfwscanf` function with the `SCANF_ISOC99_A` and `SCANF_ISOC23_BIN_CST` flags.\n",
    "__isoc23_vwscanf": "The `isoc23_vwscanf` function scans input from standard input using a wide character format string and a variable argument list, using the ISO C99 and ISO C23 binaries.\n",
    "__isoc23_wscanf": "The `isoc23_wscanf` function scans input from `stdin` according to a wide character format string using the ISO C99 and ISO C23 binaries conventions, and returns the number of successful scans.\n",
    "__isoc99_fwscanf": "The `isoc99_fwscanf` function scans input from a file using a format string and variable arguments, returning the number of successful scans.\n",
    "__isoc99_swscanf": "The `isoc99_swscanf` function reads a wide string from a file or buffer into a variable number of arguments, using the ISO C99 `vfwscanf` format specifier.\n",
    "__isoc99_vfwscanf": "The `isoc99_vfwscanf` function scans input from a file stream using a format string and a variable argument list, using the ISO C99 `vfwscanf` function with the `SCANF_ISOC99_A` flag.\n",
    "__isoc99_vswscanf": "The `isoc99_vswscanf` function reads a wide string from a file and performs variable-width scanning using the `vfwscanf` function with ISO C99 syntax.\n",
    "__isoc99_vwscanf": "The `isoc99_vwscanf` function scans a formatted input from standard input using the ISO C99 `vfwscanf` function with the specified format string and argument list.\n",
    "__isoc99_wscanf": "The `isoc99_wscanf` function reads input from standard input and parses it according to a wide character format string using the ISO C99 `vfwscanf` function, returning the number of successful conversions.\n",
    "j0l": "The function `attribute_hidden j0l(double x)` returns the value of the Bessel function of the first kind, J0(x).\n",
    "j1l": "The function `attribute_hidden j1l(double x)` simply calls the function `j1(x)` and returns its result, without any additional processing or modification.\n",
    "jnl": "The function `jnl` takes an integer `n` and a double `x`, and returns the result of the `jn` function called with `n` and `x`.\n",
    "ldexpl": "The `ldexpl` function takes a double `x` and an integer `exponent`, and returns the value of `x` with the specified `exponent` applied to it, using the `ldexp` function. In other words, it performs a left shift of `x` by `exponent` bits.\n",
    "lgammal": "The `lgammal` function calculates the logarithm of the gamma function, which is used to extend the factorial function to real negative values. It takes a single double argument `x` and returns the logarithm of the gamma function evaluated at `x`.\n",
    "lgammal_r": "The `lgammal_r` function computes the inverse of the logarithm of a positive real number `x` with the correct sign, returning the result in the `signgamp` integer pointer. It does this by calling the `lgamma_r` function and passing the result to the `signgamp` pointer.\n",
    "llogbl": "This function calculates the binary logarithm of a double value `x`. It simply returns the result of `llogb(x)`, which is a more efficient implementation of the binary logarithm for double values.\n",
    "llrintl": "The `llrintl` function takes a `double` argument `x` and returns the nearest integer value of `x` using the `llrint` function.\n",
    "llroundl": "The function `llroundl` rounds a double value `x` to the nearest integer, returning the rounded value.\n",
    "logl": "The function `logl` takes a double `x` as input and returns the logarithm of `x`.\n",
    "log10l": "The `log10l` function takes a double `x` as input and returns the logarithm of `x` to the base 10.\n",
    "log1pl": "The `log1pl` function takes a double `x` as input and returns the logarithm of 1 plus `x`.\n",
    "log2l": "The `log2l` function takes a double `x` as input and returns the logarithm of `x` to the base 2.\n",
    "logbl": "The `logbl` function takes a double `x` as input and returns its logarithm to the base `e`.\n",
    "lrintl": "The `lrintl` function takes a double `x` as input and returns the integer part of `x` without rounding up or down.\n",
    "lroundl": "The `lroundl` function rounds a double value `x` to the nearest integer, returning the rounded value.\n",
    "modfl": "The `attribute_hidden modfl(double x, double *iptr)` function calculates the modulus and fractional parts of the input `x` and stores the results in the pointers provided in `iptr`.\n",
    "nanl": "The `nanl` function returns a Not a Number (NaN) object with the specified tag.\n",
    "nearbyintl": "The `nearbyintl` function takes a `double` parameter `x` and returns its nearby integer value using the `nearbyint` function.\n",
    "nextafterl": "The `nextafterl` function takes two double arguments `x` and `y`, and returns the next floating-point number after `x` in the direction of `y`.\n",
    "nextdownl": "The function `attribute_hidden nextdownl(double x)` returns the result of calling the function `nextdown(x)` with the input `x`.\n",
    "nexttoward": "The `nexttoward` function takes two double arguments `x` and `y`, and returns the next floating-point number after `x` in the direction of `y`.\n",
    "nexttowardf": "The `nexttowardf` function takes a float `x` and a double `y`, and returns the next floating-point number toward `y` from `x`.\n",
    "nextupl": "The `attribute_hidden` function returns the result of calling the `nextup` function with the input `x`. The `nextup` function takes a `double` input and returns a result of the same type.\n",
    "obstack_printf": "The `obstack_printf` function prints a formatted string to an obstack using `vprintf`.\n",
    "obstack_vprintf": "The `obstack_vprintf` function prints a formatted string to an obstack using `va_list` arguments.\n",
    "powl": "The `powl` function takes two double arguments `x` and `y`, and returns the value of `pow(x, y)`, which raises `x` to the power of `y`.\n",
    "printf": "The `attribute_hidden` function is a variant of the `printf` function that uses the `va_list` macro to print a format string and its arguments to the standard output. It returns a value indicating whether the printing operation was successful.\n",
    "__printf_chk": "The `__printf_chk` function prints a formatted string to the standard output, checking for errors and returning a flag indicating whether the print operation was successful.\n",
    "__printf_fp": "The function `__printf_fp` is a wrapper for the `nldbl___printf_fp` function, which is a part of the `printf` family of functions. It takes a `FILE *`, `const struct printf_info *`, and `const void *const *` arguments and returns the result of calling `nldbl___printf_fp` with the same arguments.\n",
    "printf_size": "The `printf_size` function calculates the size of the output of a `printf` statement, given a file pointer, `struct printf_info` structure, and a set of arguments.\n",
    "qecvt": "The `qecvt` function converts a double value to a string of a specified number of digits, using a specified decimal point and sign characters, and returns the resulting string.\n",
    "qecvt_r": "The `qecvt_r` function converts a double value to a string of a specified number of digits, using a specified base and storing the result in a buffer. It takes in input the double value, the number of digits to be converted, and pointers to store the converted string and the sign of the value.\n",
    "qfcvt": "The `qfcvt` function converts a double value to a string of a specified number of digits, and returns the resulting string.\n",
    "qfcvt_r": "The `qfcvt_r` function converts a double value to a string of a specified number of digits, with the option to include a sign and a decimal point, and stores the result in a buffer.\n",
    "qgcvt": "The function `qgcvt` converts a double value to a string of a specified number of digits, using the `gcvt` function.\n",
    "remainderl": "The `remainderl` function takes two double arguments `x` and `y` and returns the remainder of `x` divided by `y`.\n",
    "remquol": "The `remquol` function takes three double arguments `x`, `y`, and `quo`, and returns the result of the remainder operation `remquo` between `x` and `y`, with the remainder stored in `quo`.\n",
    "rintl": "The `attribute_hidden rintl(double x)` function takes a double `x` as input and returns the rounded integer value of `x` using the `rint()` function.\n",
    "roundl": "The `roundl` function rounds a double value `x` to the nearest integer.\n",
    "roundevenl": "The `roundevenl` function rounds a double value `x` to the nearest even integer.\n",
    "scalbl": "The `attribute_hidden` function returns the result of scaling a double value `x` by a factor of `n`, which is a double value as well.\n",
    "scalblnl": "The `attribute_hidden scalblnl(double x, long int n)` function calculates the scaled binary logarithm of the input `x` with `n` bits.\n",
    "scalbnl": "The `scalbnl` function takes a double `x` and an integer `n`, and returns the scaled binary representation of `x` with `n` bits.\n",
    "scanf": "The `attribute_hidden` function scans input from `stdin` using the `vfscanf` function with the specified format string and arguments, and returns `1` if the scan is successful or `0` if an error occurs.\n",
    "setpayloadl": "The `attribute_hidden` function sets the payload of a double pointer `x` to a given `double` value `payload`.\n",
    "setpayloadsigl": "The `setpayloadsigl` function sets the payload signature of a double pointer `x` to a given double value `payload`.\n",
    "significandl": "The `significandl` function takes a `double` argument `x` and returns the significand (mantissa) of `x`.\n",
    "sinl": "The `sinl` function takes a double `x` as input and returns the sine of `x`.\n",
    "sincosl": "The function `sincosl` takes a double `x` and returns the sine and cosine of `x` in separate double pointers `sinx` and `cosx`.\n",
    "sinhl": "The `sinhl` function takes a double `x` as input and returns the hyperbolic sine of `x`.\n",
    "snprintf": "The `snprintf` function formats a string using a variable list of arguments and returns the number of characters written, with an optional maximum length limit.\n",
    "__snprintf_chk": "The `attribute_hidden `__snprintf_chk function is a variadic function that formats a string using the `vsnprintf` function, with additional error checking and handling of the `maxlen` parameter. It takes a `char *` pointer to the buffer where the formatted string will be stored, a `size_t` parameter specifying the maximum length of the buffer, and several other parameters specifying the formatting options and the format string to use.\n",
    "sprintf": "The function `attribute_hidden` is a variant of the `sprintf` function that takes a variable number of arguments and returns a value indicating whether the formatting was successful.\n",
    "__sprintf_chk": "The `attribute_hidden __sprintf_chk` function formats a string using the `vsprintf` function and returns a flag indicating whether the formatting was successful.\n",
    "sqrtl": "The `sqrtl` function takes a double `x` as input and returns the square root of `x`.\n",
    "sscanf": "The `attribute_hidden` function uses `va_list` and `va_end` to parse a string `s` using the format `fmt`, and returns `done` indicating whether the parsing was successful.\n",
    "strfmon": "The `strfmon` function formats a string using the specified format and arguments, and returns the number of characters written to the string. It uses the `__nldbl___vstrfmon` function to perform the formatting and returns the result.\n",
    "__strfmon_l": "The `__strfmon_l` function formats a double value using a specified format and locale, and returns the number of characters written.\n",
    "strfroml": "The `strfroml` function converts a long double value to a string using the specified format and stores the result in the given destination buffer.\n",
    "strtold": "The `strtold` function converts a string to a double value, returning the converted value and storing the input string pointer in the `endptr` parameter.\n",
    "__strtold_l": "The `attribute_hidden __strtold_l` function converts a string to a long double value using the `strtod_l` function and returns the result.\n",
    "__strtold_internal": "The `strtold_internal` function converts a string to a double value using the `strtod` internal function, and returns the result.\n",
    "swprintf": "The `swprintf` function writes a formatted string to a buffer, using a variable number of arguments.\n",
    "swscanf": "The `swscanf` function scans a wide string `s` using a format string `fmt` and fills in variables specified in the format string using the `va_list` `arg`, returning the number of successful scans.\n",
    "syslog": "The `attribute_hidden` function uses `va_list` to call `vsyslog` with the specified priority and format string, logging the message to the system log.\n",
    "__syslog_chk": "The function `__syslog_chk` logs a message at a specified priority level and flag value, using the `vsyslog` function to format the message and print it to the system log.\n",
    "tanl": "The `tanl` function takes a double `x` as input and returns the tangent of `x`.\n",
    "tanhl": "The `tanhl` function takes a double `x` as input and returns the hyperbolic tangent (tanh) of `x`. The function simply applies the tanh activation function to the input `x`.\n",
    "tgammal": "The `tgammal` function takes a double `x` as input and returns the trigamma function of `x`, which is a special function that involves the gamma function and its derivatives.\n",
    "totalorderl": "The `attribute_hidden` function takes two double pointers `x` and `y` as input and returns the total order of the two vectors using the `totalorder` function.\n",
    "totalordermagl": "The function `attribute_hidden totalordermagl(const double *x, const double *y)` calculates the total order magical strength of two arrays of double values `x` and `y`.\n",
    "truncl": "The `truncl` function takes a `double` argument `x` and returns the truncated value of `x`, which is the largest integer less than or equal to `x`.\n",
    "ufromfpl": "The `ufromfpl` function converts a floating-point number `x` to an unsigned integer of width `width`, rounding the result to the nearest integer using the `round` parameter. The function returns the rounded unsigned integer value.\n",
    "ufromfpxl": "The `ufromfpxl` function converts a floating-point value `x` to an unsigned integer value of width `width` rounded to the nearest integer using the `round` parameter.\n",
    "vasprintf": "The `vasprintf` function allocates memory for a string using `vasprintf` and returns a pointer to the allocated string.\n",
    "vdprintf": "The `vdprintf` function is a wrapper for the `__nldbl_vdprintf` function that prints a message to the console using the `va_list` argument and the format string specified in the `fmt` parameter.\n",
    "__vfprintf_chk": "The `attribute_hidden `__vfprintf_chk function is a wrapper for the `__nldbl___vfprintf_chk function that prints formatted data to a file using a variable argument list.\n",
    "__vfscanf": "The `attribute_hidden` function is a wrapper for the `vfscanf` function that hides the `IO_vfscanf` function call and returns its result. It takes a `FILE` pointer, a format string, and a va_list of arguments, and reads data from the file according to the format string.\n",
    "vfwprintf": "The `vfwprintf` function writes a formatted string to a file using variable arguments, where the format string is specified as a wide character array and the arguments are passed as a va_list.\n",
    "vfwscanf": "The `vfwscanf` function scans a wide-character format string and stores the converted values in a variable argument list.\n",
    "vprintf": "The `attribute_hidden vprintf` function is a wrapper for the `vfprintf` function that uses the `__nldbl_vfprintf` function to print formatted data to the standard output.\n",
    "__vprintf_chk": "The `attribute_hidden __vprintf_chk` function prints a formatted string to the standard output using a variable argument list, with error checking and handling.\n",
    "vscanf": "The `vscanf` function reads input from standard input and stores it into variables in a format specified by a format string, using the `va_list` argument to specify the variables to fill.\n",
    "vsnprintf": "The `vsnprintf` function formats a string using a variable number of arguments, with a maximum length limit, and returns the number of characters written.\n",
    "__vsnprintf_chk": "The `attribute_hidden` function `vsnprintf_chk` formats a string using a given format and arguments, and returns the number of characters written, with error checking and handling of overflow.\n",
    "_IO_vsprintf": "The `attribute_hidden `_IO_vsprintf function formats a string using a variable argument list and returns the formatted string.\n",
    "__vsprintf_chk": "The `attribute_hidden` function `vsprintf_chk` formats a string using a specified format and arguments, and returns the resulting string.\n",
    "__vsscanf": "The function `attribute_hidden `__vsscanf` takes a string, a format string, and a list of arguments, and it performs a variable-length scan of the string using the format string and the arguments. It returns the number of items successfully scanned.\n",
    "vswprintf": "The `vswprintf` function formats a string using a variable number of arguments, storing the result in a wide character array with a maximum length.\n",
    "vswscanf": "The `vswscanf` function is a variation of the `swscanf` function that uses variable-length argument lists (va_list) to parse a wide string (wchar_t *) according to a format string (wchar_t *).\n",
    "vsyslog": "The `vsyslog` function logs a message at a specified priority level using the `va_list` argument to format the message.\n",
    "vwprintf": "The `attribute_hidden vwprintf` function is a wrapper for the `vfwprintf` function that prints its output to the standard output stream `stdout`.\n",
    "vwscanf": "The `vwscanf` function scans a wide character string using a variable number of arguments, and returns the number of successful conversions.\n",
    "wcstold": "This function converts a wide character string to a double value using the `wcstod` function.\n",
    "__wcstold_l": "The `attribute_hidden __wcstold_l` function converts a wide character string to a long integer using the `locale_t` parameter, and returns the result.\n",
    "__wcstold_internal": "The `wcstold_internal` function converts a wide string to a double value using the `wcstod_internal` function.\n",
    "wprintf": "The `attribute_hidden` function prints a message to the console using the `wprintf` function, and returns a value indicating whether the message was successfully printed.\n",
    "wscanf": "The `wscanf` function reads input from standard input and parses it according to a format string, using the `va_list` argument to store the parsed values.\n",
    "y0l": "The function takes a double `x` as input and returns the result of calling `y0(x)`, which is not specified in the given code snippet.\n",
    "y1l": "The function `attribute_hidden` takes a double `x` as input and returns the value of `y1(x)`.\n",
    "ynl": "The `ynl` function takes an integer `n` and a double `x`, and returns the result of the `yn` function called with `n` and `x`.\n",
    "__finitef": "The function `__finitef(float x)` returns a boolean value indicating whether the input `x` is a finite number, excluding both infinite and nan values.\n",
    "__clock_gettime": "The function `__clock_gettime` retrieves the current time value for the specified clock ID, but always returns an error (-1) with the error code `ENOSYS`.\n",
    "clock": "The function `clock()` sets the errno to ENOSYS and returns a negative clock value.\n",
    "__close_nocancel": "The `close_nocancel` function closes a file descriptor passed as an argument, without prompting the user to confirm the closure.\n",
    "__open": "The `weak_function` function opens a file with the specified name and mode, and returns the file descriptor if the operation is successful, or an error value if there is an error.\n",
    "__pread64": "The `weak_function` `__pread64` reads `nbytes` bytes from the file descriptor `fd` at `offset` and stores the data in `buf`, optionally deallocating the memory if it was allocated by the kernel.\n",
    "__read": "The `weak_function` function reads `nbytes` bytes from the file descriptor `fd` and stores them in the provided `buf` pointer. It uses the `__pread64` function to perform the read.\n",
    "__write": "The `weak_function` `write` function writes `nbytes` bytes of data from the buffer `buf` to the file descriptor `fd`, returning the number of bytes written or an error code if an error occurs.\n",
    "__strtoul_internal": "The `strtoul_internal` function is an internal version of the `strtoul` function that converts a string to a unsigned long integer, with the option to specify the base and group digits.\n",
    "fstatvfs": "The `fstatvfs` function retrieves information about the file system of a file descriptor, returning information about the file system's size and availability in a `struct statvfs` buffer.\n",
    "fstatvfs64": "The function `fstatvfs64` retrieves information about the file system that a file is located in, such as the total and free space, and stores it in a `struct statvfs64` buffer.\n",
    "__fxstat": "The function `fxstat` performs a `fstat` system call on a file descriptor `fd` and stores the resulting `struct stat` buffer in `buf`, using a kernel-specific version of the `fstat` call if necessary.\n",
    "__fxstat64": "The function `fxstat64` retrieves information about a file or directory specified by `fd` and stores it in the `struct stat64` buffer `buf`, returning the result of the `fstat` system call or an error code.\n",
    "__fxstatat": "The function `fxstatat` performs a file status check on a file descriptor `fd` and returns the file status information in the `struct stat` buffer `st`, with the file name `file` and version `vers` provided.\n",
    "__fxstatat64": "The function `fxstatat64` retrieves information about a file specified by `file` and stores it in the `struct stat64` `st` structure, returning the result of the operation or an error code.\n",
    "__lxstat": "The function `lxstat` performs a `lstat` system call with the given `name` and stores the result in the `buf` parameter, depending on the version of the `lstat` system call being used (either the kernel or user space version).\n",
    "__lxstat64": "The `lxstat64` function takes an version number, a file name, and a buffer to store the file status information, and it returns the file status information or an error code.\n",
    "__open_nocancel": "The `open_nocancel` function opens a file with the specified flags and returns the file descriptor, ignoring any errors that may occur during the operation.\n",
    "__pread64_nocancel": "The `pread64_nocancel` function reads `count` bytes from the file descriptor `fd` at offset `offset` and stores the data in `buf`, without allowing cancellation.\n",
    "ptsname": "The function `ptsname` takes an file descriptor `fd` as input and returns the name of the device associated with the file descriptor, or `NULL` if the operation fails.\n",
    "__read_nocancel": "The `read_nocancel` function reads `nbytes` bytes from the file descriptor `fd` into the provided `buf` without returning until the operation is complete or an error occurs.\n",
    "statvfs": "The `statvfs` function retrieves information about the file system that the file specified by `file` is located in, and stores the information in the `struct statvfs` buffer pointed to by `buf`.\n",
    "statvfs64": "The `statvfs64` function retrieves information about the file system of the specified file using the `struct statfs64` structure.\n",
    "__write_nocancel": "The `write_nocancel` function writes data to a file descriptor without allowing cancellation of the operation.\n",
    "__xmknod": "The function `xmknod` creates a file or directory with the specified `mode` and `dev` parameters, and returns the result of the `mknodat` function.\n",
    "__xmknodat": "The function `xmknodat` creates a new file or directory with the specified mode and device number, and returns the result of the underlying `mknodat` system call.\n",
    "__xstat": "The function `__xstat` performs a `stat` system call with a given name and returns the resulting `struct stat` buffer, converting the kernel's stat buffer to a user-space buffer if necessary.\n",
    "__xstat64": "The function `__xstat64` performs a system call to retrieve information about a file or directory specified by `name`, and returns the result in the `struct stat64` buffer `buf`, converting the kernel's stat structure to the user's stat structure if necessary.\n",
    "pthread_mutex_consistent": "The function pthread_mutex_consistent() checks if a mutex is consistent and returns 0 if it is successfully acquired, and an error code if it is already owned by another thread or if there are waiters on the mutex.\n",
    "__pthread_mutex_destroy": "The function `pthread_mutex_destroy` destroys a mutex object by checking if it is currently locked and returning an error if it is, and then setting the mutex type to -1 to indicate that it is no longer in use.\n",
    "pthread_mutex_getprioceiling": "The function `pthread_mutex_getprioceiling` returns ENOSYS (not supported) for both input parameters.\n",
    "__pthread_mutex_init": "The `pthread_mutex_init` function initializes a mutex with the specified attributes, setting its flags and type, and initializing its owner ID, share count, and lock count to zero.\n",
    "__pthread_mutex_lock": "The `pthread_mutex_lock` function acquires a mutex lock for a thread, using a switch statement to determine the appropriate locking mechanism based on the mutex type and the thread's ownership. The function returns a status code indicating success or failure.\n",
    "pthread_mutex_setprioceiling": "The function `pthread_mutex_setprioceiling` sets the priority ceiling of a mutex, but it does not actually change the priority of the mutex and instead returns ENOSYS.\n",
    "__pthread_mutex_trylock": "The `pthread_mutex_trylock` function attempts to acquire a lock on a mutex, returning immediately if the lock is available, or returning an error code if the lock is busy or if the mutex is not of a type that supports trylocking. The function checks the type of mutex and the ownership status of the calling thread, and it uses a robust lock mechanism if the mutex is robustly protected.\n",
    "__pthread_mutex_unlock": "The `pthread_mutex_unlock()` function unlocks a mutex, releasing it for other threads to access. It checks the type of mutex and the ownership status of the calling thread before releasing the lock, and it returns an error code if the lock cannot be released.\n",
    "__pthread_mutexattr_destroy": "The function `pthread_mutexattr_destroy` destroys a mutex attributes object.\n",
    "pthread_mutexattr_getprioceiling": "The `pthread_mutexattr_getprioceiling` function returns ENOSYS (not supported) for all inputs.\n",
    "pthread_mutexattr_getprotocol": "The `pthread_mutexattr_getprotocol` function retrieves the protocol associated with a mutex attribute object and stores it in an integer pointer.\n",
    "pthread_mutexattr_getpshared": "The function `pthread_mutexattr_getpshared` retrieves the shared status of a mutex attribute object.\n",
    "pthread_mutexattr_getrobust": "The function `pthread_mutexattr_getrobust()` retrieves the robustness level of a mutex attribute, returning the current robustness level (either `PTHREAD_MUTEX_ROBUST` or `PTHREAD_MUTEX_STALLED`) based on the attribute's priority ceiling.\n",
    "pthread_mutexattr_gettype": "The `pthread_mutexattr_gettype` function retrieves the type of mutex attribute specified by the `attrp` parameter and stores it in the `outp` parameter.\n",
    "__pthread_mutexattr_init": "The `pthread_mutexattr_init` function initializes a `pthread_mutexattr_t` structure with a default attribute set and returns 0.\n",
    "pthread_mutexattr_setprioceiling": "The function `pthread_mutexattr_setprioceiling` sets the priority ceiling for a mutex attribute object, but it does not actually set the priority ceiling and returns `ENOSYS` instead.\n",
    "pthread_mutexattr_setprotocol": "The `pthread_mutexattr_setprotocol` function sets the protocol for a mutex attribute object, allowing the mutex to be protected with a specific priority. The function returns an error code indicating whether the protocol is valid or not.\n",
    "pthread_mutexattr_setpshared": "The `pthread_mutexattr_setpshared()` function sets the sharedness of a mutex attribute to either process-private or shared, and returns 0 if successful or `EINVAL` if the input is invalid.\n",
    "pthread_mutexattr_setrobust": "The `pthread_mutexattr_setrobust()` function sets the robustness attribute of a mutex attribute structure to a specified value, allowing the mutex to be used in robust or stalled modes.\n",
    "__pthread_mutexattr_settype": "The `pthread_mutexattr_settype` function sets the type of a mutex attribute to a specified value, checking for invalid input and returning 0 on success.\n",
    "ioperm": "The `ioperm` function allows the current process to modify the I/O permission bits of a range of memory addresses, but it always returns -1 with an error code of ENOSYS (not supported).\n",
    "euidaccess": "The `euidaccess` function checks if the current process has the specified permissions to access a file, taking into account the process's effective user ID and group ID, as well as any ACLs that may be present on the file. It returns 0 if the process has the specified permissions, and -1 if not, setting `errno` to `EACCESS` if an error occurs.\n",
    "__xpg_sigpause": "The `xpg_sigpause` function pauses the execution of the current process for the specified signal.\n",
    "cnd_timedwait": "The `cnd_timedwait` function waits for the condition `cond` to be signaled within the specified time period `time_point`, blocking other threads and returning an error code.\n",
    "mtx_timedlock": "The `mtx_timedlock` function acquires a mutex with a specified time point, blocking the calling thread until the mutex is available or the specified time point is reached, and returns an error code.\n",
    "thrd_equal": "The `thrd_equal` function compares two `thrd_t` objects for equality.\n",
    "thrd_sleep": "The `thrd_sleep` function suspends the thread for a specified amount of time, using the `clock_nanosleep` function to achieve this. The function returns a value indicating whether the sleep was interrupted by a signal (in which case it returns -1) or if it failed for some other reason (in which case it returns -2).\n",
    "grantpt": "The function grantpt checks if the file descriptor fd refers to a pty master descriptor and returns the pty number, while also ensuring that the caller has appropriate permissions to access the pty device.\n",
    "tcflow": "The function tcflow takes an file descriptor and an action and performs a specific operation on the file descriptor based on the action, returning -1 with an error code if there is an issue.\n",
    "tcflush": "The `tcflush` function flushes the output queue of a socket, optionally specifying which queue selector to use for the flush operation.\n",
    "tcgetpgrp": "The `tcgetpgrp` function retrieves the process group ID of the process associated with the file descriptor `fd`, but it returns -1 with an error set to `EBADF` if `fd` is negative or `ENOSYS` if the function is not supported.\n",
    "tcsendbreak": "The `tcsendbreak` function sends a break signal to the specified file descriptor for the specified duration, but it returns -1 if the file descriptor is invalid or the function is not supported by the system.\n",
    "tcsetattr": "The `tcsetattr` function sets the terminal attributes of a file descriptor, but it returns -1 if the file descriptor is invalid, the terminal attributes are invalid, or the function is not supported by the system. The function takes three arguments: the file descriptor, the optional actions to take (such as setting the terminal attributes immediately or waiting for the previous settings to be flushed), and a pointer to a `struct termios` structure containing the new terminal attributes.\n",
    "unlockpt": "The function unlockpt releases a lock on a pseudoterminal file descriptor fd, by sending a TIOCSPTLCK command to the kernel, and returns the result of the operation.\n",
    "accept4": "The `accept4` function accepts a connection on a socket and returns a new socket that is connected to the client.\n",
    "__cmsg_nxthdr": "The `cmsg_nxthdr` function advances to the next cmsg header in a message buffer, checking that there is enough space between the current header and the end of the buffer to hold the next header. If there is not enough space, the function returns a null pointer.\n",
    "openat64": "The `openat64` function opens a file with the specified file descriptor, file name, and open flags, and returns the file descriptor.\n",
    "epoll_create": "The `epoll_create` function creates an epoll instance with the specified size.\n",
    "epoll_pwait": "The `epoll_pwait` function waits for I/O operations to complete on a set of file descriptors, with an option to timeout after a specified period of time.\n",
    "epoll_pwait2": "The `epoll_pwait2` function waits for I/O operations to complete on a file descriptor, with an option to specify a timeout using a `timespec` structure, and returns the number of events that occurred within the specified time limit.\n",
    "epoll_wait": "The `epoll_wait` function waits for I/O events on one or more file descriptors, with the option to timeout after a specified period of time.\n",
    "eventfd_read": "The `eventfd_read` function reads data from the file descriptor `fd` and stores it in the `eventfd_t` variable `value`, returning 0 if the read is successful or -1 if an error occurs.\n",
    "eventfd_write": "The `eventfd_write` function writes the value specified in the `eventfd_t` argument to the file descriptor `fd`, and returns 0 if the write is successful or -1 if an error occurs.\n",
    "execveat": "The `execveat` function executes a program with the specified path, arguments, and environment variables, and returns the result of the execution.\n",
    "fallocate": "The `fallocate` function allocates space for a file or extends an existing file by `len` bytes starting from `offset`. It returns the result of the `fallocate` system call, which can fail with errors such as insufficient memory or file system limitations.\n",
    "fallocate64": "The `fallocate64` function allocates space for a file or extends an existing file by `len` bytes starting from `offset`. It returns the result of the `fallocate` system call, which can fail with errors such as insufficient memory or invalid arguments.\n",
    "__libc_fcntl64": "The function __libc_fcntl64 adjusts and executes a file descriptor command (F_SETLKW, F_SETLKW64, or F_OFD_SETLKW) on a file descriptor fd, using the va_list argument ap to pass additional parameters.\n",
    "ftime": "The `ftime` function retrieves the current time in seconds and microseconds, and stores it in a `struct timeb` buffer.\n",
    "getdirentries": "The `getdirentries` function retrieves directory entries from a file descriptor `fd` and stores them in a buffer `buf` with a maximum size of `nbytes`, returning the number of entries returned or -1 on error, and also updating the `base` pointer to the starting position of the next directory entry.\n",
    "__gettimeofday": "The function `__gettimeofday` retrieves the current time and stores it in the `timeval` structure `tv`, returning 0 if successful or -1 if there is an error.\n",
    "inotify_init": "The `inotify_init` function initializes the inotify system call and returns a file descriptor for use with the `inotify` system call. The function checks if the `inotify` system call is supported and returns the appropriate value based on the platform.\n",
    "listen": "The `listen` function sets up a socket to listen for incoming connections, with the ability to handle a backlog of incoming connections.\n",
    "__lseek": "The function `__lseek` seeks to a position in a file specified by `offset` and `whence`, returning the new file position or `-1` with an error set to `EOVERFLOW` if the seek operation overflows.\n",
    "mlock2": "The function mlock2() locks a memory region with the specified address and length, with optional flags that can modify the behavior of the lock, and returns 0 on success or -1 on failure.\n",
    "msgget": "The function `msgget` with the given key and message flag returns -1 and sets the errno to ENOSYS, indicating that the function is not supported.\n",
    "__libc_msgrcv": "The function `__libc_msgrcv` receives a message from a message queue, with the option to block or not, and returns the message and its type.\n",
    "__libc_msgsnd": "The function `__libc_msgsnd` sends a message to a message queue with the specified `msqid`, `msgp`, and `msgsz`, and optionally sets the message flag `msgflg`.\n",
    "__netlink_assert_response": "The `netlink_assert_response` function checks the response of a netlink operation and terminates the program with a fatal error message if the response is unexpected or invalid. The function checks for various types of errors, including invalid descriptor, connection refused, and unexpected EAGAIN or EWOULDBLOCK errors.\n",
    "__open64_nocancel": "The `open64_nocancel` function opens a file with the specified flags and returns a file descriptor. It takes into account the `O_LARGEFILE` flag to support large files.\n",
    "open_by_handle_at": "The `open_by_handle_at` function opens a file descriptor at a specific mount point and file handle, with optional flags to control the operation.\n",
    "pidfd_getpid": "The `pidfd_getpid` function reads the contents of a file descriptor and returns the process ID associated with it. If the file descriptor does not have a process ID associated with it, or if the process ID is in a separate pid namespace, the function returns an error value.\n",
    "pidfd_spawn": "The `pidfd_spawn` function spawns a new process with the specified `path`, `file_actions`, `attrp`, `argv`, and `envp`, and returns the process ID in the `pidfd` integer.\n",
    "pidfd_spawnp": "The `pidfd_spawnp` function spawns a new process using the `posix_spawn` function with the specified file actions and attributes, and returns the process ID in the `pidfd` integer pointer.\n",
    "pkey_get": "The `pkey_get` function reads a key from the hardware and returns the value of the key as a 2-bit binary number. The function checks if the input key is valid (i.e., between 0 and 15), and if not, sets the error number and returns -1.\n",
    "pkey_mprotect": "The `pkey_mprotect` function protects a memory region with the specified protection flags and protection key, and if the protection key is -1, it is equivalent to the `mprotect` system call.\n",
    "pkey_set": "The `pkey_set` function sets the access rights for a specific key in the PKey ring, by setting the appropriate bits in the ring's value.\n",
    "prlimit": "The `prlimit` function sets or queries the resource limits of a process. It takes four arguments: the process ID, the resource to limit (such as CPU time or memory), a pointer to a `struct rlimit` structure containing the new limits, and a pointer to a `struct rlimit` structure to store the previous limits.\n",
    "process_vm_readv": "The `process_vm_readv` function reads data from a process's virtual memory space into a user-provided buffer, with the ability to specify multiple buffers and flags for the operation.\n",
    "process_vm_writev": "The `process_vm_writev` function writes data from local buffers to a remote process's memory using the writev system call.\n",
    "sched_getcpu": "The `sched_getcpu()` function returns the current CPU number of the calling process using the `vsyscall` function.\n",
    "semget": "The `semget` function attempts to create a set of semaphores with the specified key and parameters, but always fails with an error code of `-1` and sets the `errno` variable to `ENOSYS`.\n",
    "semop": "The function `semop` sets the error number to `ENOSYS` and returns -1, indicating that the operation is not supported.\n",
    "shmat": "The `shmat` function maps a shared memory segment into the address space of the calling process, but always returns an error status of `-1` with the error code `ENOSYS` (not supported).\n",
    "shmdt": "The function `shmdt` takes a pointer to shared memory as an argument and sets the errno to ENOSYS before returning -1, indicating that the function is not supported.\n",
    "shmget": "The function `shmget` attempts to create a shared memory segment with the specified `size` and `key`, but always returns -1 with an error set to `ENOSYS` (not supported).\n",
    "signalfd": "The `signalfd` function sets up a signal filldescription that delivers signals to a file descriptor.\n",
    "posix_spawnattr_getcgroup_np": "The `posix_spawnattr_getcgroup_np` function retrieves the cgroup ID associated with a `posix_spawnattr_t` structure and stores it in the `int` variable passed as an argument.\n",
    "posix_spawnattr_setcgroup_np": "The `posix_spawnattr_setcgroup_np` function sets the container group (cgroup) for a spawned process using the `posix_spawnattr_t` structure, specifying the desired cgroup in the `cgroup` parameter.\n",
    "cfgetospeed": "The `cfgetospeed` function returns the current output speed of the terminal, as specified by the `termios` structure pointed to by `termios_p`.\n",
    "cfgetispeed": "The `cfgetispeed` function returns the input speed of the terminal, as specified in the `termios` structure passed as an argument.\n",
    "cfsetospeed": "The `cfsetospeed` function sets the output speed of a terminal device to the specified `speed_t` value, and returns 0 if successful or -1 with an error code if the input is invalid.\n",
    "cfsetispeed": "The `cfsetispeed` function sets the input speed of a terminal interface to the specified `speed_t` value, and returns 0 if successful or -1 with an error code set in `errno`.\n",
    "splice": "The `splice` function splices the data from one file descriptor to another, starting at a specified offset and with a specified length, and optionally canceling any pending I/O operations.\n",
    "sync_file_range": "The `sync_file_range` function synchronizes the specified range of bytes in a file with the underlying storage, using the `sync_file_range2` system call if available, or falling back to `sync_file_range` if not.\n",
    "tee": "The `tee` function takes an integer `src`, an integer `dest`, a size_t `len`, and an unsigned integer `flags`, and returns a value indicating whether the operation was cancelled.\n",
    "time": "The function `time` takes a pointer to a `time_t` variable and returns the current seconds since the epoch, using the `clock_gettime` function to get the current time.\n",
    "vmsplice": "The `vmsplice` function splices the contents of an array of iovecs into a file descriptor, optionally applying flags to control the operation.\n",
    "iopl": "The function `iopl` sets the error number to `ENOSYS` and returns -1.\n",
    "__clone": "The function __clone takes a function pointer, a child stack, and various flags and arguments, and it creates a new process by cloning the given function and its arguments into the child stack, returning a new process ID on success or an error code on failure.\n",
    "__arch_prctl": "The `arch_prctl` function provides a way to access the kernel's view of the address space, allowing userspace applications to retrieve the current value of the floating-point stack (FS) or the general-purpose stack (GS). The function takes an integer code specifying which type of stack to access and a pointer to a void* variable to store the address of the stack.\n",
    "__x86_get_cpuid_feature_leaf": "The `x86_get_cpuid_feature_leaf` function returns a pointer to a `cpuid_feature` structure based on the given `leaf` index, returning a static structure if the index is out of range.\n",
    "ftok": "The function `ftok` takes a pathname and a project ID as input, and returns a unique token based on the file's inode number, device number, and project ID. The token is created by combining the file's inode and device numbers with the project ID in a specific way, and is returned as a `key_t` value.\n",
    "msgctl": "The `msgctl` function with the given parameters sets the errno value to ENOSYS and returns -1, indicating that the command is not supported.\n",
    "msgrcv": "The function `msgrcv` receives a message from a message queue, but always returns an error (-1) and sets the errno variable to ENOSYS.\n",
    "msgsnd": "The `msgsnd` function sends a message to a message queue with the specified message pointer and size, but always returns an error of ENOSYS (not supported).\n",
    "semctl": "The `semctl` function sets the error number to `ENOSYS` and returns -1, indicating that the command specified by `cmd` is not supported.\n",
    "shmctl": "The `shmctl` function sets the errno variable to ENOSYS and returns -1, indicating that the command specified by `cmd` is not supported.\n",
    "cfmakeraw": "The `cfmakeraw` function clears certain input and output flags in the `termios` structure `t`, disabling echoing, canonical mode, and other features, and sets the input buffer size to 1 character.\n",
    "cfsetspeed": "The `cfsetspeed` function sets the baud rate of a serial port to the specified speed, using a table of predefined speeds. If the specified speed is not found in the table, the function returns an error.\n",
    "tcgetsid": "The `tcgetsid` function retrieves the session ID of the process group associated with the file descriptor `fd`. It first tries to use the `TIOCGSID` ioctl command, but if that fails (due to EINVAL or ENOTTY), it falls back to using the `getsid` function and sets the error number appropriately.\n",
    "asctime": "The `asctime` function takes a `struct tm` pointer as input and returns a string representing the time in the format \"HH:MM:SS\".\n",
    "ctime": "The function `ctime` takes a pointer to a `time_t` value and returns a string representing the current time in the format specified by the `ctime` function.\n",
    "ctime_r": "The function `ctime_r` takes a `time_t` pointer as input and returns a string representing the current time in the format specified by the `ctime` function, using the `time64_t` type to handle 64-bit time values.\n",
    "dysize": "The `dysize` function returns the number of days in a given year, where a leap year has 366 days and a non-leap year has 365 days.\n",
    "getdate": "The `getdate` function takes a string as input, and returns the date and time information from that string, using the `getdate_r` function to parse the string and store the result in a `struct tm` buffer.\n",
    "__gmtime_r": "The function `gmtime_r` takes a `time_t` pointer and a `struct tm` pointer as input, and returns the `struct tm` values representing the GMT time corresponding to the given `time_t` value.\n",
    "gmtime": "The `gmtime` function takes a `time_t` pointer as input and returns a `struct tm` pointer representing the time in Greenwich Mean Time (GMT) format.\n",
    "localtime": "The `localtime` function takes a `time_t` pointer as input and returns a `struct tm` pointer representing the local time corresponding to the given timestamp.\n",
    "mktime": "The `mktime` function converts a `struct tm` object to a Unix time_t value, and returns the result if it falls within the valid time range, or -1 with an error set if the value overflows. The function takes a `struct tm` object as input and modifies it to contain the converted time value.\n",
    "strftime": "The `strftime` function formats a string according to a specified format and returns the resulting string, using the current locale and the specified time structure.\n",
    "strptime": "The `strptime` function parses a string in a format specified by a format string and stores the extracted values in a `struct tm` structure.\n",
    "localtime_r": "The `localtime_r` function takes a `time_t` pointer and a `struct tm` pointer as input, and returns a pointer to a `struct tm` structure containing the local time information for the given `time_t` value, or `NULL` if the `time_t` value is invalid.\n",
    "timegm": "The `timegm` function takes a `struct tm` pointer as input and returns the Unix timestamp (a signed integer) representing the date and time represented by the input structure. If the input structure is valid and falls within the range of a 32-bit integer, the function returns the Unix timestamp and updates the input structure with the resulting values.\n",
    "timespec_get": "The `timespec_get` function retrieves the current time in the specified base (either UTC or realtime) and stores it in a `struct timespec` pointer, returning the base if successful or 0 if not.\n",
    "timespec_getres": "The `timespec_getres` function retrieves the resolution of the current clock, based on the `TIME_UTC` or `CLOCK_REALTIME` base, and stores the result in the `ts` structure.\n",
    "wcsftime": "The `wcsftime` function formats a date and time string using a wide-character format string and a `struct tm` structure, and stores the result in a wide-character array.\n",
    "tzset": "The `tzset()` function sets the time zone information for the current process.\n",
    "gmtime_r": "The `gmtime_r` function returns the GMT time corresponding to a `time_t` value, and stores the result in the `struct tm` pointer `tmp`, updating the pointer `r` to point to the modified `struct tm` value.\n",
    "strdup": "The `strdup` function allocates memory for a copy of the input string using `malloc`, copies the input string to the allocated memory using `strcpy`, and returns a pointer to the copied string.\n",
    "c16rtomb": "The `c16rtomb` function converts a wide character (wchar_t) to a multibyte character (char) using a mbstate_t structure to keep track of surrogate pairs and returns the converted character.\n",
    "c32rtomb": "The `c32rtomb` function converts a `char32_t` value to a wide character string using the specified mbstate_t structure.\n",
    "c8rtomb": "The `c8rtomb` function takes a null-terminated string of ASCII or wide characters, a wide character, and a pointer to an `mbstate_t` structure, and it converts the string to a wide character using the current multibyte encoding state.\n",
    "__mbrlen": "The function `__mbrlen` converts a multibyte string to a wide character, using the specified `mbstate_t` object to keep track of the state of the conversion.\n",
    "mbrtoc16": "The `mbrtoc16` function converts a multibyte character in the input string `s` to a wide character, using the current locale and the `gconv` function. It returns the number of bytes converted or a negative error code if there is an error.\n",
    "mbrtoc32": "The function `mbrtoc32` converts a sequence of characters to a wide character string, using the current locale and the `mbrtowc` function, and returns the number of wide characters converted.\n",
    "mbrtoc8": "The function mbrtoc8 takes a pointer to a buffer of char8_t, a pointer to a string, and a size_t, and it returns the number of characters written to the buffer, or -3 if an error occurs, while handling multibyte character (MB) sequences and writing the resulting wide characters (WC) to the buffer.\n",
    "__mbrtowc": "The function `__mbrtowc` converts a sequence of bytes from a multibyte character set to a wide character, using the current locale's conversion functions, and returns the number of bytes converted or a special value indicating an error.\n",
    "wcscspn": "The `wcscspn` function counts the number of characters in the wide character string `wcs` that do not appear in the wide character string `reject`.\n",
    "wcsdup": "The `wcsdup` function copies the contents of a wide character string `s` into a newly allocated block of memory, returning a pointer to the new memory block. If memory allocation fails, the function returns `NULL`.\n",
    "wcspbrk": "The `wcspbrk` function searches for the first occurrence of a given string within a wider string, returning the position of the first match or `NULL` if no match is found.\n",
    "wcsspn": "The function `wcsspn` counts the number of characters in the first string that are also present in the second string.\n",
    "wcsstr": "The `wcsstr` function searches for a substring within a larger string, returning the position of the substring if found or `NULL` if not. It uses a loop to search for the substring, checking for the end of the string and the equality of the characters in the substring and the larger string.\n",
    "wcstok": "The `wcstok` function scans a wide character string and returns a pointer to the first token (a sequence of wide characters that does not contain any of the specified delimiters) or `NULL` if there are no tokens. It also saves the pointer to the next token in the string in the `save_ptr` parameter.\n",
    "wcswidth": "The `wcswidth` function calculates the width of a wide string (a string consisting of wide characters) by iterating over each character and summing the width of each one, returning the total width if all characters are processed successfully, or -1 if an error occurs.\n",
    "wctob": "The `wctob` function converts a single wide character (encoded as an `wint_t`) to a multi-byte character (encoded as an `unsigned char[MB_LEN_MAX]`), using the current locale's conversion tables. The function returns the converted character, or `EOF` if the conversion failed or the output is too long.\n",
    "wcwidth": "The `wcwidth` function returns the width of a wide character (wchar_t) in terms of the number of columns it would occupy when printed.\n",
    "__iswctype": "The `iswctype` function checks if a wide character (wc) matches a wide character type (desc), returning 0 if the desc is invalid or if there is no match, and the address of the matching wide character type if there is a match.\n",
    "__iswctype_l": "The `iswctype_l` function checks if a wide character `wc` matches a wide character type `desc` using a locale-specific table, returning 1 if it matches and 0 if it doesn't.\n",
    "__towctrans": "The `towctrans` function takes a `wint_t` value and a `wctrans_t` description, and returns the converted value based on the description. If the description is invalid, the function simply returns the original value.\n",
    "__towctrans_l": "The `towctrans_l` function translates a wide character (wc) to a corresponding character in the current locale, using a translation table (desc) and returning the translated character.\n",
    "__wctrans_l": "The function `__wctrans_l` takes a `const char *property` and a `locale_t` object as input, and returns the corresponding translation of the property as a `wctrans_t` value, using the locale information stored in the `locale_t` object.\n",
    "__wctype_l": "The function `__wctype_l` takes a `const char*` property and a `locale_t` object as input, and returns the corresponding `wctype_t` value for the property in the specified locale. It does this by searching through a list of class names and offsets in the locale's data to find the matching property.\n"
}
